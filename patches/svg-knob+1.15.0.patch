diff --git a/node_modules/svg-knob/dist/index.js b/node_modules/svg-knob/dist/index.js
index f8d2a23..a104605 100644
--- a/node_modules/svg-knob/dist/index.js
+++ b/node_modules/svg-knob/dist/index.js
@@ -1,2 +1,2 @@
-var t={light:{bg_color:"#E0E0E0",bg_border_color:"#BDBDBD",track_bg_color:"#CFD8DC",track_color_init:"#64B5F6",track_color:"#42A5F5",cursor_color_init:"#64B5F6",cursor_color:"#42A5F5",markers_color:"#9E9E9E",font_color:"#424242"},light2:{bg_color:"#B1DAEE",bg_border_color:"#569DC0",track_bg_color:"#B1DAEE",track_color_init:"#569DC0",track_color:"#1D6D93",cursor_color_init:"#569DC0",cursor_color:"#1D6D93",markers_color:"#3680A4",font_color:"#1D6D93"},dark:{bg_color:"#000000",bg_border_color:"#569DC0",track_bg_color:"#424242",track_color_init:"#FDD835",track_color:"#FFEC00",cursor_color_init:"#569DC0",cursor_color:"#FDD835",markers_color:"#3680A4",font_color:"#FFEA00"}};module.exports=function(e,r){if(void 0===r&&(r={}),!e)throw"You must pass a DOM node reference to the Knob constructor";var n,o=!1,a="http://www.w3.org/2000/svg",l=!0,i=!l,s=50,u=50;("string"==typeof e||e instanceof String)&&(e=document.querySelector(e)),"svg"===e.nodeName.toLowerCase()?n=e:(n=document.createElementNS("http://www.w3.org/2000/svg","svg"),e.appendChild(n));var c,_={label:!1,rotation:l,default_value:0,initial_value:0,value_min:0,value_max:100,value_resolution:1,center_zero:!1,center_value:null,center_gap:4,zero_at:270,angle_min:30,angle_max:330,bg_radius:32,bg_border_width:1,track_bg_radius:40,track_bg_width:8,track_radius:40,track_width:8,cursor_radius:18,cursor_length:10,cursor_width:4,palette:"light",bg:!1,track_bg:!0,track:!0,cursor:!1,linecap:"butt",value_text:!0,value_position:u+8,font_family:"sans-serif",font_size:25,display_raw:!1,format_raw:function(t){return Math.round(t)},format:function(t){return t},font_weight:"bold",markers:0,markers_radius:40,markers_length:8,markers_width:2,class_bg:"knob-bg",class_track_bg:"knob-track-bg",class_track:"knob-track",class_value:"knob-value",class_cursor:"knob-cursor",class_markers:"knob-markers",snap_to_steps:!1,mouse_wheel_acceleration:1,onchange:null},d=JSON.parse(e.dataset.config||"{}"),g=Object.assign({},_,t[_.palette],r,d),b=Object.assign(g,t[g.palette],r,d);c=b.label||b.value_position>=100-b.font_size/2?120:100,n.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink"),n.setAttributeNS(null,"viewBox","0 0 100 "+c);var m,h,v=0,f=0,k=0,p=0,A=b.angle_min,w=null,x=null,E=null,M=null,S=null,D=null,N=null,y=null,C=null,z=!1;function F(){o&&console.log("init()"),b.center_zero&&(b.center_value||(b.center_value=P((b.value_max-b.value_min)/2+b.value_min))),"butt"===b.linecap?(k=j(180*Math.acos(-b.center_gap/100)/Math.PI),p=j(180*Math.acos(b.center_gap/100)/Math.PI)):(k=j(180*Math.acos(-(1.3*b.track_width+b.center_gap)/100)/Math.PI),p=j(180*Math.acos((1.3*b.track_width+b.center_gap)/100)/Math.PI))}function L(){O(b.initial_value?b.initial_value:b.default_value)}function P(t){return null===b.value_resolution?t:Math.round(t/b.value_resolution)*b.value_resolution}function B(t){o&&console.log("getDisplayValue",b.display_raw);var e=T(t);return b.display_raw?b.format_raw(e):b.format(e)}function I(){var t;return t=Math.abs(b.value_max-b.value_min),1===Math.abs(t%2)?.5:0}function T(t){return P(((void 0===t?A:t)-b.angle_min)/(b.angle_max-b.angle_min)*(b.value_max-b.value_min)+b.value_min-I())}function O(t){return V((t+I()-b.value_min)/(b.value_max-b.value_min)*(b.angle_max-b.angle_min)+b.angle_min),o&&console.log("setValue("+t+") angle="+(t-b.value_min)/(b.value_max-b.value_min)*(b.angle_max-b.angle_min)+b.angle_min),!0}function V(t,r){var n=A,a=r&&t!==A;A=Math.min(Math.max(t,b.angle_min),b.angle_max),a&&T(n)!==T()&&function(){o&&console.log("knob value has changed");var t=T(),r=new CustomEvent("change",{detail:t});e.dispatchEvent(r),b.onchange&&b.onchange(t)}()}function Y(t){var e=b.zero_at-t;return e<0&&(e+=360),o&&console.log("knobToPolarAngle "+t+" -> "+e),e}function j(t){return o&&console.log("polarToKnobAngle "+t+" -> "+(b.zero_at-t+360)%360),(b.zero_at-t+360)%360}function K(t){var e=t.clientX-m.left,r=t.clientY-m.top,n=(e-v)/(m.width/2),a=-(r-f)/(m.width/2);b.rotation===i&&(n=-n);var l=Math.atan2(a,n);l<0&&(l=2*Math.PI+l),o&&console.log("mouseUpdate: position in svg = "+e+", "+r+" pixels; "+n.toFixed(3)+", "+a.toFixed(3)+" rel.; angle "+l.toFixed(3)+" rad"),V(j(180*l/Math.PI),!0)}function R(t){t.preventDefault(),K(t),et()}function X(){o&&console.log("endDrag"),document.removeEventListener("mousemove",R,!1),document.removeEventListener("mouseup",X,!1)}function q(t){o&&console.log("handleTouch",t.touches),t.preventDefault();var e=t.touches.length-1,r=t.touches[e].clientX-m.left,n=t.touches[e].clientY-m.top,a=(r-v)/(m.width/2),l=-(n-f)/(m.width/2);b.rotation===i&&(a=-a);var s=Math.atan2(l,a);s<0&&(s=2*Math.PI+s),o&&console.log("handleTouch: position in svg = "+r+", "+n+" pixels; "+a.toFixed(3)+", "+l.toFixed(3)+" rel.; angle "+s.toFixed(3)+" rad"),V(j(180*s/Math.PI),!0),et()}function H(){o&&console.log("endTouch"),document.removeEventListener("touchmove",q),document.removeEventListener("touchend",H)}function J(t,e){var r=t*Math.PI/180,n=void 0===e?b.track_radius:e,o=Math.cos(r)*n,a=Math.sin(r)*n;return{x:b.rotation===l?s+o:s-o,y:u-a}}function U(t,e,r){o&&console.group("getArc("+t+", "+e+", "+r+")");var n=Y(t),a=Y(e);t!==e&&(n-=1e-4,a+=1e-4);var i=J(n,r),s=i.x,u=i.y,c=J(a,r),_="M "+s+","+u+" A "+r+","+r+" 0 "+((n-a+360)%360<180?0:1)+","+(b.rotation===l?1:0)+" "+c.x+","+c.y;return o&&console.groupEnd(),o&&console.log("arc: "+_),_}function G(){o&&console.log("getTrackPath()");var t=null;if(b.center_zero){if(Array.isArray(b.center_value)){if(b.center_value.includes(T()))return o&&console.log("getTrackPath: center position, track not drawn"),t}else if(T()===b.center_value)return o&&console.log("getTrackPath: center position, track not drawn"),t;A<180?t=U(Math.min(A,k),k,b.track_radius):A>180&&(t=U(p,Math.max(A,p),b.track_radius))}else t=U(b.angle_min,A,b.track_radius);return t}function Q(){if(o&&console.log("draw_track()",b.track),b.track){var t=G();t&&((S=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),S.setAttribute("stroke",""+b.track_color_init),S.setAttribute("stroke-width",""+b.track_width),S.setAttribute("fill","transparent"),S.setAttribute("stroke-linecap",b.linecap),S.setAttribute("class",b.class_track),n.appendChild(S))}}function W(){var t=Y(A),e=J(t,b.cursor_radius),r=J(t,b.cursor_radius+b.cursor_length);return"M "+e.x+","+e.y+" L "+r.x+","+r.y}function Z(t,e){if(void 0===e&&(e=!1),"string"!=typeof t)return b.font_size;var r=Math.min(22,t.length);return e?b.font_size*Math.min(.75,Math.max((22-r)/22,.25)):b.font_size*Math.max((22-r)/22,.25)}function $(t,e){void 0===e&&(e=!1),o&&console.log("draw_value_line1",t),(y=document.createElementNS(a,"text")).setAttributeNS(null,"x",""+s),y.setAttributeNS(null,"y",""+b.value_position),y.setAttribute("text-anchor","middle"),y.setAttribute("cursor","default"),y.setAttribute("font-family",b.font_family),y.setAttribute("font-size",""+Z(t,e)),y.setAttribute("font-weight",""+b.font_weight),y.setAttribute("fill",b.font_color),y.setAttribute("class",b.class_value),y.textContent=t,n.appendChild(y)}function tt(t){o&&console.log("draw_value_line2",t),(C=document.createElementNS(a,"text")).setAttributeNS(null,"x",""+s),C.setAttributeNS(null,"y",""+(b.value_position+4)),C.setAttribute("text-anchor","middle"),C.setAttribute("cursor","default"),C.setAttribute("font-family",b.font_family),C.setAttribute("font-size",""+Z(t,!0)),C.setAttribute("font-weight",""+b.font_weight),C.setAttribute("fill",b.font_color),C.setAttribute("class",b.class_value),C.textContent=t,n.appendChild(C)}function et(){o&&console.log("redraw()",b);var t=G();t?S?(o&&console.log("redraw track already exist, update d"),S.setAttributeNS(null,"d",t)):(o&&console.log("redraw draw_track"),Q()):S&&(o&&console.log("redraw track already exist, hide it"),S.setAttributeNS(null,"d","")),z||(z=T()!==b.default_value)&&S&&S.setAttribute("stroke",""+b.track_color),D&&(t=W())&&(o&&console.log("redraw cursor"),D.setAttributeNS(null,"d",t),z&&D.setAttribute("stroke",""+b.cursor_color)),y&&(o&&console.log("redraw svg_value_text"),function(){if(o&&console.log("update_value",b.value_text),b.value_text){var t=B();if("number"==typeof t||t.indexOf("\n")<=0)o&&console.log("single line"),y&&(y.setAttributeNS(null,"y",""+b.value_position),y.setAttribute("font-size",""+Z(t)),y.textContent=t),C&&(n.removeChild(C),C=null);else{var e=t.split("\n");o&&console.log("two lines",t,e),y&&(y.setAttributeNS(null,"y",""+(b.value_position-12)),y.setAttribute("font-size",""+Z(e[0],!0)),y.textContent=e[0]),C?(C.setAttributeNS(null,"y",""+(b.value_position+4)),C.setAttribute("font-size",""+Z(e[1],!0)),C.textContent=e[1]):tt(e[1])}}}())}return F(),L(),o&&console.log("draw()",b),o&&console.log("draw_background()",b.bg),b.bg&&((w=document.createElementNS(a,"circle")).setAttributeNS(null,"cx",""+s),w.setAttributeNS(null,"cy",""+u),w.setAttributeNS(null,"r",""+b.bg_radius),w.setAttribute("fill",""+b.bg_color),w.setAttribute("stroke",""+b.bg_border_color),w.setAttribute("stroke-width",""+b.bg_border_width),w.setAttribute("class",b.class_bg),n.appendChild(w)),o&&console.log("draw_track_background()",b.track_bg),b.track_bg&&(b.center_zero?((E=document.createElementNS(a,"path")).setAttributeNS(null,"d",U(b.angle_min,k,b.track_bg_radius)),E.setAttribute("stroke",""+b.track_bg_color),E.setAttribute("stroke-width",""+b.track_bg_width),E.setAttribute("stroke-linecap",b.linecap),E.setAttribute("fill","transparent"),E.setAttribute("class",b.class_track_bg),n.appendChild(E),(M=document.createElementNS(a,"path")).setAttributeNS(null,"d",U(p,b.angle_max,b.track_bg_radius)),M.setAttribute("stroke",""+b.track_bg_color),M.setAttribute("stroke-width",""+b.track_bg_width),M.setAttribute("stroke-linecap",b.linecap),M.setAttribute("fill","transparent"),M.setAttribute("class",b.class_track_bg),n.appendChild(M)):((x=document.createElementNS(a,"path")).setAttributeNS(null,"d",U(b.angle_min,b.angle_max,b.track_bg_radius)),x.setAttribute("stroke",""+b.track_bg_color),x.setAttribute("stroke-width",""+b.track_bg_width),x.setAttribute("fill","transparent"),x.setAttribute("stroke-linecap",b.linecap),x.setAttribute("class",b.class_track_bg),n.appendChild(x))),function(){if(o&&console.log("draw_markers()",b.markers),b.markers){for(var t="",e=(b.angle_max-b.angle_min)/b.markers,r=b.angle_min;r<=b.angle_max;r+=e){var l=J(Y(r),b.markers_radius),i=J(Y(r),b.markers_radius+b.markers_length);t+="M "+l.x+","+l.y+" L "+i.x+","+i.y+" "}(N=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),N.setAttribute("stroke",""+b.markers_color),N.setAttribute("stroke-width",""+b.markers_width),N.setAttribute("stroke-linecap",b.linecap),N.setAttribute("class",b.class_markers),n.appendChild(N)}}(),Q(),function(){if(o&&console.log("draw_cursor()",b.cursor),b.cursor){var t=W();t&&((D=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),D.setAttribute("stroke",""+b.cursor_color_init),D.setAttribute("stroke-width",""+b.cursor_width),D.setAttribute("fill","transparent"),D.setAttribute("stroke-linecap",b.linecap),D.setAttribute("class",b.class_cursor),n.appendChild(D))}}(),function(){if(o&&console.log("draw_value",b.value_text),b.value_text){var t=B();if("number"==typeof t||t.indexOf("\n")<=0)o&&console.log("single line"),$(t);else{var e=t.split("\n");o&&console.log("two lines",e),$(e[0],!0),tt(e[1])}}}(),o&&console.log("attach attachEventHandlers"),n.addEventListener("mousedown",function(t){!function(t){o&&console.log("startDrag"),t.preventDefault(),m=n.getBoundingClientRect(),f=v=m.width/2,document.addEventListener("mousemove",R,!1),document.addEventListener("mouseup",X,!1),K(t),et()}(t)}),n.addEventListener("wheel",function(t){!function(t){t.preventDefault();var e=t.deltaY;0!==e&&(h>Math.abs(e)||!h)&&(h=Math.abs(e)),V(Math.min(Math.max(A+e/h*1*b.mouse_wheel_acceleration,b.angle_min),b.angle_max),!0),et()}(t)}),n.addEventListener("touchstart",function(t){o&&console.log("startTouch"),t.preventDefault(),m=n.getBoundingClientRect(),f=v=m.width/2,document.addEventListener("touchmove",q,{passive:!1}),document.addEventListener("touchend",H)},{passive:!1}),{set value(t){O(t),et()},set config(t){b=Object.assign({},_,b,t),F(),et()},setConfigValue:function(t,e){b[t]=e,F(),et()},initValue:L,enableDebug:function(){o=!0},disableDebug:function(){o=!1}}};
+var t={light:{bg_color:"#E0E0E0",bg_border_color:"#BDBDBD",track_bg_color:"#CFD8DC",track_color_init:"#64B5F6",track_color:"#42A5F5",cursor_color_init:"#64B5F6",cursor_color:"#42A5F5",markers_color:"#9E9E9E",font_color:"#424242"},light2:{bg_color:"#B1DAEE",bg_border_color:"#569DC0",track_bg_color:"#B1DAEE",track_color_init:"#569DC0",track_color:"#1D6D93",cursor_color_init:"#569DC0",cursor_color:"#1D6D93",markers_color:"#3680A4",font_color:"#1D6D93"},dark:{bg_color:"#000000",bg_border_color:"#569DC0",track_bg_color:"#424242",track_color_init:"#FDD835",track_color:"#FFEC00",cursor_color_init:"#569DC0",cursor_color:"#FDD835",markers_color:"#3680A4",font_color:"#FFEA00"}};module.exports=function(e,r){if(void 0===r&&(r={}),!e)throw"You must pass a DOM node reference to the Knob constructor";var n,o=!1,a="http://www.w3.org/2000/svg",l=!0,i=!l,s=50,u=s,c=50,_=100;("string"==typeof e||e instanceof String)&&(e=document.querySelector(e));var d=e.nodeName.toLowerCase();if("g"===d){var g=(n=e).getBBox();u=g.x+.5*g.width,c=g.y+.5*g.height,_=g.width}else{if("div"!==d)throw"Unsupported element type for creating knob, should be a div or an SVG g element!";n=document.createElementNS("http://www.w3.org/2000/svg","svg"),e.appendChild(n)}var b={label:!1,rotation:l,default_value:0,initial_value:0,value_min:0,value_max:100,value_resolution:1,center_zero:!1,center_value:null,center_gap:4,zero_at:270,angle_min:30,angle_max:330,bg_radius:32,bg_border_width:1,track_bg_radius:40,track_bg_width:8,track_radius:40,track_width:8,cursor_radius:18,cursor_length:10,cursor_width:4,palette:"light",bg:!1,track_bg:!0,track:!0,cursor:!1,linecap:"butt",value_text:!0,value_position:58,font_family:"sans-serif",font_size:25,display_raw:!1,format_raw:function(t){return Math.round(t)},format:function(t){return t},font_weight:"bold",markers:0,markers_radius:40,markers_length:8,markers_width:2,class_bg:"knob-bg",class_track_bg:"knob-track-bg",class_track:"knob-track",class_value:"knob-value",class_cursor:"knob-cursor",class_markers:"knob-markers",snap_to_steps:!1,mouse_wheel_acceleration:1,onchange:null},m=JSON.parse(e.dataset.config||"{}"),h=Object.assign({},b,t[b.palette],r,m),v=Object.assign(h,t[h.palette],r,m);n.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink"),100===_&&n.setAttributeNS(null,"viewBox","0 0 100 "+(v.label||v.value_position>=_-v.font_size/2?120:100));var f,k,p=0,A=0,w=0,x=0,E=v.angle_min,M=null,S=null,y=null,D=null,N=null,C=null,z=null,F=null,L=null,P=!1;function B(){o&&console.log("init()"),v.center_zero&&(v.center_value||(v.center_value=T((v.value_max-v.value_min)/2+v.value_min))),"butt"===v.linecap?(w=U(180*Math.acos(-v.center_gap/100)/Math.PI),x=U(180*Math.acos(v.center_gap/100)/Math.PI)):(w=U(180*Math.acos(-(1.3*v.track_width+v.center_gap)/100)/Math.PI),x=U(180*Math.acos((1.3*v.track_width+v.center_gap)/100)/Math.PI))}function I(){j(v.initial_value?v.initial_value:v.default_value)}function T(t){return null===v.value_resolution?t:Math.round(t/v.value_resolution)*v.value_resolution}function O(t){o&&console.log("getDisplayValue",v.display_raw);var e=Y(t);return v.display_raw?v.format_raw(e):v.format(e)}function V(){var t;return t=Math.abs(v.value_max-v.value_min),1===Math.abs(t%2)?.5:0}function Y(t){return T(((void 0===t?E:t)-v.angle_min)/(v.angle_max-v.angle_min)*(v.value_max-v.value_min)+v.value_min-V())}function j(t){return K((t+V()-v.value_min)/(v.value_max-v.value_min)*(v.angle_max-v.angle_min)+v.angle_min),o&&console.log("setValue("+t+") angle="+(t-v.value_min)/(v.value_max-v.value_min)*(v.angle_max-v.angle_min)+v.angle_min),!0}function K(t,r){var n=E,a=r&&t!==E;E=Math.min(Math.max(t,v.angle_min),v.angle_max),a&&Y(n)!==Y()&&function(){o&&console.log("knob value has changed");var t=Y(),r=new CustomEvent("change",{detail:t});e.dispatchEvent(r),v.onchange&&v.onchange(t)}()}function R(t){var e=v.zero_at-t;return e<0&&(e+=360),o&&console.log("knobToPolarAngle "+t+" -> "+e),e}function U(t){return o&&console.log("polarToKnobAngle "+t+" -> "+(v.zero_at-t+360)%360),(v.zero_at-t+360)%360}function X(t){var e=t.clientX-f.left,r=t.clientY-f.top,n=(e-p)/(f.width/2),a=-(r-A)/(f.width/2);v.rotation===i&&(n=-n);var l=Math.atan2(a,n);l<0&&(l=2*Math.PI+l),o&&console.log("mouseUpdate: position in svg = "+e+", "+r+" pixels; "+n.toFixed(3)+", "+a.toFixed(3)+" rel.; angle "+l.toFixed(3)+" rad"),K(U(180*l/Math.PI),!0)}function q(t){t.preventDefault(),X(t),ot()}function G(){o&&console.log("endDrag"),document.removeEventListener("mousemove",q,!1),document.removeEventListener("mouseup",G,!1)}function H(t){o&&console.log("handleTouch",t.touches),t.preventDefault();var e=t.touches.length-1,r=t.touches[e].clientX-f.left,n=t.touches[e].clientY-f.top,a=(r-p)/(f.width/2),l=-(n-A)/(f.width/2);v.rotation===i&&(a=-a);var s=Math.atan2(l,a);s<0&&(s=2*Math.PI+s),o&&console.log("handleTouch: position in svg = "+r+", "+n+" pixels; "+a.toFixed(3)+", "+l.toFixed(3)+" rel.; angle "+s.toFixed(3)+" rad"),K(U(180*s/Math.PI),!0),ot()}function J(){o&&console.log("endTouch"),document.removeEventListener("touchmove",H),document.removeEventListener("touchend",J)}function Q(t,e){var r=t*Math.PI/180,n=void 0===e?v.track_radius:e,o=Math.cos(r)*n,a=Math.sin(r)*n;return{x:v.rotation===l?u+o:u-o,y:c-a}}function W(t,e,r){o&&console.group("getArc("+t+", "+e+", "+r+")");var n=R(t),a=R(e);t!==e&&(n-=1e-4,a+=1e-4);var i=Q(n,r),s=i.x,u=i.y,c=Q(a,r),_="M "+s+","+u+" A "+r+","+r+" 0 "+((n-a+360)%360<180?0:1)+","+(v.rotation===l?1:0)+" "+c.x+","+c.y;return o&&console.groupEnd(),o&&console.log("arc: "+_),_}function Z(){o&&console.log("getTrackPath()");var t=null;if(v.center_zero){if(Array.isArray(v.center_value)){if(v.center_value.includes(Y()))return o&&console.log("getTrackPath: center position, track not drawn"),t}else if(Y()===v.center_value)return o&&console.log("getTrackPath: center position, track not drawn"),t;E<180?t=W(Math.min(E,w),w,v.track_radius):E>180&&(t=W(x,Math.max(E,x),v.track_radius))}else t=W(v.angle_min,E,v.track_radius);return t}function $(){if(o&&console.log("draw_track()",v.track),v.track){var t=Z();t&&((N=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),N.setAttribute("stroke",""+v.track_color_init),N.setAttribute("stroke-width",""+v.track_width),N.setAttribute("fill","transparent"),N.setAttribute("stroke-linecap",v.linecap),N.setAttribute("class",v.class_track),n.appendChild(N))}}function tt(){var t=R(E),e=Q(t,v.cursor_radius),r=Q(t,v.cursor_radius+v.cursor_length);return"M "+e.x+","+e.y+" L "+r.x+","+r.y}function et(t,e){if(void 0===e&&(e=!1),"string"!=typeof t)return v.font_size;var r=Math.min(22,t.length);return e?v.font_size*Math.min(.75,Math.max((22-r)/22,.25)):v.font_size*Math.max((22-r)/22,.25)}function rt(t,e){void 0===e&&(e=!1),o&&console.log("draw_value_line1",t),(F=document.createElementNS(a,"text")).setAttributeNS(null,"x",""+s),F.setAttributeNS(null,"y",""+v.value_position),F.setAttribute("text-anchor","middle"),F.setAttribute("cursor","default"),F.setAttribute("font-family",v.font_family),F.setAttribute("font-size",""+et(t,e)),F.setAttribute("font-weight",""+v.font_weight),F.setAttribute("fill",v.font_color),F.setAttribute("class",v.class_value),F.textContent=t,n.appendChild(F)}function nt(t){o&&console.log("draw_value_line2",t),(L=document.createElementNS(a,"text")).setAttributeNS(null,"x",""+s),L.setAttributeNS(null,"y",""+(v.value_position+4)),L.setAttribute("text-anchor","middle"),L.setAttribute("cursor","default"),L.setAttribute("font-family",v.font_family),L.setAttribute("font-size",""+et(t,!0)),L.setAttribute("font-weight",""+v.font_weight),L.setAttribute("fill",v.font_color),L.setAttribute("class",v.class_value),L.textContent=t,n.appendChild(L)}function ot(){o&&console.log("redraw()",v);var t=Z();t?N?(o&&console.log("redraw track already exist, update d"),N.setAttributeNS(null,"d",t)):(o&&console.log("redraw draw_track"),$()):N&&(o&&console.log("redraw track already exist, hide it"),N.setAttributeNS(null,"d","")),P||(P=Y()!==v.default_value)&&N&&N.setAttribute("stroke",""+v.track_color),C&&(t=tt())&&(o&&console.log("redraw cursor"),C.setAttributeNS(null,"d",t),P&&C.setAttribute("stroke",""+v.cursor_color)),F&&(o&&console.log("redraw svg_value_text"),function(){if(o&&console.log("update_value",v.value_text),v.value_text){var t=O();if("number"==typeof t||t.indexOf("\n")<=0)o&&console.log("single line"),F&&(F.setAttributeNS(null,"y",""+v.value_position),F.setAttribute("font-size",""+et(t)),F.textContent=t),L&&(n.removeChild(L),L=null);else{var e=t.split("\n");o&&console.log("two lines",t,e),F&&(F.setAttributeNS(null,"y",""+(v.value_position-12)),F.setAttribute("font-size",""+et(e[0],!0)),F.textContent=e[0]),L?(L.setAttributeNS(null,"y",""+(v.value_position+4)),L.setAttribute("font-size",""+et(e[1],!0)),L.textContent=e[1]):nt(e[1])}}}())}return B(),I(),o&&console.log("draw()",v),o&&console.log("draw_background()",v.bg),v.bg&&((M=document.createElementNS(a,"circle")).setAttributeNS(null,"cx",""+u),M.setAttributeNS(null,"cy",""+c),M.setAttributeNS(null,"r",""+v.bg_radius),M.setAttribute("fill",""+v.bg_color),M.setAttribute("stroke",""+v.bg_border_color),M.setAttribute("stroke-width",""+v.bg_border_width),M.setAttribute("class",v.class_bg),n.appendChild(M)),o&&console.log("draw_track_background()",v.track_bg),v.track_bg&&(v.center_zero?((y=document.createElementNS(a,"path")).setAttributeNS(null,"d",W(v.angle_min,w,v.track_bg_radius)),y.setAttribute("stroke",""+v.track_bg_color),y.setAttribute("stroke-width",""+v.track_bg_width),y.setAttribute("stroke-linecap",v.linecap),y.setAttribute("fill","transparent"),y.setAttribute("class",v.class_track_bg),n.appendChild(y),(D=document.createElementNS(a,"path")).setAttributeNS(null,"d",W(x,v.angle_max,v.track_bg_radius)),D.setAttribute("stroke",""+v.track_bg_color),D.setAttribute("stroke-width",""+v.track_bg_width),D.setAttribute("stroke-linecap",v.linecap),D.setAttribute("fill","transparent"),D.setAttribute("class",v.class_track_bg),n.appendChild(D)):((S=document.createElementNS(a,"path")).setAttributeNS(null,"d",W(v.angle_min,v.angle_max,v.track_bg_radius)),S.setAttribute("stroke",""+v.track_bg_color),S.setAttribute("stroke-width",""+v.track_bg_width),S.setAttribute("fill","transparent"),S.setAttribute("stroke-linecap",v.linecap),S.setAttribute("class",v.class_track_bg),n.appendChild(S))),function(){if(o&&console.log("draw_markers()",v.markers),v.markers){for(var t="",e=(v.angle_max-v.angle_min)/v.markers,r=v.angle_min;r<=v.angle_max;r+=e){var l=Q(R(r),v.markers_radius),i=Q(R(r),v.markers_radius+v.markers_length);t+="M "+l.x+","+l.y+" L "+i.x+","+i.y+" "}(z=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),z.setAttribute("stroke",""+v.markers_color),z.setAttribute("stroke-width",""+v.markers_width),z.setAttribute("stroke-linecap",v.linecap),z.setAttribute("class",v.class_markers),n.appendChild(z)}}(),$(),function(){if(o&&console.log("draw_cursor()",v.cursor),v.cursor){var t=tt();t&&((C=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),C.setAttribute("stroke",""+v.cursor_color_init),C.setAttribute("stroke-width",""+v.cursor_width),C.setAttribute("fill","transparent"),C.setAttribute("stroke-linecap",v.linecap),C.setAttribute("class",v.class_cursor),n.appendChild(C))}}(),function(){if(o&&console.log("draw_value",v.value_text),v.value_text){var t=O();if("number"==typeof t||t.indexOf("\n")<=0)o&&console.log("single line"),rt(t);else{var e=t.split("\n");o&&console.log("two lines",e),rt(e[0],!0),nt(e[1])}}}(),o&&console.log("attach attachEventHandlers"),n.addEventListener("mousedown",function(t){!function(t){o&&console.log("startDrag"),t.preventDefault(),f=n.getBoundingClientRect(),A=p=f.width/2,document.addEventListener("mousemove",q,!1),document.addEventListener("mouseup",G,!1),X(t),ot()}(t)}),n.addEventListener("wheel",function(t){!function(t){t.preventDefault();var e=t.deltaY;0!==e&&(k>Math.abs(e)||!k)&&(k=Math.abs(e)),K(Math.min(Math.max(E+e/k*1*v.mouse_wheel_acceleration,v.angle_min),v.angle_max),!0),ot()}(t)}),n.addEventListener("touchstart",function(t){o&&console.log("startTouch"),t.preventDefault(),f=n.getBoundingClientRect(),A=p=f.width/2,document.addEventListener("touchmove",H,{passive:!1}),document.addEventListener("touchend",J)},{passive:!1}),{set value(t){j(t),ot()},set config(t){v=Object.assign({},b,v,t),B(),ot()},setConfigValue:function(t,e){v[t]=e,B(),ot()},initValue:I,enableDebug:function(){o=!0},disableDebug:function(){o=!1}}};
 //# sourceMappingURL=index.js.map
diff --git a/node_modules/svg-knob/dist/index.js.map b/node_modules/svg-knob/dist/index.js.map
index 022a45d..2c5e518 100644
--- a/node_modules/svg-knob/dist/index.js.map
+++ b/node_modules/svg-knob/dist/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sources":["../src/palettes.js","../src/index.js"],"sourcesContent":["\"use strict\";\n\n//TODO: make _init attributes optional\n\nexport default {\n    light : {\n        bg_color: \"#E0E0E0\",\n        bg_border_color: \"#BDBDBD\",\n        track_bg_color: \"#CFD8DC\",\n        track_color_init: \"#64B5F6\",\n        track_color: \"#42A5F5\",\n        cursor_color_init: \"#64B5F6\",\n        cursor_color: \"#42A5F5\",\n        markers_color: \"#9E9E9E\",\n        font_color: \"#424242\",\n    },\n    light2 : {\n        bg_color: \"#B1DAEE\",\n        bg_border_color: \"#569DC0\",\n        track_bg_color: \"#B1DAEE\",\n        track_color_init: \"#569DC0\",\n        track_color: \"#1D6D93\",\n        cursor_color_init: \"#569DC0\",\n        cursor_color: \"#1D6D93\",\n        markers_color: \"#3680A4\",\n        font_color: \"#1D6D93\",\n    },\n    dark: {\n        bg_color: \"#000000\",\n        bg_border_color: \"#569DC0\",\n        track_bg_color: \"#424242\",\n        track_color_init: \"#FDD835\",\n        track_color: \"#FFEC00\",\n        cursor_color_init: \"#569DC0\",\n        cursor_color: \"#FDD835\",\n        markers_color: \"#3680A4\",\n        font_color: \"#FFEA00\",\n    }\n}\n","\n    \"use strict\";\n\n    import palettes from \"./palettes.js\";\n\n    // FIXME: remove console usage for IE compatibility\n\n    /**\n     *\n     * @param elem DIV or SVN element\n     * @param conf optional config\n     * @returns {{value, config}}\n     */\n    export default function(elem, conf = {}) {\n\n        // Like a real knob, it's the knob's position that determines the knob's value.\n        // Therefore, the value is computed from the knob's position (angle).\n        // However, the user has the possibility to directly set the value and in that case\n        // the knob's position (angle) will be computed from the value and the knob redrawn\n        // accordingly.\n\n        //\n        // All angles in method parameters are in [degrees] (except for polarToKnobAngle() and getViewboxCoord()).\n        //\n        // By default:\n        // - knob direction is CLOCKWISE\n        // - start position is 6 o'clock (bottom)\n        // - knob angle is:\n        //       0 [deg] angle is a   6 o'clock (bottom)\n        //      90 [deg] angle is at  9 o'clock (left)\n        //     180 [deg] angle is at 12 o'clock (top)\n        //     270 [deg] angle is at  3 o'clock (right)\n        //\n        // Trigonometric functions (sin, cos, ...) operate in polar coordinates,\n        // with 0 angle at 3 o'clock and a counter-clockwise direction.\n        // To convert from \"knob angle\" to \"polar angle\":\n        //\n        //     knob    polar\n        // --------------------\n        //        0      270\n        //       30      240\n        //       90      180\n        //      180       90\n        //      270        0\n        //      330      -60 (add 360 to get a positive equivalent value: -60 + 360 = 300)\n        //\n        // Formula: polar-angle = 270 - knob-angle\n        //\n\n        if (!elem) {\n            throw \"You must pass a DOM node reference to the Knob constructor\";\n        }\n\n        let trace = false;    // when true, will log more details in the console; use enableDebug(), disableDebug() to change\n\n        // It is faster to access a property than to access a variable...\n        // See https://jsperf.com/vars-vs-props-speed-comparison/1\n\n        const NS = \"http://www.w3.org/2000/svg\";\n        const CW = true;    // clock-wise\n        const CCW = !CW;    // counter clock-wise\n\n        //---------------------------------------------------------------------\n        // To simplify the internal coordinates transformations, we set the view box as a 100 by 100 square.\n        // But, if a label is present, then we add 20 to the height (at the bottom) as a placeholder for the label.\n        // In summary:\n        // - 0,0..99,99: the knob itself\n        // - 0,100..99,119: the label, if any\n        const VIEWBOX_WIDTH = 100;\n        // const VIEWBOX_HEIGHT = config.with_label ? 120 : 100;\n        const HALF_WIDTH = 50;      // viewBox/2\n        const HALF_HEIGHT = 50;     // viewBox/2\n\n        let svg_element;\n\n        if (typeof elem === \"string\" || elem instanceof String) {\n            elem = document.querySelector(elem);\n        }\n\n        if (elem.nodeName.toLowerCase() === \"svg\") {\n            svg_element = elem;\n        } else {\n            svg_element = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n            elem.appendChild(svg_element);\n        }\n\n        // For the user convenience, the label can be set with the \"data-label\" attribute.\n        // If another label is set in data-config then this later definition will override data-label.\n        // let default_label = svg_element.dataset.label !== undefined ? svg_element.dataset.label : \"\";\n        let label = elem.dataset.label !== undefined ? elem.dataset.label : false;\n\n        let defaults = {\n\n            // User configurable properties. The colors are defined in the 'palettes', later on.\n\n            // No camelCase because we want to be able to have the same name in data- attributes.\n\n            label: false,\n\n            rotation: CW,\n\n            default_value: 0,\n            initial_value: 0,\n            value_min: 0.0,\n            value_max: 100.0,\n            value_resolution: 1,        // null means ignore\n\n            // split knob:\n            center_zero: false,\n            center_value: null,         // if null, the value will be computed from the min and max in the init() method\n            center_gap: 4,              // only used when center_zero=true; is the width of the gap between the left and right track around the zero value.\n\n            // position:\n            zero_at: 270.0,             // [deg] (polar) the 0 degree will be at 270 polar degrees (6 o'clock).\n            angle_min: 30.0,            // [deg] Angle in knob coordinates (0 at 6 0'clock)\n            angle_max: 330.0,           // [deg] Angle in knob coordinates (0 at 6 0'clock)\n\n            // background disk:\n            bg_radius: 32,\n            bg_border_width: 1,\n\n            // track background:\n            track_bg_radius: 40,\n            track_bg_width: 8,\n\n            // track:\n            track_radius: 40,\n            track_width: 8,\n\n            // cursor\n            cursor_radius: 18,          // same unit as radius\n            cursor_length: 10,\n            cursor_width: 4,\n\n            // appearance:\n            palette: \"light\",\n            bg: false,\n            track_bg: true,\n            track: true,\n            cursor: false,\n            // CSS class names\n            linecap: \"butt\",                   // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n\n            // text displayed in the middle of the knob:\n            value_text: true,\n            value_position: HALF_HEIGHT + 8,    // empirical value: HALF_HEIGHT + config.font_size / 3\n            font_family: \"sans-serif\",\n            font_size: 25,\n\n            // callback to get the text to display from the current value\n            display_raw: false,                 // if true, format callback is ignored\n            format_raw: v => Math.round(v),\n            format: v => v,                     // formatting of the displayed value\n            // off_text: null,                     // text to display when raw_value = min\n            // out_of_range_text: null,            // text to display when raw_value is out of range\n\n            font_weight: \"bold\",\n            markers: 0,                         // number of markers; 0 or false to disable\n            markers_radius: 40,\n            markers_length: 8,\n            markers_width: 2,\n\n            class_bg: \"knob-bg\",\n            class_track_bg : \"knob-track-bg\",\n            class_track : \"knob-track\",\n            class_value : \"knob-value\",\n            class_cursor : \"knob-cursor\",\n            class_markers: \"knob-markers\",\n\n            snap_to_steps: false,       // TODO\n\n            // mouse wheel support:\n            mouse_wheel_acceleration: 1,\n\n            onchange: null              // callback function\n        };\n\n        //---------------------------------------------------------------------\n        // Consolidate all configs:\n\n        let data_config = JSON.parse(elem.dataset.config || \"{}\");\n        let c = Object.assign({}, defaults, palettes[defaults.palette], conf, data_config);\n        // we re-assign conf and data_config for the case they override some of the palette colors.\n        let config = Object.assign(c, palettes[c.palette], conf, data_config);\n\n        //---------------------------------------------------------------------\n        // Terminates the SVG element setup:\n\n        let viewbox_height;\n        if (config.label || (config.value_position >= (100 - (config.font_size / 2)))) {\n            // make some room for the label or the value that we want to display below the knob\n            viewbox_height = 120;\n        } else {\n            viewbox_height = 100;\n        }\n\n        // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n        svg_element.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n        svg_element.setAttributeNS(null, \"viewBox\", `0 0 ${VIEWBOX_WIDTH} ${viewbox_height}`);\n\n        // Center of arc in knob coordinates and in ViewPort\"s pixels relative to the <svg> ClientBoundingRect.\n        let arcCenterXPixels = 0;\n        let arcCenterYPixels = 0; // equal to arcCenterXPixels because the knob is a circle\n\n        //---------------------------------------------------------------------\n        // Pre-computed values to speed-up operations:\n\n        // At the top of the knob, we leave a gap between the left and right tracks.\n        // These are angles that delimit this gap:\n        let left_track_end_angle = 0;     // angle in [degrees]\n        let right_track_start_angle = 0;  // angle in [degrees]\n\n        //---------------------------------------------------------------------\n        // internals\n\n        let value = 0.0;                    // current knob's value [value_min..value_max]\n        let angle = config.angle_min;       // current knob's angle in [deg] and in knob's coordinate (not polar)\n\n        let distance = 0.0;                 // distance from arc center to mouse position\n        let mouse_wheel_direction = 1;      // dependant of the OS\n\n        //---------------------------------------------------------------------\n        // SVG elements, from back to front:\n        let svg_bg = null;           // background disk:\n        let svg_track_bg = null;            // track background; for non zero-centered knobs\n        let svg_track_bg_left = null;       // track background; for zero-centered knobs\n        let svg_track_bg_right = null;      // track background; for zero-centered knobs\n        let svg_track = null;\n        let svg_cursor = null;\n        let svg_divisions = null;\n        let svg_value_text = null;\n        let svg_value_text2 = null;\n\n        //---------------------------------------------------------------------\n        // mouse support\n        let targetRect;\n        let minDeltaY;\n\n        //---------------------------------------------------------------------\n        // true if the current knob value is different from the default value\n        let has_changed = false;    // to spare some getValue() calls when testing if value has changed from default_value\n\n        //---------------------------------------------------------------------\n        // Create the knob:\n\n        init();\n        initValue();\n        draw();\n        attachEventHandlers();\n\n\n        /**\n         * Having a init function allow the knob to be re-configured.\n         */\n        function init() {\n\n            if (trace) console.log(\"init()\");\n\n            if (config.center_zero) {\n                if (!config.center_value) {\n                    config.center_value = getRoundedValue((config.value_max - config.value_min) / 2 + config.value_min);\n                }\n            }\n\n            // At the top of the knob, we leave a gap between the left and right tracks.\n            // 'left_track_end_angle' and 'right_track_start_angle' are the angles that delimit this gap.\n            // Only used if center_zero=true.\n            if (config.linecap === \"butt\") {\n                left_track_end_angle = polarToKnobAngle(Math.acos(-config.center_gap/100.0) * 180.0 / Math.PI);\n                right_track_start_angle = polarToKnobAngle(Math.acos(config.center_gap/100.0) * 180.0 / Math.PI);\n            } else {\n                left_track_end_angle = polarToKnobAngle(Math.acos(-(config.track_width*1.3 + config.center_gap)/100.0) * 180.0 / Math.PI);\n                right_track_start_angle = polarToKnobAngle(Math.acos((config.track_width*1.3 + config.center_gap)/100.0) * 180.0 / Math.PI);\n            }\n\n            // mouse_wheel_direction = _isMacOS() ? -1 : 1; //TODO: really necessary?\n        }\n\n        function initValue() {\n            // set initial value and angle:\n            setValue(config.initial_value ? config.initial_value : config.default_value);\n        }\n\n        /**\n         * Return the value \"rounded\" according to config.value_resolution\n         * @param v value\n         */\n        function getRoundedValue(v) {\n            return config.value_resolution === null ? v : Math.round(v / config.value_resolution) * config.value_resolution;\n        }\n\n        /**\n         *\n         * @param angle [deg] in knob's coordinates\n         * @returns {*}\n         */\n        function getDisplayValue(angle) {\n            if (trace) console.log(\"getDisplayValue\", config.display_raw);\n            let v = getValue(angle);\n            return config.display_raw ? config.format_raw(v) : config.format(v);\n        }\n\n        /**\n         * Trick to adjust the cursor position when the range is odd.\n         */\n        function getCursorCorrection() {\n            let isOdd = n => Math.abs(n % 2) === 1;\n            return isOdd(Math.abs(config.value_max - config.value_min)) ? 0.5 : 0;\n        }\n\n        /**\n         * Get the knob's value determined by the knob's position (angle)\n         * @param a [deg] in knob's coordinates\n         * @returns {number}\n         */\n        function getValue(a) {\n            let p = a === undefined ? angle : a;\n            let v = ((p - config.angle_min) / (config.angle_max - config.angle_min)) * (config.value_max - config.value_min) + config.value_min;\n            return getRoundedValue(v - getCursorCorrection());\n        }\n\n        /**\n         * Set knob's value\n         * @param v\n         */\n        function setValue(v) {\n            if (v < config.value_min) {\n                value = config.value_min;\n            } else if (v > config.value_max) {\n                value = config.value_max;\n            } else {\n                value = v;\n            }\n            setAngle(((v + getCursorCorrection() - config.value_min) / (config.value_max - config.value_min)) * (config.angle_max - config.angle_min) + config.angle_min);\n            if (trace) console.log(`setValue(${v}) angle=` + ((v - config.value_min) / (config.value_max - config.value_min)) * (config.angle_max - config.angle_min) + config.angle_min);\n            return true;\n        }\n\n        /**\n         * Set knob's angle\n         * @param new_angle in [deg]\n         * @param fire_event\n         */\n        function setAngle(new_angle, fire_event) {\n            let prev = angle;\n            let notify = fire_event && (new_angle !== angle);\n            angle = Math.min(Math.max(new_angle, config.angle_min), config.angle_max);\n            if (notify) {\n                // fire the event if the change of angle affect the value:\n                if (getValue(prev) !== getValue()) {\n                    notifyChange();\n                }\n            }\n        }\n\n        /**\n         * Increment (or decrement if the increment is negative) the knob's angle.\n         * @param increment\n         */\n        function incAngle(increment) {\n            setAngle(Math.min(Math.max(angle + increment, config.angle_min), config.angle_max), true);\n        }\n\n        /**\n         * Return polar coordinates angle from our \"knob coordinates\" angle\n         */\n        function knobToPolarAngle(angle) {\n            let a = config.zero_at - angle;\n            if (a < 0) a = a + 360.0;\n            if (trace) console.log(`knobToPolarAngle ${angle} -> ${a}`);\n            return a;\n        }\n\n        /**\n         *\n         * @param angle [deg] with 0 at 3 o'clock\n         * @returns {number}\n         */\n        function polarToKnobAngle(angle) {\n            // \"-\" for changing CCW to CW\n            if (trace) console.log(`polarToKnobAngle ${angle} -> ${(config.zero_at - angle + 360.0) % 360.0}`);\n            return (config.zero_at - angle + 360.0) % 360.0;    // we add 360 to handle negative values down to -360\n        }\n\n        /**\n         * startDrag() must have been called before to init the targetRect variable.\n         */\n        function mouseUpdate(e) {\n\n            // MouseEvent.clientX (standard property: YES)\n            // The clientX read-only property of the MouseEvent interface provides\n            // the horizontal coordinate within the application's client area at which\n            // the event occurred (as opposed to the coordinates within the page).\n            // For example, clicking in the top-left corner of the client area will always\n            // result in a mouse event with a clientX value of 0, regardless of whether\n            // the page is scrolled horizontally. Originally, this property was defined\n            // as a long integer. The CSSOM View Module redefined it as a double float.\n\n            let dxPixels = e.clientX - targetRect.left;\n            let dyPixels = e.clientY - targetRect.top;\n\n            // mouse delta in cartesian coordinate with path center=0,0 and scaled (-1..0..1) relative to path:\n            // <svg> center:       (dx, dy) == ( 0,  0)\n            // <svg> top-left:     (dx, dy) == (-1,  1)\n            // <svg> bottom-right: (dx, dy) == ( 1, -1) (bottom right of the 100x100 viewBox, ignoring the bottom 100x20 for the label)\n            let dx = (dxPixels - arcCenterXPixels) / (targetRect.width / 2);\n            let dy = - (dyPixels - arcCenterYPixels) / (targetRect.width / 2);  // targetRect.width car on a 20px de plus en hauteur pour le label\n\n            if (config.rotation === CCW) dx = - dx;\n\n            // convert to polar coordinates\n            let angle_rad = Math.atan2(dy, dx);\n            if (angle_rad < 0) angle_rad = 2.0*Math.PI + angle_rad;\n\n            if (trace) console.log(`mouseUpdate: position in svg = ${dxPixels}, ${dyPixels} pixels; ${dx.toFixed(3)}, ${dy.toFixed(3)} rel.; angle ${angle_rad.toFixed(3)} rad`);\n\n            setAngle(polarToKnobAngle(angle_rad * 180.0 / Math.PI), true);\n\n            // distance from arc center to mouse position:\n            // distance = Math.sqrt(dx*(HALF_WIDTH/config.track_radius)*dx*(HALF_WIDTH/config.track_radius) + dy*(HALF_HEIGHT/config.track_radius)*dy*(HALF_HEIGHT/config.track_radius));\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function startDrag(e) {\n\n            if (trace) console.log(\"startDrag\");\n\n            e.preventDefault();\n\n            // API: Event.currentTarget\n            //      Identifies the current target for the event, as the event traverses the DOM. It always REFERS TO THE ELEMENT\n            //      TO WHICH THE EVENT HANDLER HAS BEEN ATTACHED, as opposed to event.target which identifies the element on\n            //      which the event occurred.\n            //      https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n\n            // currentTarget = e.currentTarget;\n\n            // API: Element.getBoundingClientRect() (standard: YES)\n            //      The Element.getBoundingClientRect() method returns the size of an element\n            //      and its POSITION RELATIVE TO THE VIEWPORT.\n            //      The amount of scrolling that has been done of the viewport area (or any other\n            //      scrollable element) is taken into account when computing the bounding rectangle.\n            //      This means that the rectangle's boundary edges (top, left, bottom, and right)\n            //      change their values every time the scrolling position changes (because their\n            //      values are relative to the viewport and not absolute).\n            //      https://developer.mozilla.org/en/docs/Web/API/Element/getBoundingClientRect\n\n            // targetRect = currentTarget.getBoundingClientRect(); // currentTarget must be the <svg...> object\n            targetRect = svg_element.getBoundingClientRect();\n\n            // Note: we must take the boundingClientRect of the <svg> and not the <path> because the <path> bounding rect\n            //       is not constant because it encloses the current arc.\n\n            // By design, the arc center is at equal distance from top and left.\n            arcCenterXPixels = targetRect.width / 2;\n            //noinspection JSSuspiciousNameCombination\n            arcCenterYPixels = arcCenterXPixels;\n\n            document.addEventListener(\"mousemove\", handleDrag, false);\n            document.addEventListener(\"mouseup\", endDrag, false);\n\n            mouseUpdate(e);\n            redraw();\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function handleDrag(e) {\n            e.preventDefault();\n            mouseUpdate(e);\n            redraw();\n        }\n\n        /**\n         *\n         */\n        function endDrag() {\n            if (trace) console.log(\"endDrag\");\n            document.removeEventListener(\"mousemove\", handleDrag, false);\n            document.removeEventListener(\"mouseup\", endDrag, false);\n        }\n\n        /**\n         *\n         * @param e\n         * @returns {boolean}\n         */\n        function mouseWheelHandler(e) {\n\n            // WheelEvent\n            // This is the standard wheel event interface to use. Old versions of browsers implemented the two non-standard\n            // and non-cross-browser-compatible MouseWheelEvent and MouseScrollEvent interfaces. Use this interface and avoid\n            // the latter two.\n            // The WheelEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.\n\n            // https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\n            // https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js\n\n            e.preventDefault();\n\n            let dy = e.deltaY;\n\n            if (dy !== 0) {\n                // normalize Y delta\n                if (minDeltaY > Math.abs(dy) || !minDeltaY) {\n                    minDeltaY = Math.abs(dy);\n                }\n            }\n\n            incAngle(dy / minDeltaY * mouse_wheel_direction * config.mouse_wheel_acceleration);\n\n            // TODO: mouse speed detection (https://stackoverflow.com/questions/22593286/detect-measure-scroll-speed)\n\n            redraw();\n\n            return false;\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function startTouch(e) {\n\n            if (trace) console.log(\"startTouch\");\n\n            e.preventDefault(); // necessary to avoid moving all the page\n\n            targetRect = svg_element.getBoundingClientRect();\n\n            // By design, the arc center is at equal distance from top and left.\n            arcCenterXPixels = targetRect.width / 2;\n            //noinspection JSSuspiciousNameCombination\n            arcCenterYPixels = arcCenterXPixels;\n\n            document.addEventListener(\"touchmove\", handleTouch, {passive: false});\n            document.addEventListener(\"touchend\", endTouch);\n\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function handleTouch(e) {\n\n            if (trace) console.log(\"handleTouch\", e.touches);\n\n            e.preventDefault();\n\n            let touchesIndex = e.touches.length - 1;\n\n            let dxPixels = e.touches[touchesIndex].clientX - targetRect.left;\n            let dyPixels = e.touches[touchesIndex].clientY - targetRect.top;\n\n            let dx = (dxPixels - arcCenterXPixels) / (targetRect.width / 2);\n            let dy = - (dyPixels - arcCenterYPixels) / (targetRect.width / 2);  // targetRect.width car on a 20px de plus en hauteur pour le label\n\n            if (config.rotation === CCW) dx = - dx;\n\n            // convert to polar coordinates\n            let angle_rad = Math.atan2(dy, dx);\n            if (angle_rad < 0) angle_rad = 2.0*Math.PI + angle_rad;\n\n            if (trace) console.log(`handleTouch: position in svg = ${dxPixels}, ${dyPixels} pixels; ${dx.toFixed(3)}, ${dy.toFixed(3)} rel.; angle ${angle_rad.toFixed(3)} rad`);\n\n            setAngle(polarToKnobAngle(angle_rad * 180.0 / Math.PI), true);\n\n            redraw();\n\n        }\n\n        /**\n         *\n         */\n        function endTouch() {\n            if (trace) console.log(\"endTouch\");\n            document.removeEventListener(\"touchmove\", handleTouch);\n            document.removeEventListener(\"touchend\", endTouch);\n        }\n\n        /**\n         *\n         */\n        function attachEventHandlers() {\n            if (trace) console.log(\"attach attachEventHandlers\");\n            svg_element.addEventListener(\"mousedown\", function(e) {\n                startDrag(e);\n            });\n            svg_element.addEventListener(\"wheel\", function(e) {\n                mouseWheelHandler(e);\n            });\n            svg_element.addEventListener(\"touchstart\", startTouch, {passive: false});\n        }\n\n        /**\n         *\n         */\n        function notifyChange() {\n            if (trace) console.log(\"knob value has changed\");\n            let value = getValue();     // TODO: cache the value\n            let event = new CustomEvent(\"change\", {\"detail\": value});\n            //svg_element.dispatchEvent(event);\n            elem.dispatchEvent(event);\n            if (config.onchange) {\n                config.onchange(value);\n            }\n        }\n\n        /**\n         * Utility function to configure the mousewheel direction.\n         * @returns {*}\n         * @private\n         */\n        function _isMacOS() {\n            return [\"Macintosh\", \"MacIntel\", \"MacPPC\", \"Mac68K\"].indexOf(window.navigator.platform) !== -1;\n        }\n\n        /**\n         * Return viewBox X,Y coordinates\n         * @param angle in [degree] (polar, 0 at 3 o'clock)\n         * @param radius; defaults to config.radius\n         * @returns {{x: number, y: number}}\n         */\n        function getViewboxCoord(angle, radius) {\n            let a = angle * Math.PI / 180.0;\n            let r = radius === undefined ? config.track_radius : radius;\n            let x = Math.cos(a) * r;\n            let y = Math.sin(a) * r;\n            return {\n                x: config.rotation === CW ? (HALF_WIDTH + x) : (HALF_WIDTH - x),\n                y: HALF_HEIGHT - y\n            }\n        }\n\n        /**\n         *\n         * @param from_angle in [degree] in knob's coordinates\n         * @param to_angle in [degree] in knob's coordinates\n         * @param radius\n         */\n        function getArc(from_angle, to_angle, radius) {\n\n            if (trace) console.group(`getArc(${from_angle}, ${to_angle}, ${radius})`);\n\n            // SVG d: \"A rx,ry xAxisRotate LargeArcFlag,SweepFlag x,y\".\n            // SweepFlag is either 0 or 1, and determines if the arc should be swept in a clockwise (1), or anti-clockwise (0) direction\n            // ref: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d\n\n            let a0 = knobToPolarAngle(from_angle);\n            let a1 = knobToPolarAngle(to_angle);\n\n            // little trick to force a full arc (360deg) when from=0 and to=360\n            if (from_angle !== to_angle) {\n                // with this we make sure that x1 will be different than x0 within the path definition\n                a0 -= 0.0001;\n                a1 += 0.0001;\n            }\n\n            let {x: x0, y: y0} = getViewboxCoord(a0, radius);\n            let {x: x1, y: y1} = getViewboxCoord(a1, radius);\n\n            let delta_angle = (a0 - a1 + 360.0) % 360.0;\n\n            let large_arc = delta_angle < 180.0 ? 0 : 1;\n            let arc_direction = config.rotation === CW ? 1 : 0;\n\n            let p = `M ${x0},${y0} A ${radius},${radius} 0 ${large_arc},${arc_direction} ${x1},${y1}`;\n\n            if (trace) console.groupEnd();\n            if (trace) console.log(\"arc: \" + p);\n\n            return p;\n        }\n\n        /**\n         *\n         * @returns {*}\n         */\n        function getTrackPath() {\n\n            if (trace) console.log(\"getTrackPath()\");\n\n            let p = null;\n\n            if (config.center_zero) {\n\n                if (Array.isArray(config.center_value)) {\n                    // let v = getValue();\n                    // console.log('center value is an array; getValue=', getValue(), typeof v);\n                    if (config.center_value.includes(getValue())) {\n                        if (trace) console.log(\"getTrackPath: center position, track not drawn\");\n                        // track is not drawn when the value is at center\n                        return p;\n                    }\n                } else {\n                    if (getValue() === config.center_value) {\n                        if (trace) console.log(\"getTrackPath: center position, track not drawn\");\n                        // track is not drawn when the value is at center\n                        return p;\n                    }\n                }\n\n                // we assume the split is at 180 [deg] (knob\"s angle)\n                if (angle < 180) {\n                    p = getArc(Math.min(angle, left_track_end_angle), left_track_end_angle, config.track_radius);\n                } else if (angle > 180) {\n                    p = getArc(right_track_start_angle, Math.max(angle, right_track_start_angle), config.track_radius);\n                }\n\n            } else {\n                p = getArc(config.angle_min, angle, config.track_radius);\n            }\n\n            return p;\n        }\n\n        /**\n         *\n         */\n        function draw_background() {\n\n            if (trace) console.log(\"draw_background()\", config.bg);\n\n            if (!config.bg) return;\n\n            // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n\n            //\n            // back disk:\n            //\n            svg_bg = document.createElementNS(NS, \"circle\");\n            svg_bg.setAttributeNS(null, \"cx\", `${HALF_WIDTH}`);\n            svg_bg.setAttributeNS(null, \"cy\", `${HALF_HEIGHT}`);\n            svg_bg.setAttributeNS(null, \"r\", `${config.bg_radius}`);\n            svg_bg.setAttribute(\"fill\", `${config.bg_color}`);\n            svg_bg.setAttribute(\"stroke\", `${config.bg_border_color}`);\n            svg_bg.setAttribute(\"stroke-width\", `${config.bg_border_width}`);\n            svg_bg.setAttribute(\"class\", config.class_bg);\n            svg_element.appendChild(svg_bg);\n        }\n\n        /**\n         *\n         */\n        function draw_markers() {\n\n            if (trace) console.log(\"draw_markers()\", config.markers);\n\n            if (!config.markers) return;\n\n            let p = \"\";\n            let step = (config.angle_max - config.angle_min) / config.markers;\n            for (let a = config.angle_min; a <= config.angle_max; a += step) {\n                let from = getViewboxCoord(knobToPolarAngle(a), config.markers_radius);    // getViewboxCoord(angle, radius)\n                let to = getViewboxCoord(knobToPolarAngle(a), config.markers_radius + config.markers_length);\n                p += `M ${from.x},${from.y} L ${to.x},${to.y} `;\n            }\n\n            svg_divisions = document.createElementNS(NS, \"path\");\n            svg_divisions.setAttributeNS(null, \"d\", p);\n            svg_divisions.setAttribute(\"stroke\", `${config.markers_color}`);\n            svg_divisions.setAttribute(\"stroke-width\", `${config.markers_width}`);\n            svg_divisions.setAttribute(\"stroke-linecap\", config.linecap);\n            svg_divisions.setAttribute(\"class\", config.class_markers);\n            svg_element.appendChild(svg_divisions);\n        }\n\n/*\n        function draw_units() {\n            let pos = getViewboxCoord(angle_min_polar, config.divisions_radius);    // getViewboxCoord(angle, radius)\n            svg_value_text = document.createElementNS(NS, \"text\");\n            svg_value_text.setAttributeNS(null, \"x\", `${pos.x}`);\n            svg_value_text.setAttributeNS(null, \"y\", `${pos.y}`);\n            // svg_value_text.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text.setAttribute(\"cursor\", \"default\");\n            svg_value_text.setAttribute(\"font-family\", config.font_family);\n            svg_value_text.setAttribute(\"font-size\", `10`);\n            // svg_value_text.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text.setAttribute(\"fill\", config.font_color);\n            // svg_value_text.setAttribute(\"class\", config.class_value);\n            // svg_value_text.textContent = getDisplayValue();\n            svg_value_text.textContent = config.value_min.toString();\n            svg_element.appendChild(svg_value_text);\n        }\n*/\n\n        /**\n         *\n         */\n        function draw_track_background() {\n\n            if (trace) console.log(\"draw_track_background()\", config.track_bg);\n\n            // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n\n            if (!config.track_bg) return;\n\n            //\n            // track background:\n            //\n            if (config.center_zero) {\n\n                // left track background\n                svg_track_bg_left = document.createElementNS(NS, \"path\");\n                svg_track_bg_left.setAttributeNS(null, \"d\", getArc(config.angle_min, left_track_end_angle, config.track_bg_radius));\n                svg_track_bg_left.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg_left.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg_left.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg_left.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg_left.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg_left);\n\n                // right track background\n                svg_track_bg_right = document.createElementNS(NS, \"path\");\n                svg_track_bg_right.setAttributeNS(null, \"d\", getArc(right_track_start_angle, config.angle_max, config.track_bg_radius));\n                svg_track_bg_right.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg_right.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg_right.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg_right.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg_right.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg_right);\n\n            } else {\n\n                svg_track_bg = document.createElementNS(NS, \"path\");\n                svg_track_bg.setAttributeNS(null, \"d\", getArc(config.angle_min, config.angle_max, config.track_bg_radius));\n                svg_track_bg.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg);\n\n            }\n        }\n\n        /**\n         *\n         */\n        function draw_track() {\n\n            if (trace) console.log(\"draw_track()\", config.track);\n\n            if (!config.track) return;\n            let p = getTrackPath();\n            if (p) {\n                svg_track = document.createElementNS(NS, \"path\");\n                svg_track.setAttributeNS(null, \"d\", p);\n                svg_track.setAttribute(\"stroke\", `${config.track_color_init}`);\n                svg_track.setAttribute(\"stroke-width\", `${config.track_width}`);\n                svg_track.setAttribute(\"fill\", \"transparent\");\n                svg_track.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track.setAttribute(\"class\", config.class_track);\n                svg_element.appendChild(svg_track);\n            }\n        }\n\n        /**\n         *\n         * @returns {string}\n         */\n        function getTrackCursor() {\n            let a = knobToPolarAngle(angle);\n            let from = getViewboxCoord(a, config.cursor_radius);\n            let to = getViewboxCoord(a, config.cursor_radius + config.cursor_length);\n            return `M ${from.x},${from.y} L ${to.x},${to.y}`;\n        }\n\n        /**\n         *\n         */\n        function draw_cursor() {\n\n            if (trace) console.log(\"draw_cursor()\", config.cursor);\n\n            if (!config.cursor) return;\n\n            let p = getTrackCursor();\n            if (p) {\n                svg_cursor = document.createElementNS(NS, \"path\");\n                svg_cursor.setAttributeNS(null, \"d\", p);\n                svg_cursor.setAttribute(\"stroke\", `${config.cursor_color_init}`);\n                svg_cursor.setAttribute(\"stroke-width\", `${config.cursor_width}`);\n                svg_cursor.setAttribute(\"fill\", \"transparent\");\n                svg_cursor.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_cursor.setAttribute(\"class\", config.class_cursor);\n                svg_element.appendChild(svg_cursor);\n            }\n        }\n\n        function getFontSize(text, multiline=false) {\n            if (typeof text !== \"string\") return config.font_size;\n            const f = 22;   // empiric value\n            let m = Math.min(f, text.length);\n            if (multiline) {\n                return config.font_size * Math.min(0.75, Math.max(((f - m) / f), 0.25));\n            } else {\n                return config.font_size * Math.max(((f - m) / f), 0.25);\n            }\n\n        }\n\n        function draw_value_line1(text, multiline=false) {\n            if (trace) console.log(\"draw_value_line1\", text);\n            svg_value_text = document.createElementNS(NS, \"text\");\n            svg_value_text.setAttributeNS(null, \"x\", `${HALF_WIDTH}`);\n            svg_value_text.setAttributeNS(null, \"y\", `${config.value_position}`);\n            svg_value_text.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text.setAttribute(\"cursor\", \"default\");\n            svg_value_text.setAttribute(\"font-family\", config.font_family);\n            svg_value_text.setAttribute(\"font-size\", `${getFontSize(text, multiline)}`);\n            svg_value_text.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text.setAttribute(\"fill\", config.font_color);\n            svg_value_text.setAttribute(\"class\", config.class_value);\n            svg_value_text.textContent = text;\n            svg_element.appendChild(svg_value_text);\n        }\n\n        function draw_value_line2(text) {\n            if (trace) console.log(\"draw_value_line2\", text);\n            svg_value_text2 = document.createElementNS(NS, \"text\");\n            svg_value_text2.setAttributeNS(null, \"x\", `${HALF_WIDTH}`);\n            svg_value_text2.setAttributeNS(null, \"y\", `${config.value_position + 4}`);\n            svg_value_text2.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text2.setAttribute(\"cursor\", \"default\");\n            svg_value_text2.setAttribute(\"font-family\", config.font_family);\n            svg_value_text2.setAttribute(\"font-size\", `${getFontSize(text, true)}`);\n            svg_value_text2.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text2.setAttribute(\"fill\", config.font_color);\n            svg_value_text2.setAttribute(\"class\", config.class_value);\n            svg_value_text2.textContent = text;\n            svg_element.appendChild(svg_value_text2);\n\n        }\n\n        /**\n         *\n         */\n        function draw_value() {\n\n            if (trace) console.log(\"draw_value\", config.value_text);\n\n            if (!config.value_text) return;\n\n            const t = getDisplayValue();\n\n            if (typeof t === \"number\" || t.indexOf(\"\\n\") <= 0) {\n\n                if (trace) console.log(\"single line\");\n                draw_value_line1(t)\n\n            } else {\n                const lines = t.split(\"\\n\");\n                if (trace) console.log(\"two lines\", lines);\n\n                draw_value_line1(lines[0], true);\n                draw_value_line2(lines[1]);\n            }\n\n        }\n\n        function update_value() {\n\n            if (trace) console.log(\"update_value\", config.value_text);\n\n            if (!config.value_text) return;\n\n            const t = getDisplayValue();\n\n            if (typeof t === \"number\" || t.indexOf(\"\\n\") <= 0) {\n                // single line:\n\n                if (trace) console.log(\"single line\");\n\n                if (svg_value_text) {\n                    svg_value_text.setAttributeNS(null, \"y\", `${config.value_position}`);\n                    svg_value_text.setAttribute(\"font-size\", `${getFontSize(t)}`);\n                    svg_value_text.textContent = t;\n                }\n\n                if (svg_value_text2) {\n                    svg_element.removeChild(svg_value_text2);\n                    svg_value_text2 = null;\n                }\n\n            } else {\n                // two lines:\n\n                const lines = t.split(\"\\n\");\n                if (trace) console.log(\"two lines\", t, lines);\n\n                if (svg_value_text) {\n                    svg_value_text.setAttributeNS(null, \"y\", `${config.value_position - 12}`);\n                    svg_value_text.setAttribute(\"font-size\", `${getFontSize(lines[0], true)}`);\n                    svg_value_text.textContent = lines[0];\n                }\n\n                if (svg_value_text2) {\n                    svg_value_text2.setAttributeNS(null, \"y\", `${config.value_position + 4}`);\n                    svg_value_text2.setAttribute(\"font-size\", `${getFontSize(lines[1], true)}`);\n                    svg_value_text2.textContent = lines[1];\n                } else {\n                    draw_value_line2(lines[1]);\n                }\n            }\n\n        }\n\n        /**\n         *\n         */\n        function draw() {\n\n            if (trace) console.log(\"draw()\", config);\n\n            draw_background();\n            draw_track_background();\n            draw_markers();\n            // draw_units();\n            draw_track();\n            draw_cursor();\n            draw_value();\n        }\n\n        /**\n         *\n         */\n        function redraw() {\n\n            if (trace) console.log(\"redraw()\", config);\n\n            let p = getTrackPath();\n            if (p) {\n                if (svg_track) {\n                    if (trace) console.log(\"redraw track already exist, update d\");\n                    svg_track.setAttributeNS(null, \"d\", p);\n                } else {\n                    if (trace) console.log(\"redraw draw_track\");\n                    draw_track();\n                }\n            } else {\n                if (svg_track) {\n                    if (trace) console.log(\"redraw track already exist, hide it\");\n                    svg_track.setAttributeNS(null, \"d\", \"\");    // we hide the track\n                }\n            }\n\n            if (!has_changed) {\n                has_changed = getValue() !== config.default_value;\n                if (has_changed) {\n                    if (svg_track) {\n                        svg_track.setAttribute(\"stroke\", `${config.track_color}`);\n                    }\n                }\n            }\n\n            if (svg_cursor) {\n                p = getTrackCursor();\n                if (p) {\n                    if (trace) console.log(\"redraw cursor\");\n                    svg_cursor.setAttributeNS(null, \"d\", p);\n                    if (has_changed) {\n                        svg_cursor.setAttribute(\"stroke\", `${config.cursor_color}`);\n                    }\n                }\n            }\n\n            if (svg_value_text) {\n                if (trace) console.log(\"redraw svg_value_text\");\n                // svg_value_text.textContent = getDisplayValue();\n                update_value();\n            }\n        }\n\n        /**\n         *\n         */\n        return {\n            set value(v) {\n                // console.group(\"value setter\");\n                setValue(v);\n                redraw();\n                // console.groupEnd();\n            },\n            set config(new_config) {\n                // console.group(\"config setter\");\n                config = Object.assign({}, defaults, config, new_config);\n                init();\n                redraw();\n                // console.groupEnd();\n            },\n            setConfigValue: function(attribute, value) {\n                // console.group(\"setConfigValue\");\n                config[attribute] = value;\n                init();\n                redraw();\n                // console.groupEnd();\n            },\n            initValue,\n            enableDebug: function() {\n                trace = true;\n            },\n            disableDebug: function() {\n                trace = false;\n            }\n        };\n\n    }\n"],"names":["light","bg_color","bg_border_color","track_bg_color","track_color_init","track_color","cursor_color_init","cursor_color","markers_color","font_color","light2","dark","elem","conf","svg_element","trace","NS","CW","CCW","HALF_WIDTH","HALF_HEIGHT","String","document","querySelector","nodeName","toLowerCase","createElementNS","appendChild","viewbox_height","defaults","label","rotation","default_value","initial_value","value_min","value_max","value_resolution","center_zero","center_value","center_gap","zero_at","angle_min","angle_max","bg_radius","bg_border_width","track_bg_radius","track_bg_width","track_radius","track_width","cursor_radius","cursor_length","cursor_width","palette","bg","track_bg","track","cursor","linecap","value_text","value_position","font_family","font_size","display_raw","format_raw","v","Math","round","format","font_weight","markers","markers_radius","markers_length","markers_width","class_bg","class_track_bg","class_track","class_value","class_cursor","class_markers","snap_to_steps","mouse_wheel_acceleration","onchange","data_config","JSON","parse","dataset","config","c","Object","assign","palettes","setAttributeNS","targetRect","minDeltaY","arcCenterXPixels","arcCenterYPixels","left_track_end_angle","right_track_start_angle","angle","svg_bg","svg_track_bg","svg_track_bg_left","svg_track_bg_right","svg_track","svg_cursor","svg_divisions","svg_value_text","svg_value_text2","has_changed","init","console","log","getRoundedValue","polarToKnobAngle","acos","PI","initValue","setValue","getDisplayValue","getValue","getCursorCorrection","n","abs","a","undefined","setAngle","new_angle","fire_event","prev","notify","min","max","value","event","CustomEvent","dispatchEvent","notifyChange","knobToPolarAngle","mouseUpdate","e","dxPixels","clientX","left","dyPixels","clientY","top","dx","width","dy","angle_rad","atan2","toFixed","handleDrag","preventDefault","redraw","endDrag","removeEventListener","handleTouch","touches","touchesIndex","length","endTouch","getViewboxCoord","radius","r","x","cos","y","sin","getArc","from_angle","to_angle","group","a0","a1","p","x0","y0","groupEnd","getTrackPath","Array","isArray","includes","draw_track","setAttribute","getTrackCursor","from","to","getFontSize","text","multiline","m","draw_value_line1","textContent","draw_value_line2","t","indexOf","removeChild","lines","split","update_value","step","draw_markers","draw_cursor","draw_value","addEventListener","getBoundingClientRect","startDrag","deltaY","mouseWheelHandler","passive","new_config","setConfigValue","attribute","enableDebug","disableDebug"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.js","sources":["../src/palettes.js","../src/index.js"],"sourcesContent":["\"use strict\";\n\n//TODO: make _init attributes optional\n\nexport default {\n    light : {\n        bg_color: \"#E0E0E0\",\n        bg_border_color: \"#BDBDBD\",\n        track_bg_color: \"#CFD8DC\",\n        track_color_init: \"#64B5F6\",\n        track_color: \"#42A5F5\",\n        cursor_color_init: \"#64B5F6\",\n        cursor_color: \"#42A5F5\",\n        markers_color: \"#9E9E9E\",\n        font_color: \"#424242\",\n    },\n    light2 : {\n        bg_color: \"#B1DAEE\",\n        bg_border_color: \"#569DC0\",\n        track_bg_color: \"#B1DAEE\",\n        track_color_init: \"#569DC0\",\n        track_color: \"#1D6D93\",\n        cursor_color_init: \"#569DC0\",\n        cursor_color: \"#1D6D93\",\n        markers_color: \"#3680A4\",\n        font_color: \"#1D6D93\",\n    },\n    dark: {\n        bg_color: \"#000000\",\n        bg_border_color: \"#569DC0\",\n        track_bg_color: \"#424242\",\n        track_color_init: \"#FDD835\",\n        track_color: \"#FFEC00\",\n        cursor_color_init: \"#569DC0\",\n        cursor_color: \"#FDD835\",\n        markers_color: \"#3680A4\",\n        font_color: \"#FFEA00\",\n    }\n}\n","\n    \"use strict\";\n\n    import palettes from \"./palettes.js\";\n\n    // FIXME: remove console usage for IE compatibility\n\n    /**\n     *\n     * @param elem DIV or SVN element\n     * @param conf optional config\n     * @returns {{value, config}}\n     */\n    export default function(elem, conf = {}) {\n\n        // Like a real knob, it's the knob's position that determines the knob's value.\n        // Therefore, the value is computed from the knob's position (angle).\n        // However, the user has the possibility to directly set the value and in that case\n        // the knob's position (angle) will be computed from the value and the knob redrawn\n        // accordingly.\n\n        //\n        // All angles in method parameters are in [degrees] (except for polarToKnobAngle() and getViewboxCoord()).\n        //\n        // By default:\n        // - knob direction is CLOCKWISE\n        // - start position is 6 o'clock (bottom)\n        // - knob angle is:\n        //       0 [deg] angle is a   6 o'clock (bottom)\n        //      90 [deg] angle is at  9 o'clock (left)\n        //     180 [deg] angle is at 12 o'clock (top)\n        //     270 [deg] angle is at  3 o'clock (right)\n        //\n        // Trigonometric functions (sin, cos, ...) operate in polar coordinates,\n        // with 0 angle at 3 o'clock and a counter-clockwise direction.\n        // To convert from \"knob angle\" to \"polar angle\":\n        //\n        //     knob    polar\n        // --------------------\n        //        0      270\n        //       30      240\n        //       90      180\n        //      180       90\n        //      270        0\n        //      330      -60 (add 360 to get a positive equivalent value: -60 + 360 = 300)\n        //\n        // Formula: polar-angle = 270 - knob-angle\n        //\n\n        if (!elem) {\n            throw \"You must pass a DOM node reference to the Knob constructor\";\n        }\n\n        let trace = false;    // when true, will log more details in the console; use enableDebug(), disableDebug() to change\n\n        // It is faster to access a property than to access a variable...\n        // See https://jsperf.com/vars-vs-props-speed-comparison/1\n\n        const NS = \"http://www.w3.org/2000/svg\";\n        const CW = true;    // clock-wise\n        const CCW = !CW;    // counter clock-wise\n\n        //---------------------------------------------------------------------\n        // To simplify the internal coordinates transformations, we set the view box as a 100 by 100 square.\n        // But, if a label is present, then we add 20 to the height (at the bottom) as a placeholder for the label.\n        // In summary:\n        // - 0,0..99,99: the knob itself\n        // - 0,100..99,119: the label, if any\n        const VIEWBOX_WIDTH = 100;\n        const VIEWBOX_HEIGHT = config.with_label ? 120 : 100;\n        const HALF_WIDTH = 50;      // viewBox/2\n        const HALF_HEIGHT = 50;     // viewBox/2\n\n        let svg_element;\n\n        let centerX = HALF_WIDTH;\n        let centerY = HALF_HEIGHT;\n\n        let vbWidth = VIEWBOX_WIDTH;\n\n        // need to insert in into SVG element\n        if (typeof elem === \"string\" || elem instanceof String) {\n            elem = document.querySelector(elem);\n        }\n\n        let nodeType = elem.nodeName.toLowerCase();\n\n        if (nodeType === \"g\") {\n            svg_element = elem;\n            let bbox = svg_element.getBBox();\n\n            centerX = bbox.x + bbox.width * 0.5;\n            centerY = bbox.y + bbox.height * 0.5;\n\n            vbWidth = bbox.width;\n        } else if (nodeType === \"div\") {\n            svg_element = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n            elem.appendChild(svg_element);\n        } else {\n            throw \"Unsupported element type for creating knob, should be a div or an SVG g element!\";\n        }\n\n        // For the user convenience, the label can be set with the \"data-label\" attribute.\n        // If another label is set in data-config then this later definition will override data-label.\n        // let default_label = svg_element.dataset.label !== undefined ? svg_element.dataset.label : \"\";\n        let label = elem.dataset.label !== undefined ? elem.dataset.label : false;\n\n        let defaults = {\n\n            // User configurable properties. The colors are defined in the 'palettes', later on.\n\n            // No camelCase because we want to be able to have the same name in data- attributes.\n\n            label: false,\n\n            rotation: CW,\n\n            default_value: 0,\n            initial_value: 0,\n            value_min: 0.0,\n            value_max: 100.0,\n            value_resolution: 1,        // null means ignore\n\n            // split knob:\n            center_zero: false,\n            center_value: null,         // if null, the value will be computed from the min and max in the init() method\n            center_gap: 4,              // only used when center_zero=true; is the width of the gap between the left and right track around the zero value.\n\n            // position:\n            zero_at: 270.0,             // [deg] (polar) the 0 degree will be at 270 polar degrees (6 o'clock).\n            angle_min: 30.0,            // [deg] Angle in knob coordinates (0 at 6 0'clock)\n            angle_max: 330.0,           // [deg] Angle in knob coordinates (0 at 6 0'clock)\n\n            // background disk:\n            bg_radius: 32,\n            bg_border_width: 1,\n\n            // track background:\n            track_bg_radius: 40,\n            track_bg_width: 8,\n\n            // track:\n            track_radius: 40,\n            track_width: 8,\n\n            // cursor\n            cursor_radius: 18,          // same unit as radius\n            cursor_length: 10,\n            cursor_width: 4,\n\n            // appearance:\n            palette: \"light\",\n            bg: false,\n            track_bg: true,\n            track: true,\n            cursor: false,\n            // CSS class names\n            linecap: \"butt\",                   // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n\n            // text displayed in the middle of the knob:\n            value_text: true,\n            value_position: HALF_HEIGHT + 8,    // empirical value: HALF_HEIGHT + config.font_size / 3\n            font_family: \"sans-serif\",\n            font_size: 25,\n\n            // callback to get the text to display from the current value\n            display_raw: false,                 // if true, format callback is ignored\n            format_raw: v => Math.round(v),\n            format: v => v,                     // formatting of the displayed value\n            // off_text: null,                     // text to display when raw_value = min\n            // out_of_range_text: null,            // text to display when raw_value is out of range\n\n            font_weight: \"bold\",\n            markers: 0,                         // number of markers; 0 or false to disable\n            markers_radius: 40,\n            markers_length: 8,\n            markers_width: 2,\n\n            class_bg: \"knob-bg\",\n            class_track_bg : \"knob-track-bg\",\n            class_track : \"knob-track\",\n            class_value : \"knob-value\",\n            class_cursor : \"knob-cursor\",\n            class_markers: \"knob-markers\",\n\n            snap_to_steps: false,       // TODO\n\n            // mouse wheel support:\n            mouse_wheel_acceleration: 1,\n\n            onchange: null              // callback function\n        };\n\n        //---------------------------------------------------------------------\n        // Consolidate all configs:\n\n        let data_config = JSON.parse(elem.dataset.config || \"{}\");\n        let c = Object.assign({}, defaults, palettes[defaults.palette], conf, data_config);\n        // we re-assign conf and data_config for the case they override some of the palette colors.\n        let config = Object.assign(c, palettes[c.palette], conf, data_config);\n\n        //---------------------------------------------------------------------\n        // Terminates the SVG element setup:\n\n        // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n        svg_element.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n\n        if (vbWidth === VIEWBOX_WIDTH) {\n            let viewbox_height;\n            if (config.label || (config.value_position >= (vbWidth - (config.font_size / 2)))) {\n                // make some room for the label or the value that we want to display below the knob\n                viewbox_height = 120;\n            } else {\n                viewbox_height = 100;\n            }\n            svg_element.setAttributeNS(null, \"viewBox\", `0 0 ${VIEWBOX_WIDTH} ${viewbox_height}`);\n        }\n\n        // Center of arc in knob coordinates and in ViewPort\"s pixels relative to the <svg> ClientBoundingRect.\n        let arcCenterXPixels = 0;\n        let arcCenterYPixels = 0; // equal to arcCenterXPixels because the knob is a circle\n\n        //---------------------------------------------------------------------\n        // Pre-computed values to speed-up operations:\n\n        // At the top of the knob, we leave a gap between the left and right tracks.\n        // These are angles that delimit this gap:\n        let left_track_end_angle = 0;     // angle in [degrees]\n        let right_track_start_angle = 0;  // angle in [degrees]\n\n        //---------------------------------------------------------------------\n        // internals\n\n        let value = 0.0;                    // current knob's value [value_min..value_max]\n        let angle = config.angle_min;       // current knob's angle in [deg] and in knob's coordinate (not polar)\n\n        let distance = 0.0;                 // distance from arc center to mouse position\n        let mouse_wheel_direction = 1;      // dependant of the OS\n\n        //---------------------------------------------------------------------\n        // SVG elements, from back to front:\n        let svg_bg = null;           // background disk:\n        let svg_track_bg = null;            // track background; for non zero-centered knobs\n        let svg_track_bg_left = null;       // track background; for zero-centered knobs\n        let svg_track_bg_right = null;      // track background; for zero-centered knobs\n        let svg_track = null;\n        let svg_cursor = null;\n        let svg_divisions = null;\n        let svg_value_text = null;\n        let svg_value_text2 = null;\n\n        //---------------------------------------------------------------------\n        // mouse support\n        let targetRect;\n        let minDeltaY;\n\n        //---------------------------------------------------------------------\n        // true if the current knob value is different from the default value\n        let has_changed = false;    // to spare some getValue() calls when testing if value has changed from default_value\n\n        //---------------------------------------------------------------------\n        // Create the knob:\n\n        init();\n        initValue();\n        draw();\n        attachEventHandlers();\n\n\n        /**\n         * Having a init function allow the knob to be re-configured.\n         */\n        function init() {\n\n            if (trace) console.log(\"init()\");\n\n            if (config.center_zero) {\n                if (!config.center_value) {\n                    config.center_value = getRoundedValue((config.value_max - config.value_min) / 2 + config.value_min);\n                }\n            }\n\n            // At the top of the knob, we leave a gap between the left and right tracks.\n            // 'left_track_end_angle' and 'right_track_start_angle' are the angles that delimit this gap.\n            // Only used if center_zero=true.\n            if (config.linecap === \"butt\") {\n                left_track_end_angle = polarToKnobAngle(Math.acos(-config.center_gap/100.0) * 180.0 / Math.PI);\n                right_track_start_angle = polarToKnobAngle(Math.acos(config.center_gap/100.0) * 180.0 / Math.PI);\n            } else {\n                left_track_end_angle = polarToKnobAngle(Math.acos(-(config.track_width*1.3 + config.center_gap)/100.0) * 180.0 / Math.PI);\n                right_track_start_angle = polarToKnobAngle(Math.acos((config.track_width*1.3 + config.center_gap)/100.0) * 180.0 / Math.PI);\n            }\n\n            // mouse_wheel_direction = _isMacOS() ? -1 : 1; //TODO: really necessary?\n        }\n\n        function initValue() {\n            // set initial value and angle:\n            setValue(config.initial_value ? config.initial_value : config.default_value);\n        }\n\n        /**\n         * Return the value \"rounded\" according to config.value_resolution\n         * @param v value\n         */\n        function getRoundedValue(v) {\n            return config.value_resolution === null ? v : Math.round(v / config.value_resolution) * config.value_resolution;\n        }\n\n        /**\n         *\n         * @param angle [deg] in knob's coordinates\n         * @returns {*}\n         */\n        function getDisplayValue(angle) {\n            if (trace) console.log(\"getDisplayValue\", config.display_raw);\n            let v = getValue(angle);\n            return config.display_raw ? config.format_raw(v) : config.format(v);\n        }\n\n        /**\n         * Trick to adjust the cursor position when the range is odd.\n         */\n        function getCursorCorrection() {\n            let isOdd = n => Math.abs(n % 2) === 1;\n            return isOdd(Math.abs(config.value_max - config.value_min)) ? 0.5 : 0;\n        }\n\n        /**\n         * Get the knob's value determined by the knob's position (angle)\n         * @param a [deg] in knob's coordinates\n         * @returns {number}\n         */\n        function getValue(a) {\n            let p = a === undefined ? angle : a;\n            let v = ((p - config.angle_min) / (config.angle_max - config.angle_min)) * (config.value_max - config.value_min) + config.value_min;\n            return getRoundedValue(v - getCursorCorrection());\n        }\n\n        /**\n         * Set knob's value\n         * @param v\n         */\n        function setValue(v) {\n            if (v < config.value_min) {\n                value = config.value_min;\n            } else if (v > config.value_max) {\n                value = config.value_max;\n            } else {\n                value = v;\n            }\n            setAngle(((v + getCursorCorrection() - config.value_min) / (config.value_max - config.value_min)) * (config.angle_max - config.angle_min) + config.angle_min);\n            if (trace) console.log(`setValue(${v}) angle=` + ((v - config.value_min) / (config.value_max - config.value_min)) * (config.angle_max - config.angle_min) + config.angle_min);\n            return true;\n        }\n\n        /**\n         * Set knob's angle\n         * @param new_angle in [deg]\n         * @param fire_event\n         */\n        function setAngle(new_angle, fire_event) {\n            let prev = angle;\n            let notify = fire_event && (new_angle !== angle);\n            angle = Math.min(Math.max(new_angle, config.angle_min), config.angle_max);\n            if (notify) {\n                // fire the event if the change of angle affect the value:\n                if (getValue(prev) !== getValue()) {\n                    notifyChange();\n                }\n            }\n        }\n\n        /**\n         * Increment (or decrement if the increment is negative) the knob's angle.\n         * @param increment\n         */\n        function incAngle(increment) {\n            setAngle(Math.min(Math.max(angle + increment, config.angle_min), config.angle_max), true);\n        }\n\n        /**\n         * Return polar coordinates angle from our \"knob coordinates\" angle\n         */\n        function knobToPolarAngle(angle) {\n            let a = config.zero_at - angle;\n            if (a < 0) a = a + 360.0;\n            if (trace) console.log(`knobToPolarAngle ${angle} -> ${a}`);\n            return a;\n        }\n\n        /**\n         *\n         * @param angle [deg] with 0 at 3 o'clock\n         * @returns {number}\n         */\n        function polarToKnobAngle(angle) {\n            // \"-\" for changing CCW to CW\n            if (trace) console.log(`polarToKnobAngle ${angle} -> ${(config.zero_at - angle + 360.0) % 360.0}`);\n            return (config.zero_at - angle + 360.0) % 360.0;    // we add 360 to handle negative values down to -360\n        }\n\n        /**\n         * startDrag() must have been called before to init the targetRect variable.\n         */\n        function mouseUpdate(e) {\n\n            // MouseEvent.clientX (standard property: YES)\n            // The clientX read-only property of the MouseEvent interface provides\n            // the horizontal coordinate within the application's client area at which\n            // the event occurred (as opposed to the coordinates within the page).\n            // For example, clicking in the top-left corner of the client area will always\n            // result in a mouse event with a clientX value of 0, regardless of whether\n            // the page is scrolled horizontally. Originally, this property was defined\n            // as a long integer. The CSSOM View Module redefined it as a double float.\n\n            let dxPixels = e.clientX - targetRect.left;\n            let dyPixels = e.clientY - targetRect.top;\n\n            // mouse delta in cartesian coordinate with path center=0,0 and scaled (-1..0..1) relative to path:\n            // <svg> center:       (dx, dy) == ( 0,  0)\n            // <svg> top-left:     (dx, dy) == (-1,  1)\n            // <svg> bottom-right: (dx, dy) == ( 1, -1) (bottom right of the 100x100 viewBox, ignoring the bottom 100x20 for the label)\n            let dx = (dxPixels - arcCenterXPixels) / (targetRect.width / 2 );\n            let dy = - (dyPixels - arcCenterYPixels) / (targetRect.width / 2);  // targetRect.width car on a 20px de plus en hauteur\n            // pour le label\n\n            if (config.rotation === CCW) dx = - dx;\n\n            // convert to polar coordinates\n            let angle_rad = Math.atan2(dy, dx);\n            if (angle_rad < 0) angle_rad = 2.0*Math.PI + angle_rad;\n\n            if (trace) console.log(`mouseUpdate: position in svg = ${dxPixels}, ${dyPixels} pixels; ${dx.toFixed(3)}, ${dy.toFixed(3)} rel.; angle ${angle_rad.toFixed(3)} rad`);\n\n            setAngle(polarToKnobAngle(angle_rad * 180.0 / Math.PI), true);\n\n            // distance from arc center to mouse position:\n            // distance = Math.sqrt(dx*(HALF_WIDTH/config.track_radius)*dx*(HALF_WIDTH/config.track_radius) + dy*(HALF_HEIGHT/config.track_radius)*dy*(HALF_HEIGHT/config.track_radius));\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function startDrag(e) {\n\n            if (trace) console.log(\"startDrag\");\n\n            e.preventDefault();\n\n            // API: Event.currentTarget\n            //      Identifies the current target for the event, as the event traverses the DOM. It always REFERS TO THE ELEMENT\n            //      TO WHICH THE EVENT HANDLER HAS BEEN ATTACHED, as opposed to event.target which identifies the element on\n            //      which the event occurred.\n            //      https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n\n            // currentTarget = e.currentTarget;\n\n            // API: Element.getBoundingClientRect() (standard: YES)\n            //      The Element.getBoundingClientRect() method returns the size of an element\n            //      and its POSITION RELATIVE TO THE VIEWPORT.\n            //      The amount of scrolling that has been done of the viewport area (or any other\n            //      scrollable element) is taken into account when computing the bounding rectangle.\n            //      This means that the rectangle's boundary edges (top, left, bottom, and right)\n            //      change their values every time the scrolling position changes (because their\n            //      values are relative to the viewport and not absolute).\n            //      https://developer.mozilla.org/en/docs/Web/API/Element/getBoundingClientRect\n\n            // targetRect = currentTarget.getBoundingClientRect(); // currentTarget must be the <svg...> object\n            targetRect = svg_element.getBoundingClientRect();\n\n            // Note: we must take the boundingClientRect of the <svg> and not the <path> because the <path> bounding rect\n            //       is not constant because it encloses the current arc.\n\n            // By design, the arc center is at equal distance from top and left.\n            arcCenterXPixels = targetRect.width / 2;\n            //noinspection JSSuspiciousNameCombination\n            arcCenterYPixels = arcCenterXPixels;\n\n            document.addEventListener(\"mousemove\", handleDrag, false);\n            document.addEventListener(\"mouseup\", endDrag, false);\n\n            mouseUpdate(e);\n            redraw();\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function handleDrag(e) {\n            e.preventDefault();\n            mouseUpdate(e);\n            redraw();\n        }\n\n        /**\n         *\n         */\n        function endDrag() {\n            if (trace) console.log(\"endDrag\");\n            document.removeEventListener(\"mousemove\", handleDrag, false);\n            document.removeEventListener(\"mouseup\", endDrag, false);\n        }\n\n        /**\n         *\n         * @param e\n         * @returns {boolean}\n         */\n        function mouseWheelHandler(e) {\n\n            // WheelEvent\n            // This is the standard wheel event interface to use. Old versions of browsers implemented the two non-standard\n            // and non-cross-browser-compatible MouseWheelEvent and MouseScrollEvent interfaces. Use this interface and avoid\n            // the latter two.\n            // The WheelEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.\n\n            // https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\n            // https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js\n\n            e.preventDefault();\n\n            let dy = e.deltaY;\n\n            if (dy !== 0) {\n                // normalize Y delta\n                if (minDeltaY > Math.abs(dy) || !minDeltaY) {\n                    minDeltaY = Math.abs(dy);\n                }\n            }\n\n            incAngle(dy / minDeltaY * mouse_wheel_direction * config.mouse_wheel_acceleration);\n\n            // TODO: mouse speed detection (https://stackoverflow.com/questions/22593286/detect-measure-scroll-speed)\n\n            redraw();\n\n            return false;\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function startTouch(e) {\n\n            if (trace) console.log(\"startTouch\");\n\n            e.preventDefault(); // necessary to avoid moving all the page\n\n            targetRect = svg_element.getBoundingClientRect();\n\n            // By design, the arc center is at equal distance from top and left.\n            arcCenterXPixels = targetRect.width / 2;\n            //noinspection JSSuspiciousNameCombination\n            arcCenterYPixels = arcCenterXPixels;\n\n            document.addEventListener(\"touchmove\", handleTouch, {passive: false});\n            document.addEventListener(\"touchend\", endTouch);\n\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function handleTouch(e) {\n\n            if (trace) console.log(\"handleTouch\", e.touches);\n\n            e.preventDefault();\n\n            let touchesIndex = e.touches.length - 1;\n\n            let dxPixels = e.touches[touchesIndex].clientX - targetRect.left;\n            let dyPixels = e.touches[touchesIndex].clientY - targetRect.top;\n\n            let dx = (dxPixels - arcCenterXPixels) / (targetRect.width / 2);\n            let dy = - (dyPixels - arcCenterYPixels) / (targetRect.width / 2);  // targetRect.width car on a 20px de plus en hauteur pour le label\n\n            if (config.rotation === CCW) dx = - dx;\n\n            // convert to polar coordinates\n            let angle_rad = Math.atan2(dy, dx);\n            if (angle_rad < 0) angle_rad = 2.0*Math.PI + angle_rad;\n\n            if (trace) console.log(`handleTouch: position in svg = ${dxPixels}, ${dyPixels} pixels; ${dx.toFixed(3)}, ${dy.toFixed(3)} rel.; angle ${angle_rad.toFixed(3)} rad`);\n\n            setAngle(polarToKnobAngle(angle_rad * 180.0 / Math.PI), true);\n\n            redraw();\n\n        }\n\n        /**\n         *\n         */\n        function endTouch() {\n            if (trace) console.log(\"endTouch\");\n            document.removeEventListener(\"touchmove\", handleTouch);\n            document.removeEventListener(\"touchend\", endTouch);\n        }\n\n        /**\n         *\n         */\n        function attachEventHandlers() {\n            if (trace) console.log(\"attach attachEventHandlers\");\n            svg_element.addEventListener(\"mousedown\", function(e) {\n                startDrag(e);\n            });\n            svg_element.addEventListener(\"wheel\", function(e) {\n                mouseWheelHandler(e);\n            });\n            svg_element.addEventListener(\"touchstart\", startTouch, {passive: false});\n        }\n\n        /**\n         *\n         */\n        function notifyChange() {\n            if (trace) console.log(\"knob value has changed\");\n            let value = getValue();     // TODO: cache the value\n            let event = new CustomEvent(\"change\", {\"detail\": value});\n            //svg_element.dispatchEvent(event);\n            elem.dispatchEvent(event);\n            if (config.onchange) {\n                config.onchange(value);\n            }\n        }\n\n        /**\n         * Utility function to configure the mousewheel direction.\n         * @returns {*}\n         * @private\n         */\n        function _isMacOS() {\n            return [\"Macintosh\", \"MacIntel\", \"MacPPC\", \"Mac68K\"].indexOf(window.navigator.platform) !== -1;\n        }\n\n        /**\n         * Return viewBox X,Y coordinates\n         * @param angle in [degree] (polar, 0 at 3 o'clock)\n         * @param radius; defaults to config.radius\n         * @returns {{x: number, y: number}}\n         */\n        function getViewboxCoord(angle, radius) {\n            let a = angle * Math.PI / 180.0;\n            let r = radius === undefined ? config.track_radius : radius;\n            let x = Math.cos(a) * r;\n            let y = Math.sin(a) * r;\n            return {\n                x: config.rotation === CW ? (centerX + x) : (centerX - x),\n                y: centerY - y\n            }\n        }\n\n        /**\n         *\n         * @param from_angle in [degree] in knob's coordinates\n         * @param to_angle in [degree] in knob's coordinates\n         * @param radius\n         */\n        function getArc(from_angle, to_angle, radius) {\n\n            if (trace) console.group(`getArc(${from_angle}, ${to_angle}, ${radius})`);\n\n            // SVG d: \"A rx,ry xAxisRotate LargeArcFlag,SweepFlag x,y\".\n            // SweepFlag is either 0 or 1, and determines if the arc should be swept in a clockwise (1), or anti-clockwise (0) direction\n            // ref: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d\n\n            let a0 = knobToPolarAngle(from_angle);\n            let a1 = knobToPolarAngle(to_angle);\n\n            // little trick to force a full arc (360deg) when from=0 and to=360\n            if (from_angle !== to_angle) {\n                // with this we make sure that x1 will be different than x0 within the path definition\n                a0 -= 0.0001;\n                a1 += 0.0001;\n            }\n\n            let {x: x0, y: y0} = getViewboxCoord(a0, radius);\n            let {x: x1, y: y1} = getViewboxCoord(a1, radius);\n\n            let delta_angle = (a0 - a1 + 360.0) % 360.0;\n\n            let large_arc = delta_angle < 180.0 ? 0 : 1;\n            let arc_direction = config.rotation === CW ? 1 : 0;\n\n            let p = `M ${x0},${y0} A ${radius},${radius} 0 ${large_arc},${arc_direction} ${x1},${y1}`;\n\n            if (trace) console.groupEnd();\n            if (trace) console.log(\"arc: \" + p);\n\n            return p;\n        }\n\n        /**\n         *\n         * @returns {*}\n         */\n        function getTrackPath() {\n\n            if (trace) console.log(\"getTrackPath()\");\n\n            let p = null;\n\n            if (config.center_zero) {\n\n                if (Array.isArray(config.center_value)) {\n                    // let v = getValue();\n                    // console.log('center value is an array; getValue=', getValue(), typeof v);\n                    if (config.center_value.includes(getValue())) {\n                        if (trace) console.log(\"getTrackPath: center position, track not drawn\");\n                        // track is not drawn when the value is at center\n                        return p;\n                    }\n                } else {\n                    if (getValue() === config.center_value) {\n                        if (trace) console.log(\"getTrackPath: center position, track not drawn\");\n                        // track is not drawn when the value is at center\n                        return p;\n                    }\n                }\n\n                // we assume the split is at 180 [deg] (knob\"s angle)\n                if (angle < 180) {\n                    p = getArc(Math.min(angle, left_track_end_angle), left_track_end_angle, config.track_radius);\n                } else if (angle > 180) {\n                    p = getArc(right_track_start_angle, Math.max(angle, right_track_start_angle), config.track_radius);\n                }\n\n            } else {\n                p = getArc(config.angle_min, angle, config.track_radius);\n            }\n\n            return p;\n        }\n\n        /**\n         *\n         */\n        function draw_background() {\n\n            if (trace) console.log(\"draw_background()\", config.bg);\n\n            if (!config.bg) return;\n\n            // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n\n            //\n            // back disk:\n            //\n            svg_bg = document.createElementNS(NS, \"circle\");\n            svg_bg.setAttributeNS(null, \"cx\", `${centerX}`);\n            svg_bg.setAttributeNS(null, \"cy\", `${centerY}`);\n            svg_bg.setAttributeNS(null, \"r\", `${config.bg_radius}`);\n            svg_bg.setAttribute(\"fill\", `${config.bg_color}`);\n            svg_bg.setAttribute(\"stroke\", `${config.bg_border_color}`);\n            svg_bg.setAttribute(\"stroke-width\", `${config.bg_border_width}`);\n            svg_bg.setAttribute(\"class\", config.class_bg);\n            svg_element.appendChild(svg_bg);\n        }\n\n        /**\n         *\n         */\n        function draw_markers() {\n\n            if (trace) console.log(\"draw_markers()\", config.markers);\n\n            if (!config.markers) return;\n\n            let p = \"\";\n            let step = (config.angle_max - config.angle_min) / config.markers;\n            for (let a = config.angle_min; a <= config.angle_max; a += step) {\n                let from = getViewboxCoord(knobToPolarAngle(a), config.markers_radius);    // getViewboxCoord(angle, radius)\n                let to = getViewboxCoord(knobToPolarAngle(a), config.markers_radius + config.markers_length);\n                p += `M ${from.x},${from.y} L ${to.x},${to.y} `;\n            }\n\n            svg_divisions = document.createElementNS(NS, \"path\");\n            svg_divisions.setAttributeNS(null, \"d\", p);\n            svg_divisions.setAttribute(\"stroke\", `${config.markers_color}`);\n            svg_divisions.setAttribute(\"stroke-width\", `${config.markers_width}`);\n            svg_divisions.setAttribute(\"stroke-linecap\", config.linecap);\n            svg_divisions.setAttribute(\"class\", config.class_markers);\n            svg_element.appendChild(svg_divisions);\n        }\n\n/*\n        function draw_units() {\n            let pos = getViewboxCoord(angle_min_polar, config.divisions_radius);    // getViewboxCoord(angle, radius)\n            svg_value_text = document.createElementNS(NS, \"text\");\n            svg_value_text.setAttributeNS(null, \"x\", `${pos.x}`);\n            svg_value_text.setAttributeNS(null, \"y\", `${pos.y}`);\n            // svg_value_text.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text.setAttribute(\"cursor\", \"default\");\n            svg_value_text.setAttribute(\"font-family\", config.font_family);\n            svg_value_text.setAttribute(\"font-size\", `10`);\n            // svg_value_text.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text.setAttribute(\"fill\", config.font_color);\n            // svg_value_text.setAttribute(\"class\", config.class_value);\n            // svg_value_text.textContent = getDisplayValue();\n            svg_value_text.textContent = config.value_min.toString();\n            svg_element.appendChild(svg_value_text);\n        }\n*/\n\n        /**\n         *\n         */\n        function draw_track_background() {\n\n            if (trace) console.log(\"draw_track_background()\", config.track_bg);\n\n            // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n\n            if (!config.track_bg) return;\n\n            //\n            // track background:\n            //\n            if (config.center_zero) {\n\n                // left track background\n                svg_track_bg_left = document.createElementNS(NS, \"path\");\n                svg_track_bg_left.setAttributeNS(null, \"d\", getArc(config.angle_min, left_track_end_angle, config.track_bg_radius));\n                svg_track_bg_left.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg_left.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg_left.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg_left.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg_left.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg_left);\n\n                // right track background\n                svg_track_bg_right = document.createElementNS(NS, \"path\");\n                svg_track_bg_right.setAttributeNS(null, \"d\", getArc(right_track_start_angle, config.angle_max, config.track_bg_radius));\n                svg_track_bg_right.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg_right.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg_right.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg_right.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg_right.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg_right);\n\n            } else {\n\n                svg_track_bg = document.createElementNS(NS, \"path\");\n                svg_track_bg.setAttributeNS(null, \"d\", getArc(config.angle_min, config.angle_max, config.track_bg_radius));\n                svg_track_bg.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg);\n\n            }\n        }\n\n        /**\n         *\n         */\n        function draw_track() {\n\n            if (trace) console.log(\"draw_track()\", config.track);\n\n            if (!config.track) return;\n            let p = getTrackPath();\n            if (p) {\n                svg_track = document.createElementNS(NS, \"path\");\n                svg_track.setAttributeNS(null, \"d\", p);\n                svg_track.setAttribute(\"stroke\", `${config.track_color_init}`);\n                svg_track.setAttribute(\"stroke-width\", `${config.track_width}`);\n                svg_track.setAttribute(\"fill\", \"transparent\");\n                svg_track.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track.setAttribute(\"class\", config.class_track);\n                svg_element.appendChild(svg_track);\n            }\n        }\n\n        /**\n         *\n         * @returns {string}\n         */\n        function getTrackCursor() {\n            let a = knobToPolarAngle(angle);\n            let from = getViewboxCoord(a, config.cursor_radius);\n            let to = getViewboxCoord(a, config.cursor_radius + config.cursor_length);\n            return `M ${from.x},${from.y} L ${to.x},${to.y}`;\n        }\n\n        /**\n         *\n         */\n        function draw_cursor() {\n\n            if (trace) console.log(\"draw_cursor()\", config.cursor);\n\n            if (!config.cursor) return;\n\n            let p = getTrackCursor();\n            if (p) {\n                svg_cursor = document.createElementNS(NS, \"path\");\n                svg_cursor.setAttributeNS(null, \"d\", p);\n                svg_cursor.setAttribute(\"stroke\", `${config.cursor_color_init}`);\n                svg_cursor.setAttribute(\"stroke-width\", `${config.cursor_width}`);\n                svg_cursor.setAttribute(\"fill\", \"transparent\");\n                svg_cursor.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_cursor.setAttribute(\"class\", config.class_cursor);\n                svg_element.appendChild(svg_cursor);\n            }\n        }\n\n        function getFontSize(text, multiline=false) {\n            if (typeof text !== \"string\") return config.font_size;\n            const f = 22;   // empiric value\n            let m = Math.min(f, text.length);\n            if (multiline) {\n                return config.font_size * Math.min(0.75, Math.max(((f - m) / f), 0.25));\n            } else {\n                return config.font_size * Math.max(((f - m) / f), 0.25);\n            }\n\n        }\n\n        function draw_value_line1(text, multiline=false) {\n            if (trace) console.log(\"draw_value_line1\", text);\n            svg_value_text = document.createElementNS(NS, \"text\");\n            svg_value_text.setAttributeNS(null, \"x\", `${HALF_WIDTH}`);\n            svg_value_text.setAttributeNS(null, \"y\", `${config.value_position}`);\n            svg_value_text.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text.setAttribute(\"cursor\", \"default\");\n            svg_value_text.setAttribute(\"font-family\", config.font_family);\n            svg_value_text.setAttribute(\"font-size\", `${getFontSize(text, multiline)}`);\n            svg_value_text.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text.setAttribute(\"fill\", config.font_color);\n            svg_value_text.setAttribute(\"class\", config.class_value);\n            svg_value_text.textContent = text;\n            svg_element.appendChild(svg_value_text);\n        }\n\n        function draw_value_line2(text) {\n            if (trace) console.log(\"draw_value_line2\", text);\n            svg_value_text2 = document.createElementNS(NS, \"text\");\n            svg_value_text2.setAttributeNS(null, \"x\", `${HALF_WIDTH}`);\n            svg_value_text2.setAttributeNS(null, \"y\", `${config.value_position + 4}`);\n            svg_value_text2.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text2.setAttribute(\"cursor\", \"default\");\n            svg_value_text2.setAttribute(\"font-family\", config.font_family);\n            svg_value_text2.setAttribute(\"font-size\", `${getFontSize(text, true)}`);\n            svg_value_text2.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text2.setAttribute(\"fill\", config.font_color);\n            svg_value_text2.setAttribute(\"class\", config.class_value);\n            svg_value_text2.textContent = text;\n            svg_element.appendChild(svg_value_text2);\n\n        }\n\n        /**\n         *\n         */\n        function draw_value() {\n\n            if (trace) console.log(\"draw_value\", config.value_text);\n\n            if (!config.value_text) return;\n\n            const t = getDisplayValue();\n\n            if (typeof t === \"number\" || t.indexOf(\"\\n\") <= 0) {\n\n                if (trace) console.log(\"single line\");\n                draw_value_line1(t)\n\n            } else {\n                const lines = t.split(\"\\n\");\n                if (trace) console.log(\"two lines\", lines);\n\n                draw_value_line1(lines[0], true);\n                draw_value_line2(lines[1]);\n            }\n\n        }\n\n        function update_value() {\n\n            if (trace) console.log(\"update_value\", config.value_text);\n\n            if (!config.value_text) return;\n\n            const t = getDisplayValue();\n\n            if (typeof t === \"number\" || t.indexOf(\"\\n\") <= 0) {\n                // single line:\n\n                if (trace) console.log(\"single line\");\n\n                if (svg_value_text) {\n                    svg_value_text.setAttributeNS(null, \"y\", `${config.value_position}`);\n                    svg_value_text.setAttribute(\"font-size\", `${getFontSize(t)}`);\n                    svg_value_text.textContent = t;\n                }\n\n                if (svg_value_text2) {\n                    svg_element.removeChild(svg_value_text2);\n                    svg_value_text2 = null;\n                }\n\n            } else {\n                // two lines:\n\n                const lines = t.split(\"\\n\");\n                if (trace) console.log(\"two lines\", t, lines);\n\n                if (svg_value_text) {\n                    svg_value_text.setAttributeNS(null, \"y\", `${config.value_position - 12}`);\n                    svg_value_text.setAttribute(\"font-size\", `${getFontSize(lines[0], true)}`);\n                    svg_value_text.textContent = lines[0];\n                }\n\n                if (svg_value_text2) {\n                    svg_value_text2.setAttributeNS(null, \"y\", `${config.value_position + 4}`);\n                    svg_value_text2.setAttribute(\"font-size\", `${getFontSize(lines[1], true)}`);\n                    svg_value_text2.textContent = lines[1];\n                } else {\n                    draw_value_line2(lines[1]);\n                }\n            }\n\n        }\n\n        /**\n         *\n         */\n        function draw() {\n\n            if (trace) console.log(\"draw()\", config);\n\n            draw_background();\n            draw_track_background();\n            draw_markers();\n            // draw_units();\n            draw_track();\n            draw_cursor();\n            draw_value();\n        }\n\n        /**\n         *\n         */\n        function redraw() {\n\n            if (trace) console.log(\"redraw()\", config);\n\n            let p = getTrackPath();\n            if (p) {\n                if (svg_track) {\n                    if (trace) console.log(\"redraw track already exist, update d\");\n                    svg_track.setAttributeNS(null, \"d\", p);\n                } else {\n                    if (trace) console.log(\"redraw draw_track\");\n                    draw_track();\n                }\n            } else {\n                if (svg_track) {\n                    if (trace) console.log(\"redraw track already exist, hide it\");\n                    svg_track.setAttributeNS(null, \"d\", \"\");    // we hide the track\n                }\n            }\n\n            if (!has_changed) {\n                has_changed = getValue() !== config.default_value;\n                if (has_changed) {\n                    if (svg_track) {\n                        svg_track.setAttribute(\"stroke\", `${config.track_color}`);\n                    }\n                }\n            }\n\n            if (svg_cursor) {\n                p = getTrackCursor();\n                if (p) {\n                    if (trace) console.log(\"redraw cursor\");\n                    svg_cursor.setAttributeNS(null, \"d\", p);\n                    if (has_changed) {\n                        svg_cursor.setAttribute(\"stroke\", `${config.cursor_color}`);\n                    }\n                }\n            }\n\n            if (svg_value_text) {\n                if (trace) console.log(\"redraw svg_value_text\");\n                // svg_value_text.textContent = getDisplayValue();\n                update_value();\n            }\n        }\n\n        /**\n         *\n         */\n        return {\n            set value(v) {\n                // console.group(\"value setter\");\n                setValue(v);\n                redraw();\n                // console.groupEnd();\n            },\n            set config(new_config) {\n                // console.group(\"config setter\");\n                config = Object.assign({}, defaults, config, new_config);\n                init();\n                redraw();\n                // console.groupEnd();\n            },\n            setConfigValue: function(attribute, value) {\n                // console.group(\"setConfigValue\");\n                config[attribute] = value;\n                init();\n                redraw();\n                // console.groupEnd();\n            },\n            initValue,\n            enableDebug: function() {\n                trace = true;\n            },\n            disableDebug: function() {\n                trace = false;\n            }\n        };\n\n    }\n"],"names":["light","bg_color","bg_border_color","track_bg_color","track_color_init","track_color","cursor_color_init","cursor_color","markers_color","font_color","light2","dark","elem","conf","svg_element","trace","NS","CW","CCW","HALF_WIDTH","centerX","centerY","vbWidth","String","document","querySelector","nodeType","nodeName","toLowerCase","bbox","getBBox","x","width","y","height","createElementNS","appendChild","defaults","label","rotation","default_value","initial_value","value_min","value_max","value_resolution","center_zero","center_value","center_gap","zero_at","angle_min","angle_max","bg_radius","bg_border_width","track_bg_radius","track_bg_width","track_radius","track_width","cursor_radius","cursor_length","cursor_width","palette","bg","track_bg","track","cursor","linecap","value_text","value_position","HALF_HEIGHT","font_family","font_size","display_raw","format_raw","v","Math","round","format","font_weight","markers","markers_radius","markers_length","markers_width","class_bg","class_track_bg","class_track","class_value","class_cursor","class_markers","snap_to_steps","mouse_wheel_acceleration","onchange","data_config","JSON","parse","dataset","config","c","Object","assign","palettes","setAttributeNS","targetRect","minDeltaY","arcCenterXPixels","arcCenterYPixels","left_track_end_angle","right_track_start_angle","angle","svg_bg","svg_track_bg","svg_track_bg_left","svg_track_bg_right","svg_track","svg_cursor","svg_divisions","svg_value_text","svg_value_text2","has_changed","init","console","log","getRoundedValue","polarToKnobAngle","acos","PI","initValue","setValue","getDisplayValue","getValue","getCursorCorrection","n","abs","a","undefined","setAngle","new_angle","fire_event","prev","notify","min","max","value","event","CustomEvent","dispatchEvent","notifyChange","knobToPolarAngle","mouseUpdate","e","dxPixels","clientX","left","dyPixels","clientY","top","dx","dy","angle_rad","atan2","toFixed","handleDrag","preventDefault","redraw","endDrag","removeEventListener","handleTouch","touches","touchesIndex","length","endTouch","getViewboxCoord","radius","r","cos","sin","getArc","from_angle","to_angle","group","a0","a1","p","x0","y0","groupEnd","getTrackPath","Array","isArray","includes","draw_track","setAttribute","getTrackCursor","from","to","getFontSize","text","multiline","m","draw_value_line1","textContent","draw_value_line2","t","indexOf","removeChild","lines","split","update_value","step","draw_markers","draw_cursor","draw_value","addEventListener","getBoundingClientRect","startDrag","deltaY","mouseWheelHandler","passive","new_config","setConfigValue","attribute","enableDebug","disableDebug"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/svg-knob/dist/index.mjs b/node_modules/svg-knob/dist/index.mjs
index b1b6dc2..38beda0 100644
--- a/node_modules/svg-knob/dist/index.mjs
+++ b/node_modules/svg-knob/dist/index.mjs
@@ -1,2 +1,2 @@
-var t={light:{bg_color:"#E0E0E0",bg_border_color:"#BDBDBD",track_bg_color:"#CFD8DC",track_color_init:"#64B5F6",track_color:"#42A5F5",cursor_color_init:"#64B5F6",cursor_color:"#42A5F5",markers_color:"#9E9E9E",font_color:"#424242"},light2:{bg_color:"#B1DAEE",bg_border_color:"#569DC0",track_bg_color:"#B1DAEE",track_color_init:"#569DC0",track_color:"#1D6D93",cursor_color_init:"#569DC0",cursor_color:"#1D6D93",markers_color:"#3680A4",font_color:"#1D6D93"},dark:{bg_color:"#000000",bg_border_color:"#569DC0",track_bg_color:"#424242",track_color_init:"#FDD835",track_color:"#FFEC00",cursor_color_init:"#569DC0",cursor_color:"#FDD835",markers_color:"#3680A4",font_color:"#FFEA00"}};export default function(e,r){if(void 0===r&&(r={}),!e)throw"You must pass a DOM node reference to the Knob constructor";var n,o=!1,a="http://www.w3.org/2000/svg",l=!0,i=!l,s=50,u=50;("string"==typeof e||e instanceof String)&&(e=document.querySelector(e)),"svg"===e.nodeName.toLowerCase()?n=e:(n=document.createElementNS("http://www.w3.org/2000/svg","svg"),e.appendChild(n));var c,_={label:!1,rotation:l,default_value:0,initial_value:0,value_min:0,value_max:100,value_resolution:1,center_zero:!1,center_value:null,center_gap:4,zero_at:270,angle_min:30,angle_max:330,bg_radius:32,bg_border_width:1,track_bg_radius:40,track_bg_width:8,track_radius:40,track_width:8,cursor_radius:18,cursor_length:10,cursor_width:4,palette:"light",bg:!1,track_bg:!0,track:!0,cursor:!1,linecap:"butt",value_text:!0,value_position:u+8,font_family:"sans-serif",font_size:25,display_raw:!1,format_raw:function(t){return Math.round(t)},format:function(t){return t},font_weight:"bold",markers:0,markers_radius:40,markers_length:8,markers_width:2,class_bg:"knob-bg",class_track_bg:"knob-track-bg",class_track:"knob-track",class_value:"knob-value",class_cursor:"knob-cursor",class_markers:"knob-markers",snap_to_steps:!1,mouse_wheel_acceleration:1,onchange:null},d=JSON.parse(e.dataset.config||"{}"),g=Object.assign({},_,t[_.palette],r,d),b=Object.assign(g,t[g.palette],r,d);c=b.label||b.value_position>=100-b.font_size/2?120:100,n.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink"),n.setAttributeNS(null,"viewBox","0 0 100 "+c);var m,h,v=0,f=0,k=0,p=0,A=b.angle_min,w=null,x=null,E=null,M=null,S=null,D=null,N=null,y=null,C=null,z=!1;function F(){o&&console.log("init()"),b.center_zero&&(b.center_value||(b.center_value=P((b.value_max-b.value_min)/2+b.value_min))),"butt"===b.linecap?(k=j(180*Math.acos(-b.center_gap/100)/Math.PI),p=j(180*Math.acos(b.center_gap/100)/Math.PI)):(k=j(180*Math.acos(-(1.3*b.track_width+b.center_gap)/100)/Math.PI),p=j(180*Math.acos((1.3*b.track_width+b.center_gap)/100)/Math.PI))}function L(){O(b.initial_value?b.initial_value:b.default_value)}function P(t){return null===b.value_resolution?t:Math.round(t/b.value_resolution)*b.value_resolution}function B(t){o&&console.log("getDisplayValue",b.display_raw);var e=T(t);return b.display_raw?b.format_raw(e):b.format(e)}function I(){var t;return t=Math.abs(b.value_max-b.value_min),1===Math.abs(t%2)?.5:0}function T(t){return P(((void 0===t?A:t)-b.angle_min)/(b.angle_max-b.angle_min)*(b.value_max-b.value_min)+b.value_min-I())}function O(t){return V((t+I()-b.value_min)/(b.value_max-b.value_min)*(b.angle_max-b.angle_min)+b.angle_min),o&&console.log("setValue("+t+") angle="+(t-b.value_min)/(b.value_max-b.value_min)*(b.angle_max-b.angle_min)+b.angle_min),!0}function V(t,r){var n=A,a=r&&t!==A;A=Math.min(Math.max(t,b.angle_min),b.angle_max),a&&T(n)!==T()&&function(){o&&console.log("knob value has changed");var t=T(),r=new CustomEvent("change",{detail:t});e.dispatchEvent(r),b.onchange&&b.onchange(t)}()}function Y(t){var e=b.zero_at-t;return e<0&&(e+=360),o&&console.log("knobToPolarAngle "+t+" -> "+e),e}function j(t){return o&&console.log("polarToKnobAngle "+t+" -> "+(b.zero_at-t+360)%360),(b.zero_at-t+360)%360}function K(t){var e=t.clientX-m.left,r=t.clientY-m.top,n=(e-v)/(m.width/2),a=-(r-f)/(m.width/2);b.rotation===i&&(n=-n);var l=Math.atan2(a,n);l<0&&(l=2*Math.PI+l),o&&console.log("mouseUpdate: position in svg = "+e+", "+r+" pixels; "+n.toFixed(3)+", "+a.toFixed(3)+" rel.; angle "+l.toFixed(3)+" rad"),V(j(180*l/Math.PI),!0)}function R(t){t.preventDefault(),K(t),et()}function X(){o&&console.log("endDrag"),document.removeEventListener("mousemove",R,!1),document.removeEventListener("mouseup",X,!1)}function q(t){o&&console.log("handleTouch",t.touches),t.preventDefault();var e=t.touches.length-1,r=t.touches[e].clientX-m.left,n=t.touches[e].clientY-m.top,a=(r-v)/(m.width/2),l=-(n-f)/(m.width/2);b.rotation===i&&(a=-a);var s=Math.atan2(l,a);s<0&&(s=2*Math.PI+s),o&&console.log("handleTouch: position in svg = "+r+", "+n+" pixels; "+a.toFixed(3)+", "+l.toFixed(3)+" rel.; angle "+s.toFixed(3)+" rad"),V(j(180*s/Math.PI),!0),et()}function H(){o&&console.log("endTouch"),document.removeEventListener("touchmove",q),document.removeEventListener("touchend",H)}function J(t,e){var r=t*Math.PI/180,n=void 0===e?b.track_radius:e,o=Math.cos(r)*n,a=Math.sin(r)*n;return{x:b.rotation===l?s+o:s-o,y:u-a}}function U(t,e,r){o&&console.group("getArc("+t+", "+e+", "+r+")");var n=Y(t),a=Y(e);t!==e&&(n-=1e-4,a+=1e-4);var i=J(n,r),s=i.x,u=i.y,c=J(a,r),_="M "+s+","+u+" A "+r+","+r+" 0 "+((n-a+360)%360<180?0:1)+","+(b.rotation===l?1:0)+" "+c.x+","+c.y;return o&&console.groupEnd(),o&&console.log("arc: "+_),_}function G(){o&&console.log("getTrackPath()");var t=null;if(b.center_zero){if(Array.isArray(b.center_value)){if(b.center_value.includes(T()))return o&&console.log("getTrackPath: center position, track not drawn"),t}else if(T()===b.center_value)return o&&console.log("getTrackPath: center position, track not drawn"),t;A<180?t=U(Math.min(A,k),k,b.track_radius):A>180&&(t=U(p,Math.max(A,p),b.track_radius))}else t=U(b.angle_min,A,b.track_radius);return t}function Q(){if(o&&console.log("draw_track()",b.track),b.track){var t=G();t&&((S=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),S.setAttribute("stroke",""+b.track_color_init),S.setAttribute("stroke-width",""+b.track_width),S.setAttribute("fill","transparent"),S.setAttribute("stroke-linecap",b.linecap),S.setAttribute("class",b.class_track),n.appendChild(S))}}function W(){var t=Y(A),e=J(t,b.cursor_radius),r=J(t,b.cursor_radius+b.cursor_length);return"M "+e.x+","+e.y+" L "+r.x+","+r.y}function Z(t,e){if(void 0===e&&(e=!1),"string"!=typeof t)return b.font_size;var r=Math.min(22,t.length);return e?b.font_size*Math.min(.75,Math.max((22-r)/22,.25)):b.font_size*Math.max((22-r)/22,.25)}function $(t,e){void 0===e&&(e=!1),o&&console.log("draw_value_line1",t),(y=document.createElementNS(a,"text")).setAttributeNS(null,"x",""+s),y.setAttributeNS(null,"y",""+b.value_position),y.setAttribute("text-anchor","middle"),y.setAttribute("cursor","default"),y.setAttribute("font-family",b.font_family),y.setAttribute("font-size",""+Z(t,e)),y.setAttribute("font-weight",""+b.font_weight),y.setAttribute("fill",b.font_color),y.setAttribute("class",b.class_value),y.textContent=t,n.appendChild(y)}function tt(t){o&&console.log("draw_value_line2",t),(C=document.createElementNS(a,"text")).setAttributeNS(null,"x",""+s),C.setAttributeNS(null,"y",""+(b.value_position+4)),C.setAttribute("text-anchor","middle"),C.setAttribute("cursor","default"),C.setAttribute("font-family",b.font_family),C.setAttribute("font-size",""+Z(t,!0)),C.setAttribute("font-weight",""+b.font_weight),C.setAttribute("fill",b.font_color),C.setAttribute("class",b.class_value),C.textContent=t,n.appendChild(C)}function et(){o&&console.log("redraw()",b);var t=G();t?S?(o&&console.log("redraw track already exist, update d"),S.setAttributeNS(null,"d",t)):(o&&console.log("redraw draw_track"),Q()):S&&(o&&console.log("redraw track already exist, hide it"),S.setAttributeNS(null,"d","")),z||(z=T()!==b.default_value)&&S&&S.setAttribute("stroke",""+b.track_color),D&&(t=W())&&(o&&console.log("redraw cursor"),D.setAttributeNS(null,"d",t),z&&D.setAttribute("stroke",""+b.cursor_color)),y&&(o&&console.log("redraw svg_value_text"),function(){if(o&&console.log("update_value",b.value_text),b.value_text){var t=B();if("number"==typeof t||t.indexOf("\n")<=0)o&&console.log("single line"),y&&(y.setAttributeNS(null,"y",""+b.value_position),y.setAttribute("font-size",""+Z(t)),y.textContent=t),C&&(n.removeChild(C),C=null);else{var e=t.split("\n");o&&console.log("two lines",t,e),y&&(y.setAttributeNS(null,"y",""+(b.value_position-12)),y.setAttribute("font-size",""+Z(e[0],!0)),y.textContent=e[0]),C?(C.setAttributeNS(null,"y",""+(b.value_position+4)),C.setAttribute("font-size",""+Z(e[1],!0)),C.textContent=e[1]):tt(e[1])}}}())}return F(),L(),o&&console.log("draw()",b),o&&console.log("draw_background()",b.bg),b.bg&&((w=document.createElementNS(a,"circle")).setAttributeNS(null,"cx",""+s),w.setAttributeNS(null,"cy",""+u),w.setAttributeNS(null,"r",""+b.bg_radius),w.setAttribute("fill",""+b.bg_color),w.setAttribute("stroke",""+b.bg_border_color),w.setAttribute("stroke-width",""+b.bg_border_width),w.setAttribute("class",b.class_bg),n.appendChild(w)),o&&console.log("draw_track_background()",b.track_bg),b.track_bg&&(b.center_zero?((E=document.createElementNS(a,"path")).setAttributeNS(null,"d",U(b.angle_min,k,b.track_bg_radius)),E.setAttribute("stroke",""+b.track_bg_color),E.setAttribute("stroke-width",""+b.track_bg_width),E.setAttribute("stroke-linecap",b.linecap),E.setAttribute("fill","transparent"),E.setAttribute("class",b.class_track_bg),n.appendChild(E),(M=document.createElementNS(a,"path")).setAttributeNS(null,"d",U(p,b.angle_max,b.track_bg_radius)),M.setAttribute("stroke",""+b.track_bg_color),M.setAttribute("stroke-width",""+b.track_bg_width),M.setAttribute("stroke-linecap",b.linecap),M.setAttribute("fill","transparent"),M.setAttribute("class",b.class_track_bg),n.appendChild(M)):((x=document.createElementNS(a,"path")).setAttributeNS(null,"d",U(b.angle_min,b.angle_max,b.track_bg_radius)),x.setAttribute("stroke",""+b.track_bg_color),x.setAttribute("stroke-width",""+b.track_bg_width),x.setAttribute("fill","transparent"),x.setAttribute("stroke-linecap",b.linecap),x.setAttribute("class",b.class_track_bg),n.appendChild(x))),function(){if(o&&console.log("draw_markers()",b.markers),b.markers){for(var t="",e=(b.angle_max-b.angle_min)/b.markers,r=b.angle_min;r<=b.angle_max;r+=e){var l=J(Y(r),b.markers_radius),i=J(Y(r),b.markers_radius+b.markers_length);t+="M "+l.x+","+l.y+" L "+i.x+","+i.y+" "}(N=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),N.setAttribute("stroke",""+b.markers_color),N.setAttribute("stroke-width",""+b.markers_width),N.setAttribute("stroke-linecap",b.linecap),N.setAttribute("class",b.class_markers),n.appendChild(N)}}(),Q(),function(){if(o&&console.log("draw_cursor()",b.cursor),b.cursor){var t=W();t&&((D=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),D.setAttribute("stroke",""+b.cursor_color_init),D.setAttribute("stroke-width",""+b.cursor_width),D.setAttribute("fill","transparent"),D.setAttribute("stroke-linecap",b.linecap),D.setAttribute("class",b.class_cursor),n.appendChild(D))}}(),function(){if(o&&console.log("draw_value",b.value_text),b.value_text){var t=B();if("number"==typeof t||t.indexOf("\n")<=0)o&&console.log("single line"),$(t);else{var e=t.split("\n");o&&console.log("two lines",e),$(e[0],!0),tt(e[1])}}}(),o&&console.log("attach attachEventHandlers"),n.addEventListener("mousedown",function(t){!function(t){o&&console.log("startDrag"),t.preventDefault(),m=n.getBoundingClientRect(),f=v=m.width/2,document.addEventListener("mousemove",R,!1),document.addEventListener("mouseup",X,!1),K(t),et()}(t)}),n.addEventListener("wheel",function(t){!function(t){t.preventDefault();var e=t.deltaY;0!==e&&(h>Math.abs(e)||!h)&&(h=Math.abs(e)),V(Math.min(Math.max(A+e/h*1*b.mouse_wheel_acceleration,b.angle_min),b.angle_max),!0),et()}(t)}),n.addEventListener("touchstart",function(t){o&&console.log("startTouch"),t.preventDefault(),m=n.getBoundingClientRect(),f=v=m.width/2,document.addEventListener("touchmove",q,{passive:!1}),document.addEventListener("touchend",H)},{passive:!1}),{set value(t){O(t),et()},set config(t){b=Object.assign({},_,b,t),F(),et()},setConfigValue:function(t,e){b[t]=e,F(),et()},initValue:L,enableDebug:function(){o=!0},disableDebug:function(){o=!1}}}
+var t={light:{bg_color:"#E0E0E0",bg_border_color:"#BDBDBD",track_bg_color:"#CFD8DC",track_color_init:"#64B5F6",track_color:"#42A5F5",cursor_color_init:"#64B5F6",cursor_color:"#42A5F5",markers_color:"#9E9E9E",font_color:"#424242"},light2:{bg_color:"#B1DAEE",bg_border_color:"#569DC0",track_bg_color:"#B1DAEE",track_color_init:"#569DC0",track_color:"#1D6D93",cursor_color_init:"#569DC0",cursor_color:"#1D6D93",markers_color:"#3680A4",font_color:"#1D6D93"},dark:{bg_color:"#000000",bg_border_color:"#569DC0",track_bg_color:"#424242",track_color_init:"#FDD835",track_color:"#FFEC00",cursor_color_init:"#569DC0",cursor_color:"#FDD835",markers_color:"#3680A4",font_color:"#FFEA00"}};export default function(e,r){if(void 0===r&&(r={}),!e)throw"You must pass a DOM node reference to the Knob constructor";var n,o=!1,a="http://www.w3.org/2000/svg",l=!0,i=!l,s=50,u=s,c=50,_=100;("string"==typeof e||e instanceof String)&&(e=document.querySelector(e));var d=e.nodeName.toLowerCase();if("g"===d){var g=(n=e).getBBox();u=g.x+.5*g.width,c=g.y+.5*g.height,_=g.width}else{if("div"!==d)throw"Unsupported element type for creating knob, should be a div or an SVG g element!";n=document.createElementNS("http://www.w3.org/2000/svg","svg"),e.appendChild(n)}var b={label:!1,rotation:l,default_value:0,initial_value:0,value_min:0,value_max:100,value_resolution:1,center_zero:!1,center_value:null,center_gap:4,zero_at:270,angle_min:30,angle_max:330,bg_radius:32,bg_border_width:1,track_bg_radius:40,track_bg_width:8,track_radius:40,track_width:8,cursor_radius:18,cursor_length:10,cursor_width:4,palette:"light",bg:!1,track_bg:!0,track:!0,cursor:!1,linecap:"butt",value_text:!0,value_position:58,font_family:"sans-serif",font_size:25,display_raw:!1,format_raw:function(t){return Math.round(t)},format:function(t){return t},font_weight:"bold",markers:0,markers_radius:40,markers_length:8,markers_width:2,class_bg:"knob-bg",class_track_bg:"knob-track-bg",class_track:"knob-track",class_value:"knob-value",class_cursor:"knob-cursor",class_markers:"knob-markers",snap_to_steps:!1,mouse_wheel_acceleration:1,onchange:null},h=JSON.parse(e.dataset.config||"{}"),m=Object.assign({},b,t[b.palette],r,h),v=Object.assign(m,t[m.palette],r,h);n.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink"),100===_&&n.setAttributeNS(null,"viewBox","0 0 100 "+(v.label||v.value_position>=_-v.font_size/2?120:100));var f,k,p=0,A=0,w=0,x=0,E=v.angle_min,M=null,S=null,y=null,D=null,N=null,C=null,z=null,F=null,L=null,P=!1;function B(){o&&console.log("init()"),v.center_zero&&(v.center_value||(v.center_value=T((v.value_max-v.value_min)/2+v.value_min))),"butt"===v.linecap?(w=U(180*Math.acos(-v.center_gap/100)/Math.PI),x=U(180*Math.acos(v.center_gap/100)/Math.PI)):(w=U(180*Math.acos(-(1.3*v.track_width+v.center_gap)/100)/Math.PI),x=U(180*Math.acos((1.3*v.track_width+v.center_gap)/100)/Math.PI))}function I(){j(v.initial_value?v.initial_value:v.default_value)}function T(t){return null===v.value_resolution?t:Math.round(t/v.value_resolution)*v.value_resolution}function O(t){o&&console.log("getDisplayValue",v.display_raw);var e=Y(t);return v.display_raw?v.format_raw(e):v.format(e)}function V(){var t;return t=Math.abs(v.value_max-v.value_min),1===Math.abs(t%2)?.5:0}function Y(t){return T(((void 0===t?E:t)-v.angle_min)/(v.angle_max-v.angle_min)*(v.value_max-v.value_min)+v.value_min-V())}function j(t){return K((t+V()-v.value_min)/(v.value_max-v.value_min)*(v.angle_max-v.angle_min)+v.angle_min),o&&console.log("setValue("+t+") angle="+(t-v.value_min)/(v.value_max-v.value_min)*(v.angle_max-v.angle_min)+v.angle_min),!0}function K(t,r){var n=E,a=r&&t!==E;E=Math.min(Math.max(t,v.angle_min),v.angle_max),a&&Y(n)!==Y()&&function(){o&&console.log("knob value has changed");var t=Y(),r=new CustomEvent("change",{detail:t});e.dispatchEvent(r),v.onchange&&v.onchange(t)}()}function R(t){var e=v.zero_at-t;return e<0&&(e+=360),o&&console.log("knobToPolarAngle "+t+" -> "+e),e}function U(t){return o&&console.log("polarToKnobAngle "+t+" -> "+(v.zero_at-t+360)%360),(v.zero_at-t+360)%360}function X(t){var e=t.clientX-f.left,r=t.clientY-f.top,n=(e-p)/(f.width/2),a=-(r-A)/(f.width/2);v.rotation===i&&(n=-n);var l=Math.atan2(a,n);l<0&&(l=2*Math.PI+l),o&&console.log("mouseUpdate: position in svg = "+e+", "+r+" pixels; "+n.toFixed(3)+", "+a.toFixed(3)+" rel.; angle "+l.toFixed(3)+" rad"),K(U(180*l/Math.PI),!0)}function q(t){t.preventDefault(),X(t),ot()}function G(){o&&console.log("endDrag"),document.removeEventListener("mousemove",q,!1),document.removeEventListener("mouseup",G,!1)}function H(t){o&&console.log("handleTouch",t.touches),t.preventDefault();var e=t.touches.length-1,r=t.touches[e].clientX-f.left,n=t.touches[e].clientY-f.top,a=(r-p)/(f.width/2),l=-(n-A)/(f.width/2);v.rotation===i&&(a=-a);var s=Math.atan2(l,a);s<0&&(s=2*Math.PI+s),o&&console.log("handleTouch: position in svg = "+r+", "+n+" pixels; "+a.toFixed(3)+", "+l.toFixed(3)+" rel.; angle "+s.toFixed(3)+" rad"),K(U(180*s/Math.PI),!0),ot()}function J(){o&&console.log("endTouch"),document.removeEventListener("touchmove",H),document.removeEventListener("touchend",J)}function Q(t,e){var r=t*Math.PI/180,n=void 0===e?v.track_radius:e,o=Math.cos(r)*n,a=Math.sin(r)*n;return{x:v.rotation===l?u+o:u-o,y:c-a}}function W(t,e,r){o&&console.group("getArc("+t+", "+e+", "+r+")");var n=R(t),a=R(e);t!==e&&(n-=1e-4,a+=1e-4);var i=Q(n,r),s=i.x,u=i.y,c=Q(a,r),_="M "+s+","+u+" A "+r+","+r+" 0 "+((n-a+360)%360<180?0:1)+","+(v.rotation===l?1:0)+" "+c.x+","+c.y;return o&&console.groupEnd(),o&&console.log("arc: "+_),_}function Z(){o&&console.log("getTrackPath()");var t=null;if(v.center_zero){if(Array.isArray(v.center_value)){if(v.center_value.includes(Y()))return o&&console.log("getTrackPath: center position, track not drawn"),t}else if(Y()===v.center_value)return o&&console.log("getTrackPath: center position, track not drawn"),t;E<180?t=W(Math.min(E,w),w,v.track_radius):E>180&&(t=W(x,Math.max(E,x),v.track_radius))}else t=W(v.angle_min,E,v.track_radius);return t}function $(){if(o&&console.log("draw_track()",v.track),v.track){var t=Z();t&&((N=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),N.setAttribute("stroke",""+v.track_color_init),N.setAttribute("stroke-width",""+v.track_width),N.setAttribute("fill","transparent"),N.setAttribute("stroke-linecap",v.linecap),N.setAttribute("class",v.class_track),n.appendChild(N))}}function tt(){var t=R(E),e=Q(t,v.cursor_radius),r=Q(t,v.cursor_radius+v.cursor_length);return"M "+e.x+","+e.y+" L "+r.x+","+r.y}function et(t,e){if(void 0===e&&(e=!1),"string"!=typeof t)return v.font_size;var r=Math.min(22,t.length);return e?v.font_size*Math.min(.75,Math.max((22-r)/22,.25)):v.font_size*Math.max((22-r)/22,.25)}function rt(t,e){void 0===e&&(e=!1),o&&console.log("draw_value_line1",t),(F=document.createElementNS(a,"text")).setAttributeNS(null,"x",""+s),F.setAttributeNS(null,"y",""+v.value_position),F.setAttribute("text-anchor","middle"),F.setAttribute("cursor","default"),F.setAttribute("font-family",v.font_family),F.setAttribute("font-size",""+et(t,e)),F.setAttribute("font-weight",""+v.font_weight),F.setAttribute("fill",v.font_color),F.setAttribute("class",v.class_value),F.textContent=t,n.appendChild(F)}function nt(t){o&&console.log("draw_value_line2",t),(L=document.createElementNS(a,"text")).setAttributeNS(null,"x",""+s),L.setAttributeNS(null,"y",""+(v.value_position+4)),L.setAttribute("text-anchor","middle"),L.setAttribute("cursor","default"),L.setAttribute("font-family",v.font_family),L.setAttribute("font-size",""+et(t,!0)),L.setAttribute("font-weight",""+v.font_weight),L.setAttribute("fill",v.font_color),L.setAttribute("class",v.class_value),L.textContent=t,n.appendChild(L)}function ot(){o&&console.log("redraw()",v);var t=Z();t?N?(o&&console.log("redraw track already exist, update d"),N.setAttributeNS(null,"d",t)):(o&&console.log("redraw draw_track"),$()):N&&(o&&console.log("redraw track already exist, hide it"),N.setAttributeNS(null,"d","")),P||(P=Y()!==v.default_value)&&N&&N.setAttribute("stroke",""+v.track_color),C&&(t=tt())&&(o&&console.log("redraw cursor"),C.setAttributeNS(null,"d",t),P&&C.setAttribute("stroke",""+v.cursor_color)),F&&(o&&console.log("redraw svg_value_text"),function(){if(o&&console.log("update_value",v.value_text),v.value_text){var t=O();if("number"==typeof t||t.indexOf("\n")<=0)o&&console.log("single line"),F&&(F.setAttributeNS(null,"y",""+v.value_position),F.setAttribute("font-size",""+et(t)),F.textContent=t),L&&(n.removeChild(L),L=null);else{var e=t.split("\n");o&&console.log("two lines",t,e),F&&(F.setAttributeNS(null,"y",""+(v.value_position-12)),F.setAttribute("font-size",""+et(e[0],!0)),F.textContent=e[0]),L?(L.setAttributeNS(null,"y",""+(v.value_position+4)),L.setAttribute("font-size",""+et(e[1],!0)),L.textContent=e[1]):nt(e[1])}}}())}return B(),I(),o&&console.log("draw()",v),o&&console.log("draw_background()",v.bg),v.bg&&((M=document.createElementNS(a,"circle")).setAttributeNS(null,"cx",""+u),M.setAttributeNS(null,"cy",""+c),M.setAttributeNS(null,"r",""+v.bg_radius),M.setAttribute("fill",""+v.bg_color),M.setAttribute("stroke",""+v.bg_border_color),M.setAttribute("stroke-width",""+v.bg_border_width),M.setAttribute("class",v.class_bg),n.appendChild(M)),o&&console.log("draw_track_background()",v.track_bg),v.track_bg&&(v.center_zero?((y=document.createElementNS(a,"path")).setAttributeNS(null,"d",W(v.angle_min,w,v.track_bg_radius)),y.setAttribute("stroke",""+v.track_bg_color),y.setAttribute("stroke-width",""+v.track_bg_width),y.setAttribute("stroke-linecap",v.linecap),y.setAttribute("fill","transparent"),y.setAttribute("class",v.class_track_bg),n.appendChild(y),(D=document.createElementNS(a,"path")).setAttributeNS(null,"d",W(x,v.angle_max,v.track_bg_radius)),D.setAttribute("stroke",""+v.track_bg_color),D.setAttribute("stroke-width",""+v.track_bg_width),D.setAttribute("stroke-linecap",v.linecap),D.setAttribute("fill","transparent"),D.setAttribute("class",v.class_track_bg),n.appendChild(D)):((S=document.createElementNS(a,"path")).setAttributeNS(null,"d",W(v.angle_min,v.angle_max,v.track_bg_radius)),S.setAttribute("stroke",""+v.track_bg_color),S.setAttribute("stroke-width",""+v.track_bg_width),S.setAttribute("fill","transparent"),S.setAttribute("stroke-linecap",v.linecap),S.setAttribute("class",v.class_track_bg),n.appendChild(S))),function(){if(o&&console.log("draw_markers()",v.markers),v.markers){for(var t="",e=(v.angle_max-v.angle_min)/v.markers,r=v.angle_min;r<=v.angle_max;r+=e){var l=Q(R(r),v.markers_radius),i=Q(R(r),v.markers_radius+v.markers_length);t+="M "+l.x+","+l.y+" L "+i.x+","+i.y+" "}(z=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),z.setAttribute("stroke",""+v.markers_color),z.setAttribute("stroke-width",""+v.markers_width),z.setAttribute("stroke-linecap",v.linecap),z.setAttribute("class",v.class_markers),n.appendChild(z)}}(),$(),function(){if(o&&console.log("draw_cursor()",v.cursor),v.cursor){var t=tt();t&&((C=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),C.setAttribute("stroke",""+v.cursor_color_init),C.setAttribute("stroke-width",""+v.cursor_width),C.setAttribute("fill","transparent"),C.setAttribute("stroke-linecap",v.linecap),C.setAttribute("class",v.class_cursor),n.appendChild(C))}}(),function(){if(o&&console.log("draw_value",v.value_text),v.value_text){var t=O();if("number"==typeof t||t.indexOf("\n")<=0)o&&console.log("single line"),rt(t);else{var e=t.split("\n");o&&console.log("two lines",e),rt(e[0],!0),nt(e[1])}}}(),o&&console.log("attach attachEventHandlers"),n.addEventListener("mousedown",function(t){!function(t){o&&console.log("startDrag"),t.preventDefault(),f=n.getBoundingClientRect(),A=p=f.width/2,document.addEventListener("mousemove",q,!1),document.addEventListener("mouseup",G,!1),X(t),ot()}(t)}),n.addEventListener("wheel",function(t){!function(t){t.preventDefault();var e=t.deltaY;0!==e&&(k>Math.abs(e)||!k)&&(k=Math.abs(e)),K(Math.min(Math.max(E+e/k*1*v.mouse_wheel_acceleration,v.angle_min),v.angle_max),!0),ot()}(t)}),n.addEventListener("touchstart",function(t){o&&console.log("startTouch"),t.preventDefault(),f=n.getBoundingClientRect(),A=p=f.width/2,document.addEventListener("touchmove",H,{passive:!1}),document.addEventListener("touchend",J)},{passive:!1}),{set value(t){j(t),ot()},set config(t){v=Object.assign({},b,v,t),B(),ot()},setConfigValue:function(t,e){v[t]=e,B(),ot()},initValue:I,enableDebug:function(){o=!0},disableDebug:function(){o=!1}}}
 //# sourceMappingURL=index.mjs.map
diff --git a/node_modules/svg-knob/dist/index.mjs.map b/node_modules/svg-knob/dist/index.mjs.map
index 40ccc97..981274a 100644
--- a/node_modules/svg-knob/dist/index.mjs.map
+++ b/node_modules/svg-knob/dist/index.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"index.mjs","sources":["../src/palettes.js","../src/index.js"],"sourcesContent":["\"use strict\";\n\n//TODO: make _init attributes optional\n\nexport default {\n    light : {\n        bg_color: \"#E0E0E0\",\n        bg_border_color: \"#BDBDBD\",\n        track_bg_color: \"#CFD8DC\",\n        track_color_init: \"#64B5F6\",\n        track_color: \"#42A5F5\",\n        cursor_color_init: \"#64B5F6\",\n        cursor_color: \"#42A5F5\",\n        markers_color: \"#9E9E9E\",\n        font_color: \"#424242\",\n    },\n    light2 : {\n        bg_color: \"#B1DAEE\",\n        bg_border_color: \"#569DC0\",\n        track_bg_color: \"#B1DAEE\",\n        track_color_init: \"#569DC0\",\n        track_color: \"#1D6D93\",\n        cursor_color_init: \"#569DC0\",\n        cursor_color: \"#1D6D93\",\n        markers_color: \"#3680A4\",\n        font_color: \"#1D6D93\",\n    },\n    dark: {\n        bg_color: \"#000000\",\n        bg_border_color: \"#569DC0\",\n        track_bg_color: \"#424242\",\n        track_color_init: \"#FDD835\",\n        track_color: \"#FFEC00\",\n        cursor_color_init: \"#569DC0\",\n        cursor_color: \"#FDD835\",\n        markers_color: \"#3680A4\",\n        font_color: \"#FFEA00\",\n    }\n}\n","\n    \"use strict\";\n\n    import palettes from \"./palettes.js\";\n\n    // FIXME: remove console usage for IE compatibility\n\n    /**\n     *\n     * @param elem DIV or SVN element\n     * @param conf optional config\n     * @returns {{value, config}}\n     */\n    export default function(elem, conf = {}) {\n\n        // Like a real knob, it's the knob's position that determines the knob's value.\n        // Therefore, the value is computed from the knob's position (angle).\n        // However, the user has the possibility to directly set the value and in that case\n        // the knob's position (angle) will be computed from the value and the knob redrawn\n        // accordingly.\n\n        //\n        // All angles in method parameters are in [degrees] (except for polarToKnobAngle() and getViewboxCoord()).\n        //\n        // By default:\n        // - knob direction is CLOCKWISE\n        // - start position is 6 o'clock (bottom)\n        // - knob angle is:\n        //       0 [deg] angle is a   6 o'clock (bottom)\n        //      90 [deg] angle is at  9 o'clock (left)\n        //     180 [deg] angle is at 12 o'clock (top)\n        //     270 [deg] angle is at  3 o'clock (right)\n        //\n        // Trigonometric functions (sin, cos, ...) operate in polar coordinates,\n        // with 0 angle at 3 o'clock and a counter-clockwise direction.\n        // To convert from \"knob angle\" to \"polar angle\":\n        //\n        //     knob    polar\n        // --------------------\n        //        0      270\n        //       30      240\n        //       90      180\n        //      180       90\n        //      270        0\n        //      330      -60 (add 360 to get a positive equivalent value: -60 + 360 = 300)\n        //\n        // Formula: polar-angle = 270 - knob-angle\n        //\n\n        if (!elem) {\n            throw \"You must pass a DOM node reference to the Knob constructor\";\n        }\n\n        let trace = false;    // when true, will log more details in the console; use enableDebug(), disableDebug() to change\n\n        // It is faster to access a property than to access a variable...\n        // See https://jsperf.com/vars-vs-props-speed-comparison/1\n\n        const NS = \"http://www.w3.org/2000/svg\";\n        const CW = true;    // clock-wise\n        const CCW = !CW;    // counter clock-wise\n\n        //---------------------------------------------------------------------\n        // To simplify the internal coordinates transformations, we set the view box as a 100 by 100 square.\n        // But, if a label is present, then we add 20 to the height (at the bottom) as a placeholder for the label.\n        // In summary:\n        // - 0,0..99,99: the knob itself\n        // - 0,100..99,119: the label, if any\n        const VIEWBOX_WIDTH = 100;\n        // const VIEWBOX_HEIGHT = config.with_label ? 120 : 100;\n        const HALF_WIDTH = 50;      // viewBox/2\n        const HALF_HEIGHT = 50;     // viewBox/2\n\n        let svg_element;\n\n        if (typeof elem === \"string\" || elem instanceof String) {\n            elem = document.querySelector(elem);\n        }\n\n        if (elem.nodeName.toLowerCase() === \"svg\") {\n            svg_element = elem;\n        } else {\n            svg_element = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n            elem.appendChild(svg_element);\n        }\n\n        // For the user convenience, the label can be set with the \"data-label\" attribute.\n        // If another label is set in data-config then this later definition will override data-label.\n        // let default_label = svg_element.dataset.label !== undefined ? svg_element.dataset.label : \"\";\n        let label = elem.dataset.label !== undefined ? elem.dataset.label : false;\n\n        let defaults = {\n\n            // User configurable properties. The colors are defined in the 'palettes', later on.\n\n            // No camelCase because we want to be able to have the same name in data- attributes.\n\n            label: false,\n\n            rotation: CW,\n\n            default_value: 0,\n            initial_value: 0,\n            value_min: 0.0,\n            value_max: 100.0,\n            value_resolution: 1,        // null means ignore\n\n            // split knob:\n            center_zero: false,\n            center_value: null,         // if null, the value will be computed from the min and max in the init() method\n            center_gap: 4,              // only used when center_zero=true; is the width of the gap between the left and right track around the zero value.\n\n            // position:\n            zero_at: 270.0,             // [deg] (polar) the 0 degree will be at 270 polar degrees (6 o'clock).\n            angle_min: 30.0,            // [deg] Angle in knob coordinates (0 at 6 0'clock)\n            angle_max: 330.0,           // [deg] Angle in knob coordinates (0 at 6 0'clock)\n\n            // background disk:\n            bg_radius: 32,\n            bg_border_width: 1,\n\n            // track background:\n            track_bg_radius: 40,\n            track_bg_width: 8,\n\n            // track:\n            track_radius: 40,\n            track_width: 8,\n\n            // cursor\n            cursor_radius: 18,          // same unit as radius\n            cursor_length: 10,\n            cursor_width: 4,\n\n            // appearance:\n            palette: \"light\",\n            bg: false,\n            track_bg: true,\n            track: true,\n            cursor: false,\n            // CSS class names\n            linecap: \"butt\",                   // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n\n            // text displayed in the middle of the knob:\n            value_text: true,\n            value_position: HALF_HEIGHT + 8,    // empirical value: HALF_HEIGHT + config.font_size / 3\n            font_family: \"sans-serif\",\n            font_size: 25,\n\n            // callback to get the text to display from the current value\n            display_raw: false,                 // if true, format callback is ignored\n            format_raw: v => Math.round(v),\n            format: v => v,                     // formatting of the displayed value\n            // off_text: null,                     // text to display when raw_value = min\n            // out_of_range_text: null,            // text to display when raw_value is out of range\n\n            font_weight: \"bold\",\n            markers: 0,                         // number of markers; 0 or false to disable\n            markers_radius: 40,\n            markers_length: 8,\n            markers_width: 2,\n\n            class_bg: \"knob-bg\",\n            class_track_bg : \"knob-track-bg\",\n            class_track : \"knob-track\",\n            class_value : \"knob-value\",\n            class_cursor : \"knob-cursor\",\n            class_markers: \"knob-markers\",\n\n            snap_to_steps: false,       // TODO\n\n            // mouse wheel support:\n            mouse_wheel_acceleration: 1,\n\n            onchange: null              // callback function\n        };\n\n        //---------------------------------------------------------------------\n        // Consolidate all configs:\n\n        let data_config = JSON.parse(elem.dataset.config || \"{}\");\n        let c = Object.assign({}, defaults, palettes[defaults.palette], conf, data_config);\n        // we re-assign conf and data_config for the case they override some of the palette colors.\n        let config = Object.assign(c, palettes[c.palette], conf, data_config);\n\n        //---------------------------------------------------------------------\n        // Terminates the SVG element setup:\n\n        let viewbox_height;\n        if (config.label || (config.value_position >= (100 - (config.font_size / 2)))) {\n            // make some room for the label or the value that we want to display below the knob\n            viewbox_height = 120;\n        } else {\n            viewbox_height = 100;\n        }\n\n        // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n        svg_element.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n        svg_element.setAttributeNS(null, \"viewBox\", `0 0 ${VIEWBOX_WIDTH} ${viewbox_height}`);\n\n        // Center of arc in knob coordinates and in ViewPort\"s pixels relative to the <svg> ClientBoundingRect.\n        let arcCenterXPixels = 0;\n        let arcCenterYPixels = 0; // equal to arcCenterXPixels because the knob is a circle\n\n        //---------------------------------------------------------------------\n        // Pre-computed values to speed-up operations:\n\n        // At the top of the knob, we leave a gap between the left and right tracks.\n        // These are angles that delimit this gap:\n        let left_track_end_angle = 0;     // angle in [degrees]\n        let right_track_start_angle = 0;  // angle in [degrees]\n\n        //---------------------------------------------------------------------\n        // internals\n\n        let value = 0.0;                    // current knob's value [value_min..value_max]\n        let angle = config.angle_min;       // current knob's angle in [deg] and in knob's coordinate (not polar)\n\n        let distance = 0.0;                 // distance from arc center to mouse position\n        let mouse_wheel_direction = 1;      // dependant of the OS\n\n        //---------------------------------------------------------------------\n        // SVG elements, from back to front:\n        let svg_bg = null;           // background disk:\n        let svg_track_bg = null;            // track background; for non zero-centered knobs\n        let svg_track_bg_left = null;       // track background; for zero-centered knobs\n        let svg_track_bg_right = null;      // track background; for zero-centered knobs\n        let svg_track = null;\n        let svg_cursor = null;\n        let svg_divisions = null;\n        let svg_value_text = null;\n        let svg_value_text2 = null;\n\n        //---------------------------------------------------------------------\n        // mouse support\n        let targetRect;\n        let minDeltaY;\n\n        //---------------------------------------------------------------------\n        // true if the current knob value is different from the default value\n        let has_changed = false;    // to spare some getValue() calls when testing if value has changed from default_value\n\n        //---------------------------------------------------------------------\n        // Create the knob:\n\n        init();\n        initValue();\n        draw();\n        attachEventHandlers();\n\n\n        /**\n         * Having a init function allow the knob to be re-configured.\n         */\n        function init() {\n\n            if (trace) console.log(\"init()\");\n\n            if (config.center_zero) {\n                if (!config.center_value) {\n                    config.center_value = getRoundedValue((config.value_max - config.value_min) / 2 + config.value_min);\n                }\n            }\n\n            // At the top of the knob, we leave a gap between the left and right tracks.\n            // 'left_track_end_angle' and 'right_track_start_angle' are the angles that delimit this gap.\n            // Only used if center_zero=true.\n            if (config.linecap === \"butt\") {\n                left_track_end_angle = polarToKnobAngle(Math.acos(-config.center_gap/100.0) * 180.0 / Math.PI);\n                right_track_start_angle = polarToKnobAngle(Math.acos(config.center_gap/100.0) * 180.0 / Math.PI);\n            } else {\n                left_track_end_angle = polarToKnobAngle(Math.acos(-(config.track_width*1.3 + config.center_gap)/100.0) * 180.0 / Math.PI);\n                right_track_start_angle = polarToKnobAngle(Math.acos((config.track_width*1.3 + config.center_gap)/100.0) * 180.0 / Math.PI);\n            }\n\n            // mouse_wheel_direction = _isMacOS() ? -1 : 1; //TODO: really necessary?\n        }\n\n        function initValue() {\n            // set initial value and angle:\n            setValue(config.initial_value ? config.initial_value : config.default_value);\n        }\n\n        /**\n         * Return the value \"rounded\" according to config.value_resolution\n         * @param v value\n         */\n        function getRoundedValue(v) {\n            return config.value_resolution === null ? v : Math.round(v / config.value_resolution) * config.value_resolution;\n        }\n\n        /**\n         *\n         * @param angle [deg] in knob's coordinates\n         * @returns {*}\n         */\n        function getDisplayValue(angle) {\n            if (trace) console.log(\"getDisplayValue\", config.display_raw);\n            let v = getValue(angle);\n            return config.display_raw ? config.format_raw(v) : config.format(v);\n        }\n\n        /**\n         * Trick to adjust the cursor position when the range is odd.\n         */\n        function getCursorCorrection() {\n            let isOdd = n => Math.abs(n % 2) === 1;\n            return isOdd(Math.abs(config.value_max - config.value_min)) ? 0.5 : 0;\n        }\n\n        /**\n         * Get the knob's value determined by the knob's position (angle)\n         * @param a [deg] in knob's coordinates\n         * @returns {number}\n         */\n        function getValue(a) {\n            let p = a === undefined ? angle : a;\n            let v = ((p - config.angle_min) / (config.angle_max - config.angle_min)) * (config.value_max - config.value_min) + config.value_min;\n            return getRoundedValue(v - getCursorCorrection());\n        }\n\n        /**\n         * Set knob's value\n         * @param v\n         */\n        function setValue(v) {\n            if (v < config.value_min) {\n                value = config.value_min;\n            } else if (v > config.value_max) {\n                value = config.value_max;\n            } else {\n                value = v;\n            }\n            setAngle(((v + getCursorCorrection() - config.value_min) / (config.value_max - config.value_min)) * (config.angle_max - config.angle_min) + config.angle_min);\n            if (trace) console.log(`setValue(${v}) angle=` + ((v - config.value_min) / (config.value_max - config.value_min)) * (config.angle_max - config.angle_min) + config.angle_min);\n            return true;\n        }\n\n        /**\n         * Set knob's angle\n         * @param new_angle in [deg]\n         * @param fire_event\n         */\n        function setAngle(new_angle, fire_event) {\n            let prev = angle;\n            let notify = fire_event && (new_angle !== angle);\n            angle = Math.min(Math.max(new_angle, config.angle_min), config.angle_max);\n            if (notify) {\n                // fire the event if the change of angle affect the value:\n                if (getValue(prev) !== getValue()) {\n                    notifyChange();\n                }\n            }\n        }\n\n        /**\n         * Increment (or decrement if the increment is negative) the knob's angle.\n         * @param increment\n         */\n        function incAngle(increment) {\n            setAngle(Math.min(Math.max(angle + increment, config.angle_min), config.angle_max), true);\n        }\n\n        /**\n         * Return polar coordinates angle from our \"knob coordinates\" angle\n         */\n        function knobToPolarAngle(angle) {\n            let a = config.zero_at - angle;\n            if (a < 0) a = a + 360.0;\n            if (trace) console.log(`knobToPolarAngle ${angle} -> ${a}`);\n            return a;\n        }\n\n        /**\n         *\n         * @param angle [deg] with 0 at 3 o'clock\n         * @returns {number}\n         */\n        function polarToKnobAngle(angle) {\n            // \"-\" for changing CCW to CW\n            if (trace) console.log(`polarToKnobAngle ${angle} -> ${(config.zero_at - angle + 360.0) % 360.0}`);\n            return (config.zero_at - angle + 360.0) % 360.0;    // we add 360 to handle negative values down to -360\n        }\n\n        /**\n         * startDrag() must have been called before to init the targetRect variable.\n         */\n        function mouseUpdate(e) {\n\n            // MouseEvent.clientX (standard property: YES)\n            // The clientX read-only property of the MouseEvent interface provides\n            // the horizontal coordinate within the application's client area at which\n            // the event occurred (as opposed to the coordinates within the page).\n            // For example, clicking in the top-left corner of the client area will always\n            // result in a mouse event with a clientX value of 0, regardless of whether\n            // the page is scrolled horizontally. Originally, this property was defined\n            // as a long integer. The CSSOM View Module redefined it as a double float.\n\n            let dxPixels = e.clientX - targetRect.left;\n            let dyPixels = e.clientY - targetRect.top;\n\n            // mouse delta in cartesian coordinate with path center=0,0 and scaled (-1..0..1) relative to path:\n            // <svg> center:       (dx, dy) == ( 0,  0)\n            // <svg> top-left:     (dx, dy) == (-1,  1)\n            // <svg> bottom-right: (dx, dy) == ( 1, -1) (bottom right of the 100x100 viewBox, ignoring the bottom 100x20 for the label)\n            let dx = (dxPixels - arcCenterXPixels) / (targetRect.width / 2);\n            let dy = - (dyPixels - arcCenterYPixels) / (targetRect.width / 2);  // targetRect.width car on a 20px de plus en hauteur pour le label\n\n            if (config.rotation === CCW) dx = - dx;\n\n            // convert to polar coordinates\n            let angle_rad = Math.atan2(dy, dx);\n            if (angle_rad < 0) angle_rad = 2.0*Math.PI + angle_rad;\n\n            if (trace) console.log(`mouseUpdate: position in svg = ${dxPixels}, ${dyPixels} pixels; ${dx.toFixed(3)}, ${dy.toFixed(3)} rel.; angle ${angle_rad.toFixed(3)} rad`);\n\n            setAngle(polarToKnobAngle(angle_rad * 180.0 / Math.PI), true);\n\n            // distance from arc center to mouse position:\n            // distance = Math.sqrt(dx*(HALF_WIDTH/config.track_radius)*dx*(HALF_WIDTH/config.track_radius) + dy*(HALF_HEIGHT/config.track_radius)*dy*(HALF_HEIGHT/config.track_radius));\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function startDrag(e) {\n\n            if (trace) console.log(\"startDrag\");\n\n            e.preventDefault();\n\n            // API: Event.currentTarget\n            //      Identifies the current target for the event, as the event traverses the DOM. It always REFERS TO THE ELEMENT\n            //      TO WHICH THE EVENT HANDLER HAS BEEN ATTACHED, as opposed to event.target which identifies the element on\n            //      which the event occurred.\n            //      https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n\n            // currentTarget = e.currentTarget;\n\n            // API: Element.getBoundingClientRect() (standard: YES)\n            //      The Element.getBoundingClientRect() method returns the size of an element\n            //      and its POSITION RELATIVE TO THE VIEWPORT.\n            //      The amount of scrolling that has been done of the viewport area (or any other\n            //      scrollable element) is taken into account when computing the bounding rectangle.\n            //      This means that the rectangle's boundary edges (top, left, bottom, and right)\n            //      change their values every time the scrolling position changes (because their\n            //      values are relative to the viewport and not absolute).\n            //      https://developer.mozilla.org/en/docs/Web/API/Element/getBoundingClientRect\n\n            // targetRect = currentTarget.getBoundingClientRect(); // currentTarget must be the <svg...> object\n            targetRect = svg_element.getBoundingClientRect();\n\n            // Note: we must take the boundingClientRect of the <svg> and not the <path> because the <path> bounding rect\n            //       is not constant because it encloses the current arc.\n\n            // By design, the arc center is at equal distance from top and left.\n            arcCenterXPixels = targetRect.width / 2;\n            //noinspection JSSuspiciousNameCombination\n            arcCenterYPixels = arcCenterXPixels;\n\n            document.addEventListener(\"mousemove\", handleDrag, false);\n            document.addEventListener(\"mouseup\", endDrag, false);\n\n            mouseUpdate(e);\n            redraw();\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function handleDrag(e) {\n            e.preventDefault();\n            mouseUpdate(e);\n            redraw();\n        }\n\n        /**\n         *\n         */\n        function endDrag() {\n            if (trace) console.log(\"endDrag\");\n            document.removeEventListener(\"mousemove\", handleDrag, false);\n            document.removeEventListener(\"mouseup\", endDrag, false);\n        }\n\n        /**\n         *\n         * @param e\n         * @returns {boolean}\n         */\n        function mouseWheelHandler(e) {\n\n            // WheelEvent\n            // This is the standard wheel event interface to use. Old versions of browsers implemented the two non-standard\n            // and non-cross-browser-compatible MouseWheelEvent and MouseScrollEvent interfaces. Use this interface and avoid\n            // the latter two.\n            // The WheelEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.\n\n            // https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\n            // https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js\n\n            e.preventDefault();\n\n            let dy = e.deltaY;\n\n            if (dy !== 0) {\n                // normalize Y delta\n                if (minDeltaY > Math.abs(dy) || !minDeltaY) {\n                    minDeltaY = Math.abs(dy);\n                }\n            }\n\n            incAngle(dy / minDeltaY * mouse_wheel_direction * config.mouse_wheel_acceleration);\n\n            // TODO: mouse speed detection (https://stackoverflow.com/questions/22593286/detect-measure-scroll-speed)\n\n            redraw();\n\n            return false;\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function startTouch(e) {\n\n            if (trace) console.log(\"startTouch\");\n\n            e.preventDefault(); // necessary to avoid moving all the page\n\n            targetRect = svg_element.getBoundingClientRect();\n\n            // By design, the arc center is at equal distance from top and left.\n            arcCenterXPixels = targetRect.width / 2;\n            //noinspection JSSuspiciousNameCombination\n            arcCenterYPixels = arcCenterXPixels;\n\n            document.addEventListener(\"touchmove\", handleTouch, {passive: false});\n            document.addEventListener(\"touchend\", endTouch);\n\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function handleTouch(e) {\n\n            if (trace) console.log(\"handleTouch\", e.touches);\n\n            e.preventDefault();\n\n            let touchesIndex = e.touches.length - 1;\n\n            let dxPixels = e.touches[touchesIndex].clientX - targetRect.left;\n            let dyPixels = e.touches[touchesIndex].clientY - targetRect.top;\n\n            let dx = (dxPixels - arcCenterXPixels) / (targetRect.width / 2);\n            let dy = - (dyPixels - arcCenterYPixels) / (targetRect.width / 2);  // targetRect.width car on a 20px de plus en hauteur pour le label\n\n            if (config.rotation === CCW) dx = - dx;\n\n            // convert to polar coordinates\n            let angle_rad = Math.atan2(dy, dx);\n            if (angle_rad < 0) angle_rad = 2.0*Math.PI + angle_rad;\n\n            if (trace) console.log(`handleTouch: position in svg = ${dxPixels}, ${dyPixels} pixels; ${dx.toFixed(3)}, ${dy.toFixed(3)} rel.; angle ${angle_rad.toFixed(3)} rad`);\n\n            setAngle(polarToKnobAngle(angle_rad * 180.0 / Math.PI), true);\n\n            redraw();\n\n        }\n\n        /**\n         *\n         */\n        function endTouch() {\n            if (trace) console.log(\"endTouch\");\n            document.removeEventListener(\"touchmove\", handleTouch);\n            document.removeEventListener(\"touchend\", endTouch);\n        }\n\n        /**\n         *\n         */\n        function attachEventHandlers() {\n            if (trace) console.log(\"attach attachEventHandlers\");\n            svg_element.addEventListener(\"mousedown\", function(e) {\n                startDrag(e);\n            });\n            svg_element.addEventListener(\"wheel\", function(e) {\n                mouseWheelHandler(e);\n            });\n            svg_element.addEventListener(\"touchstart\", startTouch, {passive: false});\n        }\n\n        /**\n         *\n         */\n        function notifyChange() {\n            if (trace) console.log(\"knob value has changed\");\n            let value = getValue();     // TODO: cache the value\n            let event = new CustomEvent(\"change\", {\"detail\": value});\n            //svg_element.dispatchEvent(event);\n            elem.dispatchEvent(event);\n            if (config.onchange) {\n                config.onchange(value);\n            }\n        }\n\n        /**\n         * Utility function to configure the mousewheel direction.\n         * @returns {*}\n         * @private\n         */\n        function _isMacOS() {\n            return [\"Macintosh\", \"MacIntel\", \"MacPPC\", \"Mac68K\"].indexOf(window.navigator.platform) !== -1;\n        }\n\n        /**\n         * Return viewBox X,Y coordinates\n         * @param angle in [degree] (polar, 0 at 3 o'clock)\n         * @param radius; defaults to config.radius\n         * @returns {{x: number, y: number}}\n         */\n        function getViewboxCoord(angle, radius) {\n            let a = angle * Math.PI / 180.0;\n            let r = radius === undefined ? config.track_radius : radius;\n            let x = Math.cos(a) * r;\n            let y = Math.sin(a) * r;\n            return {\n                x: config.rotation === CW ? (HALF_WIDTH + x) : (HALF_WIDTH - x),\n                y: HALF_HEIGHT - y\n            }\n        }\n\n        /**\n         *\n         * @param from_angle in [degree] in knob's coordinates\n         * @param to_angle in [degree] in knob's coordinates\n         * @param radius\n         */\n        function getArc(from_angle, to_angle, radius) {\n\n            if (trace) console.group(`getArc(${from_angle}, ${to_angle}, ${radius})`);\n\n            // SVG d: \"A rx,ry xAxisRotate LargeArcFlag,SweepFlag x,y\".\n            // SweepFlag is either 0 or 1, and determines if the arc should be swept in a clockwise (1), or anti-clockwise (0) direction\n            // ref: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d\n\n            let a0 = knobToPolarAngle(from_angle);\n            let a1 = knobToPolarAngle(to_angle);\n\n            // little trick to force a full arc (360deg) when from=0 and to=360\n            if (from_angle !== to_angle) {\n                // with this we make sure that x1 will be different than x0 within the path definition\n                a0 -= 0.0001;\n                a1 += 0.0001;\n            }\n\n            let {x: x0, y: y0} = getViewboxCoord(a0, radius);\n            let {x: x1, y: y1} = getViewboxCoord(a1, radius);\n\n            let delta_angle = (a0 - a1 + 360.0) % 360.0;\n\n            let large_arc = delta_angle < 180.0 ? 0 : 1;\n            let arc_direction = config.rotation === CW ? 1 : 0;\n\n            let p = `M ${x0},${y0} A ${radius},${radius} 0 ${large_arc},${arc_direction} ${x1},${y1}`;\n\n            if (trace) console.groupEnd();\n            if (trace) console.log(\"arc: \" + p);\n\n            return p;\n        }\n\n        /**\n         *\n         * @returns {*}\n         */\n        function getTrackPath() {\n\n            if (trace) console.log(\"getTrackPath()\");\n\n            let p = null;\n\n            if (config.center_zero) {\n\n                if (Array.isArray(config.center_value)) {\n                    // let v = getValue();\n                    // console.log('center value is an array; getValue=', getValue(), typeof v);\n                    if (config.center_value.includes(getValue())) {\n                        if (trace) console.log(\"getTrackPath: center position, track not drawn\");\n                        // track is not drawn when the value is at center\n                        return p;\n                    }\n                } else {\n                    if (getValue() === config.center_value) {\n                        if (trace) console.log(\"getTrackPath: center position, track not drawn\");\n                        // track is not drawn when the value is at center\n                        return p;\n                    }\n                }\n\n                // we assume the split is at 180 [deg] (knob\"s angle)\n                if (angle < 180) {\n                    p = getArc(Math.min(angle, left_track_end_angle), left_track_end_angle, config.track_radius);\n                } else if (angle > 180) {\n                    p = getArc(right_track_start_angle, Math.max(angle, right_track_start_angle), config.track_radius);\n                }\n\n            } else {\n                p = getArc(config.angle_min, angle, config.track_radius);\n            }\n\n            return p;\n        }\n\n        /**\n         *\n         */\n        function draw_background() {\n\n            if (trace) console.log(\"draw_background()\", config.bg);\n\n            if (!config.bg) return;\n\n            // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n\n            //\n            // back disk:\n            //\n            svg_bg = document.createElementNS(NS, \"circle\");\n            svg_bg.setAttributeNS(null, \"cx\", `${HALF_WIDTH}`);\n            svg_bg.setAttributeNS(null, \"cy\", `${HALF_HEIGHT}`);\n            svg_bg.setAttributeNS(null, \"r\", `${config.bg_radius}`);\n            svg_bg.setAttribute(\"fill\", `${config.bg_color}`);\n            svg_bg.setAttribute(\"stroke\", `${config.bg_border_color}`);\n            svg_bg.setAttribute(\"stroke-width\", `${config.bg_border_width}`);\n            svg_bg.setAttribute(\"class\", config.class_bg);\n            svg_element.appendChild(svg_bg);\n        }\n\n        /**\n         *\n         */\n        function draw_markers() {\n\n            if (trace) console.log(\"draw_markers()\", config.markers);\n\n            if (!config.markers) return;\n\n            let p = \"\";\n            let step = (config.angle_max - config.angle_min) / config.markers;\n            for (let a = config.angle_min; a <= config.angle_max; a += step) {\n                let from = getViewboxCoord(knobToPolarAngle(a), config.markers_radius);    // getViewboxCoord(angle, radius)\n                let to = getViewboxCoord(knobToPolarAngle(a), config.markers_radius + config.markers_length);\n                p += `M ${from.x},${from.y} L ${to.x},${to.y} `;\n            }\n\n            svg_divisions = document.createElementNS(NS, \"path\");\n            svg_divisions.setAttributeNS(null, \"d\", p);\n            svg_divisions.setAttribute(\"stroke\", `${config.markers_color}`);\n            svg_divisions.setAttribute(\"stroke-width\", `${config.markers_width}`);\n            svg_divisions.setAttribute(\"stroke-linecap\", config.linecap);\n            svg_divisions.setAttribute(\"class\", config.class_markers);\n            svg_element.appendChild(svg_divisions);\n        }\n\n/*\n        function draw_units() {\n            let pos = getViewboxCoord(angle_min_polar, config.divisions_radius);    // getViewboxCoord(angle, radius)\n            svg_value_text = document.createElementNS(NS, \"text\");\n            svg_value_text.setAttributeNS(null, \"x\", `${pos.x}`);\n            svg_value_text.setAttributeNS(null, \"y\", `${pos.y}`);\n            // svg_value_text.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text.setAttribute(\"cursor\", \"default\");\n            svg_value_text.setAttribute(\"font-family\", config.font_family);\n            svg_value_text.setAttribute(\"font-size\", `10`);\n            // svg_value_text.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text.setAttribute(\"fill\", config.font_color);\n            // svg_value_text.setAttribute(\"class\", config.class_value);\n            // svg_value_text.textContent = getDisplayValue();\n            svg_value_text.textContent = config.value_min.toString();\n            svg_element.appendChild(svg_value_text);\n        }\n*/\n\n        /**\n         *\n         */\n        function draw_track_background() {\n\n            if (trace) console.log(\"draw_track_background()\", config.track_bg);\n\n            // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n\n            if (!config.track_bg) return;\n\n            //\n            // track background:\n            //\n            if (config.center_zero) {\n\n                // left track background\n                svg_track_bg_left = document.createElementNS(NS, \"path\");\n                svg_track_bg_left.setAttributeNS(null, \"d\", getArc(config.angle_min, left_track_end_angle, config.track_bg_radius));\n                svg_track_bg_left.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg_left.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg_left.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg_left.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg_left.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg_left);\n\n                // right track background\n                svg_track_bg_right = document.createElementNS(NS, \"path\");\n                svg_track_bg_right.setAttributeNS(null, \"d\", getArc(right_track_start_angle, config.angle_max, config.track_bg_radius));\n                svg_track_bg_right.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg_right.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg_right.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg_right.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg_right.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg_right);\n\n            } else {\n\n                svg_track_bg = document.createElementNS(NS, \"path\");\n                svg_track_bg.setAttributeNS(null, \"d\", getArc(config.angle_min, config.angle_max, config.track_bg_radius));\n                svg_track_bg.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg);\n\n            }\n        }\n\n        /**\n         *\n         */\n        function draw_track() {\n\n            if (trace) console.log(\"draw_track()\", config.track);\n\n            if (!config.track) return;\n            let p = getTrackPath();\n            if (p) {\n                svg_track = document.createElementNS(NS, \"path\");\n                svg_track.setAttributeNS(null, \"d\", p);\n                svg_track.setAttribute(\"stroke\", `${config.track_color_init}`);\n                svg_track.setAttribute(\"stroke-width\", `${config.track_width}`);\n                svg_track.setAttribute(\"fill\", \"transparent\");\n                svg_track.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track.setAttribute(\"class\", config.class_track);\n                svg_element.appendChild(svg_track);\n            }\n        }\n\n        /**\n         *\n         * @returns {string}\n         */\n        function getTrackCursor() {\n            let a = knobToPolarAngle(angle);\n            let from = getViewboxCoord(a, config.cursor_radius);\n            let to = getViewboxCoord(a, config.cursor_radius + config.cursor_length);\n            return `M ${from.x},${from.y} L ${to.x},${to.y}`;\n        }\n\n        /**\n         *\n         */\n        function draw_cursor() {\n\n            if (trace) console.log(\"draw_cursor()\", config.cursor);\n\n            if (!config.cursor) return;\n\n            let p = getTrackCursor();\n            if (p) {\n                svg_cursor = document.createElementNS(NS, \"path\");\n                svg_cursor.setAttributeNS(null, \"d\", p);\n                svg_cursor.setAttribute(\"stroke\", `${config.cursor_color_init}`);\n                svg_cursor.setAttribute(\"stroke-width\", `${config.cursor_width}`);\n                svg_cursor.setAttribute(\"fill\", \"transparent\");\n                svg_cursor.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_cursor.setAttribute(\"class\", config.class_cursor);\n                svg_element.appendChild(svg_cursor);\n            }\n        }\n\n        function getFontSize(text, multiline=false) {\n            if (typeof text !== \"string\") return config.font_size;\n            const f = 22;   // empiric value\n            let m = Math.min(f, text.length);\n            if (multiline) {\n                return config.font_size * Math.min(0.75, Math.max(((f - m) / f), 0.25));\n            } else {\n                return config.font_size * Math.max(((f - m) / f), 0.25);\n            }\n\n        }\n\n        function draw_value_line1(text, multiline=false) {\n            if (trace) console.log(\"draw_value_line1\", text);\n            svg_value_text = document.createElementNS(NS, \"text\");\n            svg_value_text.setAttributeNS(null, \"x\", `${HALF_WIDTH}`);\n            svg_value_text.setAttributeNS(null, \"y\", `${config.value_position}`);\n            svg_value_text.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text.setAttribute(\"cursor\", \"default\");\n            svg_value_text.setAttribute(\"font-family\", config.font_family);\n            svg_value_text.setAttribute(\"font-size\", `${getFontSize(text, multiline)}`);\n            svg_value_text.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text.setAttribute(\"fill\", config.font_color);\n            svg_value_text.setAttribute(\"class\", config.class_value);\n            svg_value_text.textContent = text;\n            svg_element.appendChild(svg_value_text);\n        }\n\n        function draw_value_line2(text) {\n            if (trace) console.log(\"draw_value_line2\", text);\n            svg_value_text2 = document.createElementNS(NS, \"text\");\n            svg_value_text2.setAttributeNS(null, \"x\", `${HALF_WIDTH}`);\n            svg_value_text2.setAttributeNS(null, \"y\", `${config.value_position + 4}`);\n            svg_value_text2.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text2.setAttribute(\"cursor\", \"default\");\n            svg_value_text2.setAttribute(\"font-family\", config.font_family);\n            svg_value_text2.setAttribute(\"font-size\", `${getFontSize(text, true)}`);\n            svg_value_text2.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text2.setAttribute(\"fill\", config.font_color);\n            svg_value_text2.setAttribute(\"class\", config.class_value);\n            svg_value_text2.textContent = text;\n            svg_element.appendChild(svg_value_text2);\n\n        }\n\n        /**\n         *\n         */\n        function draw_value() {\n\n            if (trace) console.log(\"draw_value\", config.value_text);\n\n            if (!config.value_text) return;\n\n            const t = getDisplayValue();\n\n            if (typeof t === \"number\" || t.indexOf(\"\\n\") <= 0) {\n\n                if (trace) console.log(\"single line\");\n                draw_value_line1(t)\n\n            } else {\n                const lines = t.split(\"\\n\");\n                if (trace) console.log(\"two lines\", lines);\n\n                draw_value_line1(lines[0], true);\n                draw_value_line2(lines[1]);\n            }\n\n        }\n\n        function update_value() {\n\n            if (trace) console.log(\"update_value\", config.value_text);\n\n            if (!config.value_text) return;\n\n            const t = getDisplayValue();\n\n            if (typeof t === \"number\" || t.indexOf(\"\\n\") <= 0) {\n                // single line:\n\n                if (trace) console.log(\"single line\");\n\n                if (svg_value_text) {\n                    svg_value_text.setAttributeNS(null, \"y\", `${config.value_position}`);\n                    svg_value_text.setAttribute(\"font-size\", `${getFontSize(t)}`);\n                    svg_value_text.textContent = t;\n                }\n\n                if (svg_value_text2) {\n                    svg_element.removeChild(svg_value_text2);\n                    svg_value_text2 = null;\n                }\n\n            } else {\n                // two lines:\n\n                const lines = t.split(\"\\n\");\n                if (trace) console.log(\"two lines\", t, lines);\n\n                if (svg_value_text) {\n                    svg_value_text.setAttributeNS(null, \"y\", `${config.value_position - 12}`);\n                    svg_value_text.setAttribute(\"font-size\", `${getFontSize(lines[0], true)}`);\n                    svg_value_text.textContent = lines[0];\n                }\n\n                if (svg_value_text2) {\n                    svg_value_text2.setAttributeNS(null, \"y\", `${config.value_position + 4}`);\n                    svg_value_text2.setAttribute(\"font-size\", `${getFontSize(lines[1], true)}`);\n                    svg_value_text2.textContent = lines[1];\n                } else {\n                    draw_value_line2(lines[1]);\n                }\n            }\n\n        }\n\n        /**\n         *\n         */\n        function draw() {\n\n            if (trace) console.log(\"draw()\", config);\n\n            draw_background();\n            draw_track_background();\n            draw_markers();\n            // draw_units();\n            draw_track();\n            draw_cursor();\n            draw_value();\n        }\n\n        /**\n         *\n         */\n        function redraw() {\n\n            if (trace) console.log(\"redraw()\", config);\n\n            let p = getTrackPath();\n            if (p) {\n                if (svg_track) {\n                    if (trace) console.log(\"redraw track already exist, update d\");\n                    svg_track.setAttributeNS(null, \"d\", p);\n                } else {\n                    if (trace) console.log(\"redraw draw_track\");\n                    draw_track();\n                }\n            } else {\n                if (svg_track) {\n                    if (trace) console.log(\"redraw track already exist, hide it\");\n                    svg_track.setAttributeNS(null, \"d\", \"\");    // we hide the track\n                }\n            }\n\n            if (!has_changed) {\n                has_changed = getValue() !== config.default_value;\n                if (has_changed) {\n                    if (svg_track) {\n                        svg_track.setAttribute(\"stroke\", `${config.track_color}`);\n                    }\n                }\n            }\n\n            if (svg_cursor) {\n                p = getTrackCursor();\n                if (p) {\n                    if (trace) console.log(\"redraw cursor\");\n                    svg_cursor.setAttributeNS(null, \"d\", p);\n                    if (has_changed) {\n                        svg_cursor.setAttribute(\"stroke\", `${config.cursor_color}`);\n                    }\n                }\n            }\n\n            if (svg_value_text) {\n                if (trace) console.log(\"redraw svg_value_text\");\n                // svg_value_text.textContent = getDisplayValue();\n                update_value();\n            }\n        }\n\n        /**\n         *\n         */\n        return {\n            set value(v) {\n                // console.group(\"value setter\");\n                setValue(v);\n                redraw();\n                // console.groupEnd();\n            },\n            set config(new_config) {\n                // console.group(\"config setter\");\n                config = Object.assign({}, defaults, config, new_config);\n                init();\n                redraw();\n                // console.groupEnd();\n            },\n            setConfigValue: function(attribute, value) {\n                // console.group(\"setConfigValue\");\n                config[attribute] = value;\n                init();\n                redraw();\n                // console.groupEnd();\n            },\n            initValue,\n            enableDebug: function() {\n                trace = true;\n            },\n            disableDebug: function() {\n                trace = false;\n            }\n        };\n\n    }\n"],"names":["light","bg_color","bg_border_color","track_bg_color","track_color_init","track_color","cursor_color_init","cursor_color","markers_color","font_color","light2","dark","elem","conf","svg_element","trace","NS","CW","CCW","HALF_WIDTH","HALF_HEIGHT","String","document","querySelector","nodeName","toLowerCase","createElementNS","appendChild","viewbox_height","defaults","label","rotation","default_value","initial_value","value_min","value_max","value_resolution","center_zero","center_value","center_gap","zero_at","angle_min","angle_max","bg_radius","bg_border_width","track_bg_radius","track_bg_width","track_radius","track_width","cursor_radius","cursor_length","cursor_width","palette","bg","track_bg","track","cursor","linecap","value_text","value_position","font_family","font_size","display_raw","format_raw","v","Math","round","format","font_weight","markers","markers_radius","markers_length","markers_width","class_bg","class_track_bg","class_track","class_value","class_cursor","class_markers","snap_to_steps","mouse_wheel_acceleration","onchange","data_config","JSON","parse","dataset","config","c","Object","assign","palettes","setAttributeNS","targetRect","minDeltaY","arcCenterXPixels","arcCenterYPixels","left_track_end_angle","right_track_start_angle","angle","svg_bg","svg_track_bg","svg_track_bg_left","svg_track_bg_right","svg_track","svg_cursor","svg_divisions","svg_value_text","svg_value_text2","has_changed","init","console","log","getRoundedValue","polarToKnobAngle","acos","PI","initValue","setValue","getDisplayValue","getValue","getCursorCorrection","n","abs","a","undefined","setAngle","new_angle","fire_event","prev","notify","min","max","value","event","CustomEvent","dispatchEvent","notifyChange","knobToPolarAngle","mouseUpdate","e","dxPixels","clientX","left","dyPixels","clientY","top","dx","width","dy","angle_rad","atan2","toFixed","handleDrag","preventDefault","redraw","endDrag","removeEventListener","handleTouch","touches","touchesIndex","length","endTouch","getViewboxCoord","radius","r","x","cos","y","sin","getArc","from_angle","to_angle","group","a0","a1","p","x0","y0","groupEnd","getTrackPath","Array","isArray","includes","draw_track","setAttribute","getTrackCursor","from","to","getFontSize","text","multiline","m","draw_value_line1","textContent","draw_value_line2","t","indexOf","removeChild","lines","split","update_value","step","draw_markers","draw_cursor","draw_value","addEventListener","getBoundingClientRect","startDrag","deltaY","mouseWheelHandler","passive","new_config","setConfigValue","attribute","enableDebug","disableDebug"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.mjs","sources":["../src/palettes.js","../src/index.js"],"sourcesContent":["\"use strict\";\n\n//TODO: make _init attributes optional\n\nexport default {\n    light : {\n        bg_color: \"#E0E0E0\",\n        bg_border_color: \"#BDBDBD\",\n        track_bg_color: \"#CFD8DC\",\n        track_color_init: \"#64B5F6\",\n        track_color: \"#42A5F5\",\n        cursor_color_init: \"#64B5F6\",\n        cursor_color: \"#42A5F5\",\n        markers_color: \"#9E9E9E\",\n        font_color: \"#424242\",\n    },\n    light2 : {\n        bg_color: \"#B1DAEE\",\n        bg_border_color: \"#569DC0\",\n        track_bg_color: \"#B1DAEE\",\n        track_color_init: \"#569DC0\",\n        track_color: \"#1D6D93\",\n        cursor_color_init: \"#569DC0\",\n        cursor_color: \"#1D6D93\",\n        markers_color: \"#3680A4\",\n        font_color: \"#1D6D93\",\n    },\n    dark: {\n        bg_color: \"#000000\",\n        bg_border_color: \"#569DC0\",\n        track_bg_color: \"#424242\",\n        track_color_init: \"#FDD835\",\n        track_color: \"#FFEC00\",\n        cursor_color_init: \"#569DC0\",\n        cursor_color: \"#FDD835\",\n        markers_color: \"#3680A4\",\n        font_color: \"#FFEA00\",\n    }\n}\n","\n    \"use strict\";\n\n    import palettes from \"./palettes.js\";\n\n    // FIXME: remove console usage for IE compatibility\n\n    /**\n     *\n     * @param elem DIV or SVN element\n     * @param conf optional config\n     * @returns {{value, config}}\n     */\n    export default function(elem, conf = {}) {\n\n        // Like a real knob, it's the knob's position that determines the knob's value.\n        // Therefore, the value is computed from the knob's position (angle).\n        // However, the user has the possibility to directly set the value and in that case\n        // the knob's position (angle) will be computed from the value and the knob redrawn\n        // accordingly.\n\n        //\n        // All angles in method parameters are in [degrees] (except for polarToKnobAngle() and getViewboxCoord()).\n        //\n        // By default:\n        // - knob direction is CLOCKWISE\n        // - start position is 6 o'clock (bottom)\n        // - knob angle is:\n        //       0 [deg] angle is a   6 o'clock (bottom)\n        //      90 [deg] angle is at  9 o'clock (left)\n        //     180 [deg] angle is at 12 o'clock (top)\n        //     270 [deg] angle is at  3 o'clock (right)\n        //\n        // Trigonometric functions (sin, cos, ...) operate in polar coordinates,\n        // with 0 angle at 3 o'clock and a counter-clockwise direction.\n        // To convert from \"knob angle\" to \"polar angle\":\n        //\n        //     knob    polar\n        // --------------------\n        //        0      270\n        //       30      240\n        //       90      180\n        //      180       90\n        //      270        0\n        //      330      -60 (add 360 to get a positive equivalent value: -60 + 360 = 300)\n        //\n        // Formula: polar-angle = 270 - knob-angle\n        //\n\n        if (!elem) {\n            throw \"You must pass a DOM node reference to the Knob constructor\";\n        }\n\n        let trace = false;    // when true, will log more details in the console; use enableDebug(), disableDebug() to change\n\n        // It is faster to access a property than to access a variable...\n        // See https://jsperf.com/vars-vs-props-speed-comparison/1\n\n        const NS = \"http://www.w3.org/2000/svg\";\n        const CW = true;    // clock-wise\n        const CCW = !CW;    // counter clock-wise\n\n        //---------------------------------------------------------------------\n        // To simplify the internal coordinates transformations, we set the view box as a 100 by 100 square.\n        // But, if a label is present, then we add 20 to the height (at the bottom) as a placeholder for the label.\n        // In summary:\n        // - 0,0..99,99: the knob itself\n        // - 0,100..99,119: the label, if any\n        const VIEWBOX_WIDTH = 100;\n        const VIEWBOX_HEIGHT = config.with_label ? 120 : 100;\n        const HALF_WIDTH = 50;      // viewBox/2\n        const HALF_HEIGHT = 50;     // viewBox/2\n\n        let svg_element;\n\n        let centerX = HALF_WIDTH;\n        let centerY = HALF_HEIGHT;\n\n        let vbWidth = VIEWBOX_WIDTH;\n\n        // need to insert in into SVG element\n        if (typeof elem === \"string\" || elem instanceof String) {\n            elem = document.querySelector(elem);\n        }\n\n        let nodeType = elem.nodeName.toLowerCase();\n\n        if (nodeType === \"g\") {\n            svg_element = elem;\n            let bbox = svg_element.getBBox();\n\n            centerX = bbox.x + bbox.width * 0.5;\n            centerY = bbox.y + bbox.height * 0.5;\n\n            vbWidth = bbox.width;\n        } else if (nodeType === \"div\") {\n            svg_element = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n            elem.appendChild(svg_element);\n        } else {\n            throw \"Unsupported element type for creating knob, should be a div or an SVG g element!\";\n        }\n\n        // For the user convenience, the label can be set with the \"data-label\" attribute.\n        // If another label is set in data-config then this later definition will override data-label.\n        // let default_label = svg_element.dataset.label !== undefined ? svg_element.dataset.label : \"\";\n        let label = elem.dataset.label !== undefined ? elem.dataset.label : false;\n\n        let defaults = {\n\n            // User configurable properties. The colors are defined in the 'palettes', later on.\n\n            // No camelCase because we want to be able to have the same name in data- attributes.\n\n            label: false,\n\n            rotation: CW,\n\n            default_value: 0,\n            initial_value: 0,\n            value_min: 0.0,\n            value_max: 100.0,\n            value_resolution: 1,        // null means ignore\n\n            // split knob:\n            center_zero: false,\n            center_value: null,         // if null, the value will be computed from the min and max in the init() method\n            center_gap: 4,              // only used when center_zero=true; is the width of the gap between the left and right track around the zero value.\n\n            // position:\n            zero_at: 270.0,             // [deg] (polar) the 0 degree will be at 270 polar degrees (6 o'clock).\n            angle_min: 30.0,            // [deg] Angle in knob coordinates (0 at 6 0'clock)\n            angle_max: 330.0,           // [deg] Angle in knob coordinates (0 at 6 0'clock)\n\n            // background disk:\n            bg_radius: 32,\n            bg_border_width: 1,\n\n            // track background:\n            track_bg_radius: 40,\n            track_bg_width: 8,\n\n            // track:\n            track_radius: 40,\n            track_width: 8,\n\n            // cursor\n            cursor_radius: 18,          // same unit as radius\n            cursor_length: 10,\n            cursor_width: 4,\n\n            // appearance:\n            palette: \"light\",\n            bg: false,\n            track_bg: true,\n            track: true,\n            cursor: false,\n            // CSS class names\n            linecap: \"butt\",                   // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n\n            // text displayed in the middle of the knob:\n            value_text: true,\n            value_position: HALF_HEIGHT + 8,    // empirical value: HALF_HEIGHT + config.font_size / 3\n            font_family: \"sans-serif\",\n            font_size: 25,\n\n            // callback to get the text to display from the current value\n            display_raw: false,                 // if true, format callback is ignored\n            format_raw: v => Math.round(v),\n            format: v => v,                     // formatting of the displayed value\n            // off_text: null,                     // text to display when raw_value = min\n            // out_of_range_text: null,            // text to display when raw_value is out of range\n\n            font_weight: \"bold\",\n            markers: 0,                         // number of markers; 0 or false to disable\n            markers_radius: 40,\n            markers_length: 8,\n            markers_width: 2,\n\n            class_bg: \"knob-bg\",\n            class_track_bg : \"knob-track-bg\",\n            class_track : \"knob-track\",\n            class_value : \"knob-value\",\n            class_cursor : \"knob-cursor\",\n            class_markers: \"knob-markers\",\n\n            snap_to_steps: false,       // TODO\n\n            // mouse wheel support:\n            mouse_wheel_acceleration: 1,\n\n            onchange: null              // callback function\n        };\n\n        //---------------------------------------------------------------------\n        // Consolidate all configs:\n\n        let data_config = JSON.parse(elem.dataset.config || \"{}\");\n        let c = Object.assign({}, defaults, palettes[defaults.palette], conf, data_config);\n        // we re-assign conf and data_config for the case they override some of the palette colors.\n        let config = Object.assign(c, palettes[c.palette], conf, data_config);\n\n        //---------------------------------------------------------------------\n        // Terminates the SVG element setup:\n\n        // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n        svg_element.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n\n        if (vbWidth === VIEWBOX_WIDTH) {\n            let viewbox_height;\n            if (config.label || (config.value_position >= (vbWidth - (config.font_size / 2)))) {\n                // make some room for the label or the value that we want to display below the knob\n                viewbox_height = 120;\n            } else {\n                viewbox_height = 100;\n            }\n            svg_element.setAttributeNS(null, \"viewBox\", `0 0 ${VIEWBOX_WIDTH} ${viewbox_height}`);\n        }\n\n        // Center of arc in knob coordinates and in ViewPort\"s pixels relative to the <svg> ClientBoundingRect.\n        let arcCenterXPixels = 0;\n        let arcCenterYPixels = 0; // equal to arcCenterXPixels because the knob is a circle\n\n        //---------------------------------------------------------------------\n        // Pre-computed values to speed-up operations:\n\n        // At the top of the knob, we leave a gap between the left and right tracks.\n        // These are angles that delimit this gap:\n        let left_track_end_angle = 0;     // angle in [degrees]\n        let right_track_start_angle = 0;  // angle in [degrees]\n\n        //---------------------------------------------------------------------\n        // internals\n\n        let value = 0.0;                    // current knob's value [value_min..value_max]\n        let angle = config.angle_min;       // current knob's angle in [deg] and in knob's coordinate (not polar)\n\n        let distance = 0.0;                 // distance from arc center to mouse position\n        let mouse_wheel_direction = 1;      // dependant of the OS\n\n        //---------------------------------------------------------------------\n        // SVG elements, from back to front:\n        let svg_bg = null;           // background disk:\n        let svg_track_bg = null;            // track background; for non zero-centered knobs\n        let svg_track_bg_left = null;       // track background; for zero-centered knobs\n        let svg_track_bg_right = null;      // track background; for zero-centered knobs\n        let svg_track = null;\n        let svg_cursor = null;\n        let svg_divisions = null;\n        let svg_value_text = null;\n        let svg_value_text2 = null;\n\n        //---------------------------------------------------------------------\n        // mouse support\n        let targetRect;\n        let minDeltaY;\n\n        //---------------------------------------------------------------------\n        // true if the current knob value is different from the default value\n        let has_changed = false;    // to spare some getValue() calls when testing if value has changed from default_value\n\n        //---------------------------------------------------------------------\n        // Create the knob:\n\n        init();\n        initValue();\n        draw();\n        attachEventHandlers();\n\n\n        /**\n         * Having a init function allow the knob to be re-configured.\n         */\n        function init() {\n\n            if (trace) console.log(\"init()\");\n\n            if (config.center_zero) {\n                if (!config.center_value) {\n                    config.center_value = getRoundedValue((config.value_max - config.value_min) / 2 + config.value_min);\n                }\n            }\n\n            // At the top of the knob, we leave a gap between the left and right tracks.\n            // 'left_track_end_angle' and 'right_track_start_angle' are the angles that delimit this gap.\n            // Only used if center_zero=true.\n            if (config.linecap === \"butt\") {\n                left_track_end_angle = polarToKnobAngle(Math.acos(-config.center_gap/100.0) * 180.0 / Math.PI);\n                right_track_start_angle = polarToKnobAngle(Math.acos(config.center_gap/100.0) * 180.0 / Math.PI);\n            } else {\n                left_track_end_angle = polarToKnobAngle(Math.acos(-(config.track_width*1.3 + config.center_gap)/100.0) * 180.0 / Math.PI);\n                right_track_start_angle = polarToKnobAngle(Math.acos((config.track_width*1.3 + config.center_gap)/100.0) * 180.0 / Math.PI);\n            }\n\n            // mouse_wheel_direction = _isMacOS() ? -1 : 1; //TODO: really necessary?\n        }\n\n        function initValue() {\n            // set initial value and angle:\n            setValue(config.initial_value ? config.initial_value : config.default_value);\n        }\n\n        /**\n         * Return the value \"rounded\" according to config.value_resolution\n         * @param v value\n         */\n        function getRoundedValue(v) {\n            return config.value_resolution === null ? v : Math.round(v / config.value_resolution) * config.value_resolution;\n        }\n\n        /**\n         *\n         * @param angle [deg] in knob's coordinates\n         * @returns {*}\n         */\n        function getDisplayValue(angle) {\n            if (trace) console.log(\"getDisplayValue\", config.display_raw);\n            let v = getValue(angle);\n            return config.display_raw ? config.format_raw(v) : config.format(v);\n        }\n\n        /**\n         * Trick to adjust the cursor position when the range is odd.\n         */\n        function getCursorCorrection() {\n            let isOdd = n => Math.abs(n % 2) === 1;\n            return isOdd(Math.abs(config.value_max - config.value_min)) ? 0.5 : 0;\n        }\n\n        /**\n         * Get the knob's value determined by the knob's position (angle)\n         * @param a [deg] in knob's coordinates\n         * @returns {number}\n         */\n        function getValue(a) {\n            let p = a === undefined ? angle : a;\n            let v = ((p - config.angle_min) / (config.angle_max - config.angle_min)) * (config.value_max - config.value_min) + config.value_min;\n            return getRoundedValue(v - getCursorCorrection());\n        }\n\n        /**\n         * Set knob's value\n         * @param v\n         */\n        function setValue(v) {\n            if (v < config.value_min) {\n                value = config.value_min;\n            } else if (v > config.value_max) {\n                value = config.value_max;\n            } else {\n                value = v;\n            }\n            setAngle(((v + getCursorCorrection() - config.value_min) / (config.value_max - config.value_min)) * (config.angle_max - config.angle_min) + config.angle_min);\n            if (trace) console.log(`setValue(${v}) angle=` + ((v - config.value_min) / (config.value_max - config.value_min)) * (config.angle_max - config.angle_min) + config.angle_min);\n            return true;\n        }\n\n        /**\n         * Set knob's angle\n         * @param new_angle in [deg]\n         * @param fire_event\n         */\n        function setAngle(new_angle, fire_event) {\n            let prev = angle;\n            let notify = fire_event && (new_angle !== angle);\n            angle = Math.min(Math.max(new_angle, config.angle_min), config.angle_max);\n            if (notify) {\n                // fire the event if the change of angle affect the value:\n                if (getValue(prev) !== getValue()) {\n                    notifyChange();\n                }\n            }\n        }\n\n        /**\n         * Increment (or decrement if the increment is negative) the knob's angle.\n         * @param increment\n         */\n        function incAngle(increment) {\n            setAngle(Math.min(Math.max(angle + increment, config.angle_min), config.angle_max), true);\n        }\n\n        /**\n         * Return polar coordinates angle from our \"knob coordinates\" angle\n         */\n        function knobToPolarAngle(angle) {\n            let a = config.zero_at - angle;\n            if (a < 0) a = a + 360.0;\n            if (trace) console.log(`knobToPolarAngle ${angle} -> ${a}`);\n            return a;\n        }\n\n        /**\n         *\n         * @param angle [deg] with 0 at 3 o'clock\n         * @returns {number}\n         */\n        function polarToKnobAngle(angle) {\n            // \"-\" for changing CCW to CW\n            if (trace) console.log(`polarToKnobAngle ${angle} -> ${(config.zero_at - angle + 360.0) % 360.0}`);\n            return (config.zero_at - angle + 360.0) % 360.0;    // we add 360 to handle negative values down to -360\n        }\n\n        /**\n         * startDrag() must have been called before to init the targetRect variable.\n         */\n        function mouseUpdate(e) {\n\n            // MouseEvent.clientX (standard property: YES)\n            // The clientX read-only property of the MouseEvent interface provides\n            // the horizontal coordinate within the application's client area at which\n            // the event occurred (as opposed to the coordinates within the page).\n            // For example, clicking in the top-left corner of the client area will always\n            // result in a mouse event with a clientX value of 0, regardless of whether\n            // the page is scrolled horizontally. Originally, this property was defined\n            // as a long integer. The CSSOM View Module redefined it as a double float.\n\n            let dxPixels = e.clientX - targetRect.left;\n            let dyPixels = e.clientY - targetRect.top;\n\n            // mouse delta in cartesian coordinate with path center=0,0 and scaled (-1..0..1) relative to path:\n            // <svg> center:       (dx, dy) == ( 0,  0)\n            // <svg> top-left:     (dx, dy) == (-1,  1)\n            // <svg> bottom-right: (dx, dy) == ( 1, -1) (bottom right of the 100x100 viewBox, ignoring the bottom 100x20 for the label)\n            let dx = (dxPixels - arcCenterXPixels) / (targetRect.width / 2 );\n            let dy = - (dyPixels - arcCenterYPixels) / (targetRect.width / 2);  // targetRect.width car on a 20px de plus en hauteur\n            // pour le label\n\n            if (config.rotation === CCW) dx = - dx;\n\n            // convert to polar coordinates\n            let angle_rad = Math.atan2(dy, dx);\n            if (angle_rad < 0) angle_rad = 2.0*Math.PI + angle_rad;\n\n            if (trace) console.log(`mouseUpdate: position in svg = ${dxPixels}, ${dyPixels} pixels; ${dx.toFixed(3)}, ${dy.toFixed(3)} rel.; angle ${angle_rad.toFixed(3)} rad`);\n\n            setAngle(polarToKnobAngle(angle_rad * 180.0 / Math.PI), true);\n\n            // distance from arc center to mouse position:\n            // distance = Math.sqrt(dx*(HALF_WIDTH/config.track_radius)*dx*(HALF_WIDTH/config.track_radius) + dy*(HALF_HEIGHT/config.track_radius)*dy*(HALF_HEIGHT/config.track_radius));\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function startDrag(e) {\n\n            if (trace) console.log(\"startDrag\");\n\n            e.preventDefault();\n\n            // API: Event.currentTarget\n            //      Identifies the current target for the event, as the event traverses the DOM. It always REFERS TO THE ELEMENT\n            //      TO WHICH THE EVENT HANDLER HAS BEEN ATTACHED, as opposed to event.target which identifies the element on\n            //      which the event occurred.\n            //      https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n\n            // currentTarget = e.currentTarget;\n\n            // API: Element.getBoundingClientRect() (standard: YES)\n            //      The Element.getBoundingClientRect() method returns the size of an element\n            //      and its POSITION RELATIVE TO THE VIEWPORT.\n            //      The amount of scrolling that has been done of the viewport area (or any other\n            //      scrollable element) is taken into account when computing the bounding rectangle.\n            //      This means that the rectangle's boundary edges (top, left, bottom, and right)\n            //      change their values every time the scrolling position changes (because their\n            //      values are relative to the viewport and not absolute).\n            //      https://developer.mozilla.org/en/docs/Web/API/Element/getBoundingClientRect\n\n            // targetRect = currentTarget.getBoundingClientRect(); // currentTarget must be the <svg...> object\n            targetRect = svg_element.getBoundingClientRect();\n\n            // Note: we must take the boundingClientRect of the <svg> and not the <path> because the <path> bounding rect\n            //       is not constant because it encloses the current arc.\n\n            // By design, the arc center is at equal distance from top and left.\n            arcCenterXPixels = targetRect.width / 2;\n            //noinspection JSSuspiciousNameCombination\n            arcCenterYPixels = arcCenterXPixels;\n\n            document.addEventListener(\"mousemove\", handleDrag, false);\n            document.addEventListener(\"mouseup\", endDrag, false);\n\n            mouseUpdate(e);\n            redraw();\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function handleDrag(e) {\n            e.preventDefault();\n            mouseUpdate(e);\n            redraw();\n        }\n\n        /**\n         *\n         */\n        function endDrag() {\n            if (trace) console.log(\"endDrag\");\n            document.removeEventListener(\"mousemove\", handleDrag, false);\n            document.removeEventListener(\"mouseup\", endDrag, false);\n        }\n\n        /**\n         *\n         * @param e\n         * @returns {boolean}\n         */\n        function mouseWheelHandler(e) {\n\n            // WheelEvent\n            // This is the standard wheel event interface to use. Old versions of browsers implemented the two non-standard\n            // and non-cross-browser-compatible MouseWheelEvent and MouseScrollEvent interfaces. Use this interface and avoid\n            // the latter two.\n            // The WheelEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.\n\n            // https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\n            // https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js\n\n            e.preventDefault();\n\n            let dy = e.deltaY;\n\n            if (dy !== 0) {\n                // normalize Y delta\n                if (minDeltaY > Math.abs(dy) || !minDeltaY) {\n                    minDeltaY = Math.abs(dy);\n                }\n            }\n\n            incAngle(dy / minDeltaY * mouse_wheel_direction * config.mouse_wheel_acceleration);\n\n            // TODO: mouse speed detection (https://stackoverflow.com/questions/22593286/detect-measure-scroll-speed)\n\n            redraw();\n\n            return false;\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function startTouch(e) {\n\n            if (trace) console.log(\"startTouch\");\n\n            e.preventDefault(); // necessary to avoid moving all the page\n\n            targetRect = svg_element.getBoundingClientRect();\n\n            // By design, the arc center is at equal distance from top and left.\n            arcCenterXPixels = targetRect.width / 2;\n            //noinspection JSSuspiciousNameCombination\n            arcCenterYPixels = arcCenterXPixels;\n\n            document.addEventListener(\"touchmove\", handleTouch, {passive: false});\n            document.addEventListener(\"touchend\", endTouch);\n\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function handleTouch(e) {\n\n            if (trace) console.log(\"handleTouch\", e.touches);\n\n            e.preventDefault();\n\n            let touchesIndex = e.touches.length - 1;\n\n            let dxPixels = e.touches[touchesIndex].clientX - targetRect.left;\n            let dyPixels = e.touches[touchesIndex].clientY - targetRect.top;\n\n            let dx = (dxPixels - arcCenterXPixels) / (targetRect.width / 2);\n            let dy = - (dyPixels - arcCenterYPixels) / (targetRect.width / 2);  // targetRect.width car on a 20px de plus en hauteur pour le label\n\n            if (config.rotation === CCW) dx = - dx;\n\n            // convert to polar coordinates\n            let angle_rad = Math.atan2(dy, dx);\n            if (angle_rad < 0) angle_rad = 2.0*Math.PI + angle_rad;\n\n            if (trace) console.log(`handleTouch: position in svg = ${dxPixels}, ${dyPixels} pixels; ${dx.toFixed(3)}, ${dy.toFixed(3)} rel.; angle ${angle_rad.toFixed(3)} rad`);\n\n            setAngle(polarToKnobAngle(angle_rad * 180.0 / Math.PI), true);\n\n            redraw();\n\n        }\n\n        /**\n         *\n         */\n        function endTouch() {\n            if (trace) console.log(\"endTouch\");\n            document.removeEventListener(\"touchmove\", handleTouch);\n            document.removeEventListener(\"touchend\", endTouch);\n        }\n\n        /**\n         *\n         */\n        function attachEventHandlers() {\n            if (trace) console.log(\"attach attachEventHandlers\");\n            svg_element.addEventListener(\"mousedown\", function(e) {\n                startDrag(e);\n            });\n            svg_element.addEventListener(\"wheel\", function(e) {\n                mouseWheelHandler(e);\n            });\n            svg_element.addEventListener(\"touchstart\", startTouch, {passive: false});\n        }\n\n        /**\n         *\n         */\n        function notifyChange() {\n            if (trace) console.log(\"knob value has changed\");\n            let value = getValue();     // TODO: cache the value\n            let event = new CustomEvent(\"change\", {\"detail\": value});\n            //svg_element.dispatchEvent(event);\n            elem.dispatchEvent(event);\n            if (config.onchange) {\n                config.onchange(value);\n            }\n        }\n\n        /**\n         * Utility function to configure the mousewheel direction.\n         * @returns {*}\n         * @private\n         */\n        function _isMacOS() {\n            return [\"Macintosh\", \"MacIntel\", \"MacPPC\", \"Mac68K\"].indexOf(window.navigator.platform) !== -1;\n        }\n\n        /**\n         * Return viewBox X,Y coordinates\n         * @param angle in [degree] (polar, 0 at 3 o'clock)\n         * @param radius; defaults to config.radius\n         * @returns {{x: number, y: number}}\n         */\n        function getViewboxCoord(angle, radius) {\n            let a = angle * Math.PI / 180.0;\n            let r = radius === undefined ? config.track_radius : radius;\n            let x = Math.cos(a) * r;\n            let y = Math.sin(a) * r;\n            return {\n                x: config.rotation === CW ? (centerX + x) : (centerX - x),\n                y: centerY - y\n            }\n        }\n\n        /**\n         *\n         * @param from_angle in [degree] in knob's coordinates\n         * @param to_angle in [degree] in knob's coordinates\n         * @param radius\n         */\n        function getArc(from_angle, to_angle, radius) {\n\n            if (trace) console.group(`getArc(${from_angle}, ${to_angle}, ${radius})`);\n\n            // SVG d: \"A rx,ry xAxisRotate LargeArcFlag,SweepFlag x,y\".\n            // SweepFlag is either 0 or 1, and determines if the arc should be swept in a clockwise (1), or anti-clockwise (0) direction\n            // ref: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d\n\n            let a0 = knobToPolarAngle(from_angle);\n            let a1 = knobToPolarAngle(to_angle);\n\n            // little trick to force a full arc (360deg) when from=0 and to=360\n            if (from_angle !== to_angle) {\n                // with this we make sure that x1 will be different than x0 within the path definition\n                a0 -= 0.0001;\n                a1 += 0.0001;\n            }\n\n            let {x: x0, y: y0} = getViewboxCoord(a0, radius);\n            let {x: x1, y: y1} = getViewboxCoord(a1, radius);\n\n            let delta_angle = (a0 - a1 + 360.0) % 360.0;\n\n            let large_arc = delta_angle < 180.0 ? 0 : 1;\n            let arc_direction = config.rotation === CW ? 1 : 0;\n\n            let p = `M ${x0},${y0} A ${radius},${radius} 0 ${large_arc},${arc_direction} ${x1},${y1}`;\n\n            if (trace) console.groupEnd();\n            if (trace) console.log(\"arc: \" + p);\n\n            return p;\n        }\n\n        /**\n         *\n         * @returns {*}\n         */\n        function getTrackPath() {\n\n            if (trace) console.log(\"getTrackPath()\");\n\n            let p = null;\n\n            if (config.center_zero) {\n\n                if (Array.isArray(config.center_value)) {\n                    // let v = getValue();\n                    // console.log('center value is an array; getValue=', getValue(), typeof v);\n                    if (config.center_value.includes(getValue())) {\n                        if (trace) console.log(\"getTrackPath: center position, track not drawn\");\n                        // track is not drawn when the value is at center\n                        return p;\n                    }\n                } else {\n                    if (getValue() === config.center_value) {\n                        if (trace) console.log(\"getTrackPath: center position, track not drawn\");\n                        // track is not drawn when the value is at center\n                        return p;\n                    }\n                }\n\n                // we assume the split is at 180 [deg] (knob\"s angle)\n                if (angle < 180) {\n                    p = getArc(Math.min(angle, left_track_end_angle), left_track_end_angle, config.track_radius);\n                } else if (angle > 180) {\n                    p = getArc(right_track_start_angle, Math.max(angle, right_track_start_angle), config.track_radius);\n                }\n\n            } else {\n                p = getArc(config.angle_min, angle, config.track_radius);\n            }\n\n            return p;\n        }\n\n        /**\n         *\n         */\n        function draw_background() {\n\n            if (trace) console.log(\"draw_background()\", config.bg);\n\n            if (!config.bg) return;\n\n            // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n\n            //\n            // back disk:\n            //\n            svg_bg = document.createElementNS(NS, \"circle\");\n            svg_bg.setAttributeNS(null, \"cx\", `${centerX}`);\n            svg_bg.setAttributeNS(null, \"cy\", `${centerY}`);\n            svg_bg.setAttributeNS(null, \"r\", `${config.bg_radius}`);\n            svg_bg.setAttribute(\"fill\", `${config.bg_color}`);\n            svg_bg.setAttribute(\"stroke\", `${config.bg_border_color}`);\n            svg_bg.setAttribute(\"stroke-width\", `${config.bg_border_width}`);\n            svg_bg.setAttribute(\"class\", config.class_bg);\n            svg_element.appendChild(svg_bg);\n        }\n\n        /**\n         *\n         */\n        function draw_markers() {\n\n            if (trace) console.log(\"draw_markers()\", config.markers);\n\n            if (!config.markers) return;\n\n            let p = \"\";\n            let step = (config.angle_max - config.angle_min) / config.markers;\n            for (let a = config.angle_min; a <= config.angle_max; a += step) {\n                let from = getViewboxCoord(knobToPolarAngle(a), config.markers_radius);    // getViewboxCoord(angle, radius)\n                let to = getViewboxCoord(knobToPolarAngle(a), config.markers_radius + config.markers_length);\n                p += `M ${from.x},${from.y} L ${to.x},${to.y} `;\n            }\n\n            svg_divisions = document.createElementNS(NS, \"path\");\n            svg_divisions.setAttributeNS(null, \"d\", p);\n            svg_divisions.setAttribute(\"stroke\", `${config.markers_color}`);\n            svg_divisions.setAttribute(\"stroke-width\", `${config.markers_width}`);\n            svg_divisions.setAttribute(\"stroke-linecap\", config.linecap);\n            svg_divisions.setAttribute(\"class\", config.class_markers);\n            svg_element.appendChild(svg_divisions);\n        }\n\n/*\n        function draw_units() {\n            let pos = getViewboxCoord(angle_min_polar, config.divisions_radius);    // getViewboxCoord(angle, radius)\n            svg_value_text = document.createElementNS(NS, \"text\");\n            svg_value_text.setAttributeNS(null, \"x\", `${pos.x}`);\n            svg_value_text.setAttributeNS(null, \"y\", `${pos.y}`);\n            // svg_value_text.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text.setAttribute(\"cursor\", \"default\");\n            svg_value_text.setAttribute(\"font-family\", config.font_family);\n            svg_value_text.setAttribute(\"font-size\", `10`);\n            // svg_value_text.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text.setAttribute(\"fill\", config.font_color);\n            // svg_value_text.setAttribute(\"class\", config.class_value);\n            // svg_value_text.textContent = getDisplayValue();\n            svg_value_text.textContent = config.value_min.toString();\n            svg_element.appendChild(svg_value_text);\n        }\n*/\n\n        /**\n         *\n         */\n        function draw_track_background() {\n\n            if (trace) console.log(\"draw_track_background()\", config.track_bg);\n\n            // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n\n            if (!config.track_bg) return;\n\n            //\n            // track background:\n            //\n            if (config.center_zero) {\n\n                // left track background\n                svg_track_bg_left = document.createElementNS(NS, \"path\");\n                svg_track_bg_left.setAttributeNS(null, \"d\", getArc(config.angle_min, left_track_end_angle, config.track_bg_radius));\n                svg_track_bg_left.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg_left.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg_left.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg_left.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg_left.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg_left);\n\n                // right track background\n                svg_track_bg_right = document.createElementNS(NS, \"path\");\n                svg_track_bg_right.setAttributeNS(null, \"d\", getArc(right_track_start_angle, config.angle_max, config.track_bg_radius));\n                svg_track_bg_right.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg_right.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg_right.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg_right.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg_right.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg_right);\n\n            } else {\n\n                svg_track_bg = document.createElementNS(NS, \"path\");\n                svg_track_bg.setAttributeNS(null, \"d\", getArc(config.angle_min, config.angle_max, config.track_bg_radius));\n                svg_track_bg.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg);\n\n            }\n        }\n\n        /**\n         *\n         */\n        function draw_track() {\n\n            if (trace) console.log(\"draw_track()\", config.track);\n\n            if (!config.track) return;\n            let p = getTrackPath();\n            if (p) {\n                svg_track = document.createElementNS(NS, \"path\");\n                svg_track.setAttributeNS(null, \"d\", p);\n                svg_track.setAttribute(\"stroke\", `${config.track_color_init}`);\n                svg_track.setAttribute(\"stroke-width\", `${config.track_width}`);\n                svg_track.setAttribute(\"fill\", \"transparent\");\n                svg_track.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track.setAttribute(\"class\", config.class_track);\n                svg_element.appendChild(svg_track);\n            }\n        }\n\n        /**\n         *\n         * @returns {string}\n         */\n        function getTrackCursor() {\n            let a = knobToPolarAngle(angle);\n            let from = getViewboxCoord(a, config.cursor_radius);\n            let to = getViewboxCoord(a, config.cursor_radius + config.cursor_length);\n            return `M ${from.x},${from.y} L ${to.x},${to.y}`;\n        }\n\n        /**\n         *\n         */\n        function draw_cursor() {\n\n            if (trace) console.log(\"draw_cursor()\", config.cursor);\n\n            if (!config.cursor) return;\n\n            let p = getTrackCursor();\n            if (p) {\n                svg_cursor = document.createElementNS(NS, \"path\");\n                svg_cursor.setAttributeNS(null, \"d\", p);\n                svg_cursor.setAttribute(\"stroke\", `${config.cursor_color_init}`);\n                svg_cursor.setAttribute(\"stroke-width\", `${config.cursor_width}`);\n                svg_cursor.setAttribute(\"fill\", \"transparent\");\n                svg_cursor.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_cursor.setAttribute(\"class\", config.class_cursor);\n                svg_element.appendChild(svg_cursor);\n            }\n        }\n\n        function getFontSize(text, multiline=false) {\n            if (typeof text !== \"string\") return config.font_size;\n            const f = 22;   // empiric value\n            let m = Math.min(f, text.length);\n            if (multiline) {\n                return config.font_size * Math.min(0.75, Math.max(((f - m) / f), 0.25));\n            } else {\n                return config.font_size * Math.max(((f - m) / f), 0.25);\n            }\n\n        }\n\n        function draw_value_line1(text, multiline=false) {\n            if (trace) console.log(\"draw_value_line1\", text);\n            svg_value_text = document.createElementNS(NS, \"text\");\n            svg_value_text.setAttributeNS(null, \"x\", `${HALF_WIDTH}`);\n            svg_value_text.setAttributeNS(null, \"y\", `${config.value_position}`);\n            svg_value_text.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text.setAttribute(\"cursor\", \"default\");\n            svg_value_text.setAttribute(\"font-family\", config.font_family);\n            svg_value_text.setAttribute(\"font-size\", `${getFontSize(text, multiline)}`);\n            svg_value_text.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text.setAttribute(\"fill\", config.font_color);\n            svg_value_text.setAttribute(\"class\", config.class_value);\n            svg_value_text.textContent = text;\n            svg_element.appendChild(svg_value_text);\n        }\n\n        function draw_value_line2(text) {\n            if (trace) console.log(\"draw_value_line2\", text);\n            svg_value_text2 = document.createElementNS(NS, \"text\");\n            svg_value_text2.setAttributeNS(null, \"x\", `${HALF_WIDTH}`);\n            svg_value_text2.setAttributeNS(null, \"y\", `${config.value_position + 4}`);\n            svg_value_text2.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text2.setAttribute(\"cursor\", \"default\");\n            svg_value_text2.setAttribute(\"font-family\", config.font_family);\n            svg_value_text2.setAttribute(\"font-size\", `${getFontSize(text, true)}`);\n            svg_value_text2.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text2.setAttribute(\"fill\", config.font_color);\n            svg_value_text2.setAttribute(\"class\", config.class_value);\n            svg_value_text2.textContent = text;\n            svg_element.appendChild(svg_value_text2);\n\n        }\n\n        /**\n         *\n         */\n        function draw_value() {\n\n            if (trace) console.log(\"draw_value\", config.value_text);\n\n            if (!config.value_text) return;\n\n            const t = getDisplayValue();\n\n            if (typeof t === \"number\" || t.indexOf(\"\\n\") <= 0) {\n\n                if (trace) console.log(\"single line\");\n                draw_value_line1(t)\n\n            } else {\n                const lines = t.split(\"\\n\");\n                if (trace) console.log(\"two lines\", lines);\n\n                draw_value_line1(lines[0], true);\n                draw_value_line2(lines[1]);\n            }\n\n        }\n\n        function update_value() {\n\n            if (trace) console.log(\"update_value\", config.value_text);\n\n            if (!config.value_text) return;\n\n            const t = getDisplayValue();\n\n            if (typeof t === \"number\" || t.indexOf(\"\\n\") <= 0) {\n                // single line:\n\n                if (trace) console.log(\"single line\");\n\n                if (svg_value_text) {\n                    svg_value_text.setAttributeNS(null, \"y\", `${config.value_position}`);\n                    svg_value_text.setAttribute(\"font-size\", `${getFontSize(t)}`);\n                    svg_value_text.textContent = t;\n                }\n\n                if (svg_value_text2) {\n                    svg_element.removeChild(svg_value_text2);\n                    svg_value_text2 = null;\n                }\n\n            } else {\n                // two lines:\n\n                const lines = t.split(\"\\n\");\n                if (trace) console.log(\"two lines\", t, lines);\n\n                if (svg_value_text) {\n                    svg_value_text.setAttributeNS(null, \"y\", `${config.value_position - 12}`);\n                    svg_value_text.setAttribute(\"font-size\", `${getFontSize(lines[0], true)}`);\n                    svg_value_text.textContent = lines[0];\n                }\n\n                if (svg_value_text2) {\n                    svg_value_text2.setAttributeNS(null, \"y\", `${config.value_position + 4}`);\n                    svg_value_text2.setAttribute(\"font-size\", `${getFontSize(lines[1], true)}`);\n                    svg_value_text2.textContent = lines[1];\n                } else {\n                    draw_value_line2(lines[1]);\n                }\n            }\n\n        }\n\n        /**\n         *\n         */\n        function draw() {\n\n            if (trace) console.log(\"draw()\", config);\n\n            draw_background();\n            draw_track_background();\n            draw_markers();\n            // draw_units();\n            draw_track();\n            draw_cursor();\n            draw_value();\n        }\n\n        /**\n         *\n         */\n        function redraw() {\n\n            if (trace) console.log(\"redraw()\", config);\n\n            let p = getTrackPath();\n            if (p) {\n                if (svg_track) {\n                    if (trace) console.log(\"redraw track already exist, update d\");\n                    svg_track.setAttributeNS(null, \"d\", p);\n                } else {\n                    if (trace) console.log(\"redraw draw_track\");\n                    draw_track();\n                }\n            } else {\n                if (svg_track) {\n                    if (trace) console.log(\"redraw track already exist, hide it\");\n                    svg_track.setAttributeNS(null, \"d\", \"\");    // we hide the track\n                }\n            }\n\n            if (!has_changed) {\n                has_changed = getValue() !== config.default_value;\n                if (has_changed) {\n                    if (svg_track) {\n                        svg_track.setAttribute(\"stroke\", `${config.track_color}`);\n                    }\n                }\n            }\n\n            if (svg_cursor) {\n                p = getTrackCursor();\n                if (p) {\n                    if (trace) console.log(\"redraw cursor\");\n                    svg_cursor.setAttributeNS(null, \"d\", p);\n                    if (has_changed) {\n                        svg_cursor.setAttribute(\"stroke\", `${config.cursor_color}`);\n                    }\n                }\n            }\n\n            if (svg_value_text) {\n                if (trace) console.log(\"redraw svg_value_text\");\n                // svg_value_text.textContent = getDisplayValue();\n                update_value();\n            }\n        }\n\n        /**\n         *\n         */\n        return {\n            set value(v) {\n                // console.group(\"value setter\");\n                setValue(v);\n                redraw();\n                // console.groupEnd();\n            },\n            set config(new_config) {\n                // console.group(\"config setter\");\n                config = Object.assign({}, defaults, config, new_config);\n                init();\n                redraw();\n                // console.groupEnd();\n            },\n            setConfigValue: function(attribute, value) {\n                // console.group(\"setConfigValue\");\n                config[attribute] = value;\n                init();\n                redraw();\n                // console.groupEnd();\n            },\n            initValue,\n            enableDebug: function() {\n                trace = true;\n            },\n            disableDebug: function() {\n                trace = false;\n            }\n        };\n\n    }\n"],"names":["light","bg_color","bg_border_color","track_bg_color","track_color_init","track_color","cursor_color_init","cursor_color","markers_color","font_color","light2","dark","elem","conf","svg_element","trace","NS","CW","CCW","HALF_WIDTH","centerX","centerY","vbWidth","String","document","querySelector","nodeType","nodeName","toLowerCase","bbox","getBBox","x","width","y","height","createElementNS","appendChild","defaults","label","rotation","default_value","initial_value","value_min","value_max","value_resolution","center_zero","center_value","center_gap","zero_at","angle_min","angle_max","bg_radius","bg_border_width","track_bg_radius","track_bg_width","track_radius","track_width","cursor_radius","cursor_length","cursor_width","palette","bg","track_bg","track","cursor","linecap","value_text","value_position","HALF_HEIGHT","font_family","font_size","display_raw","format_raw","v","Math","round","format","font_weight","markers","markers_radius","markers_length","markers_width","class_bg","class_track_bg","class_track","class_value","class_cursor","class_markers","snap_to_steps","mouse_wheel_acceleration","onchange","data_config","JSON","parse","dataset","config","c","Object","assign","palettes","setAttributeNS","targetRect","minDeltaY","arcCenterXPixels","arcCenterYPixels","left_track_end_angle","right_track_start_angle","angle","svg_bg","svg_track_bg","svg_track_bg_left","svg_track_bg_right","svg_track","svg_cursor","svg_divisions","svg_value_text","svg_value_text2","has_changed","init","console","log","getRoundedValue","polarToKnobAngle","acos","PI","initValue","setValue","getDisplayValue","getValue","getCursorCorrection","n","abs","a","undefined","setAngle","new_angle","fire_event","prev","notify","min","max","value","event","CustomEvent","dispatchEvent","notifyChange","knobToPolarAngle","mouseUpdate","e","dxPixels","clientX","left","dyPixels","clientY","top","dx","dy","angle_rad","atan2","toFixed","handleDrag","preventDefault","redraw","endDrag","removeEventListener","handleTouch","touches","touchesIndex","length","endTouch","getViewboxCoord","radius","r","cos","sin","getArc","from_angle","to_angle","group","a0","a1","p","x0","y0","groupEnd","getTrackPath","Array","isArray","includes","draw_track","setAttribute","getTrackCursor","from","to","getFontSize","text","multiline","m","draw_value_line1","textContent","draw_value_line2","t","indexOf","removeChild","lines","split","update_value","step","draw_markers","draw_cursor","draw_value","addEventListener","getBoundingClientRect","startDrag","deltaY","mouseWheelHandler","passive","new_config","setConfigValue","attribute","enableDebug","disableDebug"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/svg-knob/dist/index.umd.js b/node_modules/svg-knob/dist/index.umd.js
index cdfa81e..9b7aba6 100644
--- a/node_modules/svg-knob/dist/index.umd.js
+++ b/node_modules/svg-knob/dist/index.umd.js
@@ -1,2 +1,2 @@
-!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.svgKnob=e()}(this,function(){var t={light:{bg_color:"#E0E0E0",bg_border_color:"#BDBDBD",track_bg_color:"#CFD8DC",track_color_init:"#64B5F6",track_color:"#42A5F5",cursor_color_init:"#64B5F6",cursor_color:"#42A5F5",markers_color:"#9E9E9E",font_color:"#424242"},light2:{bg_color:"#B1DAEE",bg_border_color:"#569DC0",track_bg_color:"#B1DAEE",track_color_init:"#569DC0",track_color:"#1D6D93",cursor_color_init:"#569DC0",cursor_color:"#1D6D93",markers_color:"#3680A4",font_color:"#1D6D93"},dark:{bg_color:"#000000",bg_border_color:"#569DC0",track_bg_color:"#424242",track_color_init:"#FDD835",track_color:"#FFEC00",cursor_color_init:"#569DC0",cursor_color:"#FDD835",markers_color:"#3680A4",font_color:"#FFEA00"}};return function(e,r){if(void 0===r&&(r={}),!e)throw"You must pass a DOM node reference to the Knob constructor";var n,o=!1,a="http://www.w3.org/2000/svg",l=!0,i=!l,s=50,u=50;("string"==typeof e||e instanceof String)&&(e=document.querySelector(e)),"svg"===e.nodeName.toLowerCase()?n=e:(n=document.createElementNS("http://www.w3.org/2000/svg","svg"),e.appendChild(n));var c,_={label:!1,rotation:l,default_value:0,initial_value:0,value_min:0,value_max:100,value_resolution:1,center_zero:!1,center_value:null,center_gap:4,zero_at:270,angle_min:30,angle_max:330,bg_radius:32,bg_border_width:1,track_bg_radius:40,track_bg_width:8,track_radius:40,track_width:8,cursor_radius:18,cursor_length:10,cursor_width:4,palette:"light",bg:!1,track_bg:!0,track:!0,cursor:!1,linecap:"butt",value_text:!0,value_position:u+8,font_family:"sans-serif",font_size:25,display_raw:!1,format_raw:function(t){return Math.round(t)},format:function(t){return t},font_weight:"bold",markers:0,markers_radius:40,markers_length:8,markers_width:2,class_bg:"knob-bg",class_track_bg:"knob-track-bg",class_track:"knob-track",class_value:"knob-value",class_cursor:"knob-cursor",class_markers:"knob-markers",snap_to_steps:!1,mouse_wheel_acceleration:1,onchange:null},d=JSON.parse(e.dataset.config||"{}"),g=Object.assign({},_,t[_.palette],r,d),b=Object.assign(g,t[g.palette],r,d);c=b.label||b.value_position>=100-b.font_size/2?120:100,n.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink"),n.setAttributeNS(null,"viewBox","0 0 100 "+c);var m,h,f=0,v=0,k=0,p=0,A=b.angle_min,w=null,x=null,E=null,M=null,y=null,S=null,D=null,N=null,C=null,z=!1;function F(){o&&console.log("init()"),b.center_zero&&(b.center_value||(b.center_value=P((b.value_max-b.value_min)/2+b.value_min))),"butt"===b.linecap?(k=Y(180*Math.acos(-b.center_gap/100)/Math.PI),p=Y(180*Math.acos(b.center_gap/100)/Math.PI)):(k=Y(180*Math.acos(-(1.3*b.track_width+b.center_gap)/100)/Math.PI),p=Y(180*Math.acos((1.3*b.track_width+b.center_gap)/100)/Math.PI))}function L(){O(b.initial_value?b.initial_value:b.default_value)}function P(t){return null===b.value_resolution?t:Math.round(t/b.value_resolution)*b.value_resolution}function B(t){o&&console.log("getDisplayValue",b.display_raw);var e=T(t);return b.display_raw?b.format_raw(e):b.format(e)}function I(){var t;return t=Math.abs(b.value_max-b.value_min),1===Math.abs(t%2)?.5:0}function T(t){return P(((void 0===t?A:t)-b.angle_min)/(b.angle_max-b.angle_min)*(b.value_max-b.value_min)+b.value_min-I())}function O(t){return j((t+I()-b.value_min)/(b.value_max-b.value_min)*(b.angle_max-b.angle_min)+b.angle_min),o&&console.log("setValue("+t+") angle="+(t-b.value_min)/(b.value_max-b.value_min)*(b.angle_max-b.angle_min)+b.angle_min),!0}function j(t,r){var n=A,a=r&&t!==A;A=Math.min(Math.max(t,b.angle_min),b.angle_max),a&&T(n)!==T()&&function(){o&&console.log("knob value has changed");var t=T(),r=new CustomEvent("change",{detail:t});e.dispatchEvent(r),b.onchange&&b.onchange(t)}()}function V(t){var e=b.zero_at-t;return e<0&&(e+=360),o&&console.log("knobToPolarAngle "+t+" -> "+e),e}function Y(t){return o&&console.log("polarToKnobAngle "+t+" -> "+(b.zero_at-t+360)%360),(b.zero_at-t+360)%360}function K(t){var e=t.clientX-m.left,r=t.clientY-m.top,n=(e-f)/(m.width/2),a=-(r-v)/(m.width/2);b.rotation===i&&(n=-n);var l=Math.atan2(a,n);l<0&&(l=2*Math.PI+l),o&&console.log("mouseUpdate: position in svg = "+e+", "+r+" pixels; "+n.toFixed(3)+", "+a.toFixed(3)+" rel.; angle "+l.toFixed(3)+" rad"),j(Y(180*l/Math.PI),!0)}function R(t){t.preventDefault(),K(t),et()}function X(){o&&console.log("endDrag"),document.removeEventListener("mousemove",R,!1),document.removeEventListener("mouseup",X,!1)}function q(t){o&&console.log("handleTouch",t.touches),t.preventDefault();var e=t.touches.length-1,r=t.touches[e].clientX-m.left,n=t.touches[e].clientY-m.top,a=(r-f)/(m.width/2),l=-(n-v)/(m.width/2);b.rotation===i&&(a=-a);var s=Math.atan2(l,a);s<0&&(s=2*Math.PI+s),o&&console.log("handleTouch: position in svg = "+r+", "+n+" pixels; "+a.toFixed(3)+", "+l.toFixed(3)+" rel.; angle "+s.toFixed(3)+" rad"),j(Y(180*s/Math.PI),!0),et()}function H(){o&&console.log("endTouch"),document.removeEventListener("touchmove",q),document.removeEventListener("touchend",H)}function J(t,e){var r=t*Math.PI/180,n=void 0===e?b.track_radius:e,o=Math.cos(r)*n,a=Math.sin(r)*n;return{x:b.rotation===l?s+o:s-o,y:u-a}}function U(t,e,r){o&&console.group("getArc("+t+", "+e+", "+r+")");var n=V(t),a=V(e);t!==e&&(n-=1e-4,a+=1e-4);var i=J(n,r),s=i.x,u=i.y,c=J(a,r),_="M "+s+","+u+" A "+r+","+r+" 0 "+((n-a+360)%360<180?0:1)+","+(b.rotation===l?1:0)+" "+c.x+","+c.y;return o&&console.groupEnd(),o&&console.log("arc: "+_),_}function G(){o&&console.log("getTrackPath()");var t=null;if(b.center_zero){if(Array.isArray(b.center_value)){if(b.center_value.includes(T()))return o&&console.log("getTrackPath: center position, track not drawn"),t}else if(T()===b.center_value)return o&&console.log("getTrackPath: center position, track not drawn"),t;A<180?t=U(Math.min(A,k),k,b.track_radius):A>180&&(t=U(p,Math.max(A,p),b.track_radius))}else t=U(b.angle_min,A,b.track_radius);return t}function Q(){if(o&&console.log("draw_track()",b.track),b.track){var t=G();t&&((y=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),y.setAttribute("stroke",""+b.track_color_init),y.setAttribute("stroke-width",""+b.track_width),y.setAttribute("fill","transparent"),y.setAttribute("stroke-linecap",b.linecap),y.setAttribute("class",b.class_track),n.appendChild(y))}}function W(){var t=V(A),e=J(t,b.cursor_radius),r=J(t,b.cursor_radius+b.cursor_length);return"M "+e.x+","+e.y+" L "+r.x+","+r.y}function Z(t,e){if(void 0===e&&(e=!1),"string"!=typeof t)return b.font_size;var r=Math.min(22,t.length);return e?b.font_size*Math.min(.75,Math.max((22-r)/22,.25)):b.font_size*Math.max((22-r)/22,.25)}function $(t,e){void 0===e&&(e=!1),o&&console.log("draw_value_line1",t),(N=document.createElementNS(a,"text")).setAttributeNS(null,"x",""+s),N.setAttributeNS(null,"y",""+b.value_position),N.setAttribute("text-anchor","middle"),N.setAttribute("cursor","default"),N.setAttribute("font-family",b.font_family),N.setAttribute("font-size",""+Z(t,e)),N.setAttribute("font-weight",""+b.font_weight),N.setAttribute("fill",b.font_color),N.setAttribute("class",b.class_value),N.textContent=t,n.appendChild(N)}function tt(t){o&&console.log("draw_value_line2",t),(C=document.createElementNS(a,"text")).setAttributeNS(null,"x",""+s),C.setAttributeNS(null,"y",""+(b.value_position+4)),C.setAttribute("text-anchor","middle"),C.setAttribute("cursor","default"),C.setAttribute("font-family",b.font_family),C.setAttribute("font-size",""+Z(t,!0)),C.setAttribute("font-weight",""+b.font_weight),C.setAttribute("fill",b.font_color),C.setAttribute("class",b.class_value),C.textContent=t,n.appendChild(C)}function et(){o&&console.log("redraw()",b);var t=G();t?y?(o&&console.log("redraw track already exist, update d"),y.setAttributeNS(null,"d",t)):(o&&console.log("redraw draw_track"),Q()):y&&(o&&console.log("redraw track already exist, hide it"),y.setAttributeNS(null,"d","")),z||(z=T()!==b.default_value)&&y&&y.setAttribute("stroke",""+b.track_color),S&&(t=W())&&(o&&console.log("redraw cursor"),S.setAttributeNS(null,"d",t),z&&S.setAttribute("stroke",""+b.cursor_color)),N&&(o&&console.log("redraw svg_value_text"),function(){if(o&&console.log("update_value",b.value_text),b.value_text){var t=B();if("number"==typeof t||t.indexOf("\n")<=0)o&&console.log("single line"),N&&(N.setAttributeNS(null,"y",""+b.value_position),N.setAttribute("font-size",""+Z(t)),N.textContent=t),C&&(n.removeChild(C),C=null);else{var e=t.split("\n");o&&console.log("two lines",t,e),N&&(N.setAttributeNS(null,"y",""+(b.value_position-12)),N.setAttribute("font-size",""+Z(e[0],!0)),N.textContent=e[0]),C?(C.setAttributeNS(null,"y",""+(b.value_position+4)),C.setAttribute("font-size",""+Z(e[1],!0)),C.textContent=e[1]):tt(e[1])}}}())}return F(),L(),o&&console.log("draw()",b),o&&console.log("draw_background()",b.bg),b.bg&&((w=document.createElementNS(a,"circle")).setAttributeNS(null,"cx",""+s),w.setAttributeNS(null,"cy",""+u),w.setAttributeNS(null,"r",""+b.bg_radius),w.setAttribute("fill",""+b.bg_color),w.setAttribute("stroke",""+b.bg_border_color),w.setAttribute("stroke-width",""+b.bg_border_width),w.setAttribute("class",b.class_bg),n.appendChild(w)),o&&console.log("draw_track_background()",b.track_bg),b.track_bg&&(b.center_zero?((E=document.createElementNS(a,"path")).setAttributeNS(null,"d",U(b.angle_min,k,b.track_bg_radius)),E.setAttribute("stroke",""+b.track_bg_color),E.setAttribute("stroke-width",""+b.track_bg_width),E.setAttribute("stroke-linecap",b.linecap),E.setAttribute("fill","transparent"),E.setAttribute("class",b.class_track_bg),n.appendChild(E),(M=document.createElementNS(a,"path")).setAttributeNS(null,"d",U(p,b.angle_max,b.track_bg_radius)),M.setAttribute("stroke",""+b.track_bg_color),M.setAttribute("stroke-width",""+b.track_bg_width),M.setAttribute("stroke-linecap",b.linecap),M.setAttribute("fill","transparent"),M.setAttribute("class",b.class_track_bg),n.appendChild(M)):((x=document.createElementNS(a,"path")).setAttributeNS(null,"d",U(b.angle_min,b.angle_max,b.track_bg_radius)),x.setAttribute("stroke",""+b.track_bg_color),x.setAttribute("stroke-width",""+b.track_bg_width),x.setAttribute("fill","transparent"),x.setAttribute("stroke-linecap",b.linecap),x.setAttribute("class",b.class_track_bg),n.appendChild(x))),function(){if(o&&console.log("draw_markers()",b.markers),b.markers){for(var t="",e=(b.angle_max-b.angle_min)/b.markers,r=b.angle_min;r<=b.angle_max;r+=e){var l=J(V(r),b.markers_radius),i=J(V(r),b.markers_radius+b.markers_length);t+="M "+l.x+","+l.y+" L "+i.x+","+i.y+" "}(D=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),D.setAttribute("stroke",""+b.markers_color),D.setAttribute("stroke-width",""+b.markers_width),D.setAttribute("stroke-linecap",b.linecap),D.setAttribute("class",b.class_markers),n.appendChild(D)}}(),Q(),function(){if(o&&console.log("draw_cursor()",b.cursor),b.cursor){var t=W();t&&((S=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),S.setAttribute("stroke",""+b.cursor_color_init),S.setAttribute("stroke-width",""+b.cursor_width),S.setAttribute("fill","transparent"),S.setAttribute("stroke-linecap",b.linecap),S.setAttribute("class",b.class_cursor),n.appendChild(S))}}(),function(){if(o&&console.log("draw_value",b.value_text),b.value_text){var t=B();if("number"==typeof t||t.indexOf("\n")<=0)o&&console.log("single line"),$(t);else{var e=t.split("\n");o&&console.log("two lines",e),$(e[0],!0),tt(e[1])}}}(),o&&console.log("attach attachEventHandlers"),n.addEventListener("mousedown",function(t){!function(t){o&&console.log("startDrag"),t.preventDefault(),m=n.getBoundingClientRect(),v=f=m.width/2,document.addEventListener("mousemove",R,!1),document.addEventListener("mouseup",X,!1),K(t),et()}(t)}),n.addEventListener("wheel",function(t){!function(t){t.preventDefault();var e=t.deltaY;0!==e&&(h>Math.abs(e)||!h)&&(h=Math.abs(e)),j(Math.min(Math.max(A+e/h*1*b.mouse_wheel_acceleration,b.angle_min),b.angle_max),!0),et()}(t)}),n.addEventListener("touchstart",function(t){o&&console.log("startTouch"),t.preventDefault(),m=n.getBoundingClientRect(),v=f=m.width/2,document.addEventListener("touchmove",q,{passive:!1}),document.addEventListener("touchend",H)},{passive:!1}),{set value(t){O(t),et()},set config(t){b=Object.assign({},_,b,t),F(),et()},setConfigValue:function(t,e){b[t]=e,F(),et()},initValue:L,enableDebug:function(){o=!0},disableDebug:function(){o=!1}}}});
+!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.svgKnob=e()}(this,function(){var t={light:{bg_color:"#E0E0E0",bg_border_color:"#BDBDBD",track_bg_color:"#CFD8DC",track_color_init:"#64B5F6",track_color:"#42A5F5",cursor_color_init:"#64B5F6",cursor_color:"#42A5F5",markers_color:"#9E9E9E",font_color:"#424242"},light2:{bg_color:"#B1DAEE",bg_border_color:"#569DC0",track_bg_color:"#B1DAEE",track_color_init:"#569DC0",track_color:"#1D6D93",cursor_color_init:"#569DC0",cursor_color:"#1D6D93",markers_color:"#3680A4",font_color:"#1D6D93"},dark:{bg_color:"#000000",bg_border_color:"#569DC0",track_bg_color:"#424242",track_color_init:"#FDD835",track_color:"#FFEC00",cursor_color_init:"#569DC0",cursor_color:"#FDD835",markers_color:"#3680A4",font_color:"#FFEA00"}};return function(e,r){if(void 0===r&&(r={}),!e)throw"You must pass a DOM node reference to the Knob constructor";var n,o=!1,a="http://www.w3.org/2000/svg",l=!0,i=!l,s=50,u=s,c=50,_=100;("string"==typeof e||e instanceof String)&&(e=document.querySelector(e));var d=e.nodeName.toLowerCase();if("g"===d){var g=(n=e).getBBox();u=g.x+.5*g.width,c=g.y+.5*g.height,_=g.width}else{if("div"!==d)throw"Unsupported element type for creating knob, should be a div or an SVG g element!";n=document.createElementNS("http://www.w3.org/2000/svg","svg"),e.appendChild(n)}var b={label:!1,rotation:l,default_value:0,initial_value:0,value_min:0,value_max:100,value_resolution:1,center_zero:!1,center_value:null,center_gap:4,zero_at:270,angle_min:30,angle_max:330,bg_radius:32,bg_border_width:1,track_bg_radius:40,track_bg_width:8,track_radius:40,track_width:8,cursor_radius:18,cursor_length:10,cursor_width:4,palette:"light",bg:!1,track_bg:!0,track:!0,cursor:!1,linecap:"butt",value_text:!0,value_position:58,font_family:"sans-serif",font_size:25,display_raw:!1,format_raw:function(t){return Math.round(t)},format:function(t){return t},font_weight:"bold",markers:0,markers_radius:40,markers_length:8,markers_width:2,class_bg:"knob-bg",class_track_bg:"knob-track-bg",class_track:"knob-track",class_value:"knob-value",class_cursor:"knob-cursor",class_markers:"knob-markers",snap_to_steps:!1,mouse_wheel_acceleration:1,onchange:null},m=JSON.parse(e.dataset.config||"{}"),h=Object.assign({},b,t[b.palette],r,m),f=Object.assign(h,t[h.palette],r,m);n.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink"),100===_&&n.setAttributeNS(null,"viewBox","0 0 100 "+(f.label||f.value_position>=_-f.font_size/2?120:100));var v,k,p=0,A=0,w=0,x=0,E=f.angle_min,M=null,y=null,S=null,D=null,N=null,C=null,z=null,F=null,L=null,P=!1;function B(){o&&console.log("init()"),f.center_zero&&(f.center_value||(f.center_value=T((f.value_max-f.value_min)/2+f.value_min))),"butt"===f.linecap?(w=U(180*Math.acos(-f.center_gap/100)/Math.PI),x=U(180*Math.acos(f.center_gap/100)/Math.PI)):(w=U(180*Math.acos(-(1.3*f.track_width+f.center_gap)/100)/Math.PI),x=U(180*Math.acos((1.3*f.track_width+f.center_gap)/100)/Math.PI))}function I(){Y(f.initial_value?f.initial_value:f.default_value)}function T(t){return null===f.value_resolution?t:Math.round(t/f.value_resolution)*f.value_resolution}function O(t){o&&console.log("getDisplayValue",f.display_raw);var e=j(t);return f.display_raw?f.format_raw(e):f.format(e)}function V(){var t;return t=Math.abs(f.value_max-f.value_min),1===Math.abs(t%2)?.5:0}function j(t){return T(((void 0===t?E:t)-f.angle_min)/(f.angle_max-f.angle_min)*(f.value_max-f.value_min)+f.value_min-V())}function Y(t){return K((t+V()-f.value_min)/(f.value_max-f.value_min)*(f.angle_max-f.angle_min)+f.angle_min),o&&console.log("setValue("+t+") angle="+(t-f.value_min)/(f.value_max-f.value_min)*(f.angle_max-f.angle_min)+f.angle_min),!0}function K(t,r){var n=E,a=r&&t!==E;E=Math.min(Math.max(t,f.angle_min),f.angle_max),a&&j(n)!==j()&&function(){o&&console.log("knob value has changed");var t=j(),r=new CustomEvent("change",{detail:t});e.dispatchEvent(r),f.onchange&&f.onchange(t)}()}function R(t){var e=f.zero_at-t;return e<0&&(e+=360),o&&console.log("knobToPolarAngle "+t+" -> "+e),e}function U(t){return o&&console.log("polarToKnobAngle "+t+" -> "+(f.zero_at-t+360)%360),(f.zero_at-t+360)%360}function X(t){var e=t.clientX-v.left,r=t.clientY-v.top,n=(e-p)/(v.width/2),a=-(r-A)/(v.width/2);f.rotation===i&&(n=-n);var l=Math.atan2(a,n);l<0&&(l=2*Math.PI+l),o&&console.log("mouseUpdate: position in svg = "+e+", "+r+" pixels; "+n.toFixed(3)+", "+a.toFixed(3)+" rel.; angle "+l.toFixed(3)+" rad"),K(U(180*l/Math.PI),!0)}function q(t){t.preventDefault(),X(t),ot()}function G(){o&&console.log("endDrag"),document.removeEventListener("mousemove",q,!1),document.removeEventListener("mouseup",G,!1)}function H(t){o&&console.log("handleTouch",t.touches),t.preventDefault();var e=t.touches.length-1,r=t.touches[e].clientX-v.left,n=t.touches[e].clientY-v.top,a=(r-p)/(v.width/2),l=-(n-A)/(v.width/2);f.rotation===i&&(a=-a);var s=Math.atan2(l,a);s<0&&(s=2*Math.PI+s),o&&console.log("handleTouch: position in svg = "+r+", "+n+" pixels; "+a.toFixed(3)+", "+l.toFixed(3)+" rel.; angle "+s.toFixed(3)+" rad"),K(U(180*s/Math.PI),!0),ot()}function J(){o&&console.log("endTouch"),document.removeEventListener("touchmove",H),document.removeEventListener("touchend",J)}function Q(t,e){var r=t*Math.PI/180,n=void 0===e?f.track_radius:e,o=Math.cos(r)*n,a=Math.sin(r)*n;return{x:f.rotation===l?u+o:u-o,y:c-a}}function W(t,e,r){o&&console.group("getArc("+t+", "+e+", "+r+")");var n=R(t),a=R(e);t!==e&&(n-=1e-4,a+=1e-4);var i=Q(n,r),s=i.x,u=i.y,c=Q(a,r),_="M "+s+","+u+" A "+r+","+r+" 0 "+((n-a+360)%360<180?0:1)+","+(f.rotation===l?1:0)+" "+c.x+","+c.y;return o&&console.groupEnd(),o&&console.log("arc: "+_),_}function Z(){o&&console.log("getTrackPath()");var t=null;if(f.center_zero){if(Array.isArray(f.center_value)){if(f.center_value.includes(j()))return o&&console.log("getTrackPath: center position, track not drawn"),t}else if(j()===f.center_value)return o&&console.log("getTrackPath: center position, track not drawn"),t;E<180?t=W(Math.min(E,w),w,f.track_radius):E>180&&(t=W(x,Math.max(E,x),f.track_radius))}else t=W(f.angle_min,E,f.track_radius);return t}function $(){if(o&&console.log("draw_track()",f.track),f.track){var t=Z();t&&((N=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),N.setAttribute("stroke",""+f.track_color_init),N.setAttribute("stroke-width",""+f.track_width),N.setAttribute("fill","transparent"),N.setAttribute("stroke-linecap",f.linecap),N.setAttribute("class",f.class_track),n.appendChild(N))}}function tt(){var t=R(E),e=Q(t,f.cursor_radius),r=Q(t,f.cursor_radius+f.cursor_length);return"M "+e.x+","+e.y+" L "+r.x+","+r.y}function et(t,e){if(void 0===e&&(e=!1),"string"!=typeof t)return f.font_size;var r=Math.min(22,t.length);return e?f.font_size*Math.min(.75,Math.max((22-r)/22,.25)):f.font_size*Math.max((22-r)/22,.25)}function rt(t,e){void 0===e&&(e=!1),o&&console.log("draw_value_line1",t),(F=document.createElementNS(a,"text")).setAttributeNS(null,"x",""+s),F.setAttributeNS(null,"y",""+f.value_position),F.setAttribute("text-anchor","middle"),F.setAttribute("cursor","default"),F.setAttribute("font-family",f.font_family),F.setAttribute("font-size",""+et(t,e)),F.setAttribute("font-weight",""+f.font_weight),F.setAttribute("fill",f.font_color),F.setAttribute("class",f.class_value),F.textContent=t,n.appendChild(F)}function nt(t){o&&console.log("draw_value_line2",t),(L=document.createElementNS(a,"text")).setAttributeNS(null,"x",""+s),L.setAttributeNS(null,"y",""+(f.value_position+4)),L.setAttribute("text-anchor","middle"),L.setAttribute("cursor","default"),L.setAttribute("font-family",f.font_family),L.setAttribute("font-size",""+et(t,!0)),L.setAttribute("font-weight",""+f.font_weight),L.setAttribute("fill",f.font_color),L.setAttribute("class",f.class_value),L.textContent=t,n.appendChild(L)}function ot(){o&&console.log("redraw()",f);var t=Z();t?N?(o&&console.log("redraw track already exist, update d"),N.setAttributeNS(null,"d",t)):(o&&console.log("redraw draw_track"),$()):N&&(o&&console.log("redraw track already exist, hide it"),N.setAttributeNS(null,"d","")),P||(P=j()!==f.default_value)&&N&&N.setAttribute("stroke",""+f.track_color),C&&(t=tt())&&(o&&console.log("redraw cursor"),C.setAttributeNS(null,"d",t),P&&C.setAttribute("stroke",""+f.cursor_color)),F&&(o&&console.log("redraw svg_value_text"),function(){if(o&&console.log("update_value",f.value_text),f.value_text){var t=O();if("number"==typeof t||t.indexOf("\n")<=0)o&&console.log("single line"),F&&(F.setAttributeNS(null,"y",""+f.value_position),F.setAttribute("font-size",""+et(t)),F.textContent=t),L&&(n.removeChild(L),L=null);else{var e=t.split("\n");o&&console.log("two lines",t,e),F&&(F.setAttributeNS(null,"y",""+(f.value_position-12)),F.setAttribute("font-size",""+et(e[0],!0)),F.textContent=e[0]),L?(L.setAttributeNS(null,"y",""+(f.value_position+4)),L.setAttribute("font-size",""+et(e[1],!0)),L.textContent=e[1]):nt(e[1])}}}())}return B(),I(),o&&console.log("draw()",f),o&&console.log("draw_background()",f.bg),f.bg&&((M=document.createElementNS(a,"circle")).setAttributeNS(null,"cx",""+u),M.setAttributeNS(null,"cy",""+c),M.setAttributeNS(null,"r",""+f.bg_radius),M.setAttribute("fill",""+f.bg_color),M.setAttribute("stroke",""+f.bg_border_color),M.setAttribute("stroke-width",""+f.bg_border_width),M.setAttribute("class",f.class_bg),n.appendChild(M)),o&&console.log("draw_track_background()",f.track_bg),f.track_bg&&(f.center_zero?((S=document.createElementNS(a,"path")).setAttributeNS(null,"d",W(f.angle_min,w,f.track_bg_radius)),S.setAttribute("stroke",""+f.track_bg_color),S.setAttribute("stroke-width",""+f.track_bg_width),S.setAttribute("stroke-linecap",f.linecap),S.setAttribute("fill","transparent"),S.setAttribute("class",f.class_track_bg),n.appendChild(S),(D=document.createElementNS(a,"path")).setAttributeNS(null,"d",W(x,f.angle_max,f.track_bg_radius)),D.setAttribute("stroke",""+f.track_bg_color),D.setAttribute("stroke-width",""+f.track_bg_width),D.setAttribute("stroke-linecap",f.linecap),D.setAttribute("fill","transparent"),D.setAttribute("class",f.class_track_bg),n.appendChild(D)):((y=document.createElementNS(a,"path")).setAttributeNS(null,"d",W(f.angle_min,f.angle_max,f.track_bg_radius)),y.setAttribute("stroke",""+f.track_bg_color),y.setAttribute("stroke-width",""+f.track_bg_width),y.setAttribute("fill","transparent"),y.setAttribute("stroke-linecap",f.linecap),y.setAttribute("class",f.class_track_bg),n.appendChild(y))),function(){if(o&&console.log("draw_markers()",f.markers),f.markers){for(var t="",e=(f.angle_max-f.angle_min)/f.markers,r=f.angle_min;r<=f.angle_max;r+=e){var l=Q(R(r),f.markers_radius),i=Q(R(r),f.markers_radius+f.markers_length);t+="M "+l.x+","+l.y+" L "+i.x+","+i.y+" "}(z=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),z.setAttribute("stroke",""+f.markers_color),z.setAttribute("stroke-width",""+f.markers_width),z.setAttribute("stroke-linecap",f.linecap),z.setAttribute("class",f.class_markers),n.appendChild(z)}}(),$(),function(){if(o&&console.log("draw_cursor()",f.cursor),f.cursor){var t=tt();t&&((C=document.createElementNS(a,"path")).setAttributeNS(null,"d",t),C.setAttribute("stroke",""+f.cursor_color_init),C.setAttribute("stroke-width",""+f.cursor_width),C.setAttribute("fill","transparent"),C.setAttribute("stroke-linecap",f.linecap),C.setAttribute("class",f.class_cursor),n.appendChild(C))}}(),function(){if(o&&console.log("draw_value",f.value_text),f.value_text){var t=O();if("number"==typeof t||t.indexOf("\n")<=0)o&&console.log("single line"),rt(t);else{var e=t.split("\n");o&&console.log("two lines",e),rt(e[0],!0),nt(e[1])}}}(),o&&console.log("attach attachEventHandlers"),n.addEventListener("mousedown",function(t){!function(t){o&&console.log("startDrag"),t.preventDefault(),v=n.getBoundingClientRect(),A=p=v.width/2,document.addEventListener("mousemove",q,!1),document.addEventListener("mouseup",G,!1),X(t),ot()}(t)}),n.addEventListener("wheel",function(t){!function(t){t.preventDefault();var e=t.deltaY;0!==e&&(k>Math.abs(e)||!k)&&(k=Math.abs(e)),K(Math.min(Math.max(E+e/k*1*f.mouse_wheel_acceleration,f.angle_min),f.angle_max),!0),ot()}(t)}),n.addEventListener("touchstart",function(t){o&&console.log("startTouch"),t.preventDefault(),v=n.getBoundingClientRect(),A=p=v.width/2,document.addEventListener("touchmove",H,{passive:!1}),document.addEventListener("touchend",J)},{passive:!1}),{set value(t){Y(t),ot()},set config(t){f=Object.assign({},b,f,t),B(),ot()},setConfigValue:function(t,e){f[t]=e,B(),ot()},initValue:I,enableDebug:function(){o=!0},disableDebug:function(){o=!1}}}});
 //# sourceMappingURL=index.umd.js.map
diff --git a/node_modules/svg-knob/dist/index.umd.js.map b/node_modules/svg-knob/dist/index.umd.js.map
index 0dfc4c3..daf331c 100644
--- a/node_modules/svg-knob/dist/index.umd.js.map
+++ b/node_modules/svg-knob/dist/index.umd.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.umd.js","sources":["../src/palettes.js","../src/index.js"],"sourcesContent":["\"use strict\";\n\n//TODO: make _init attributes optional\n\nexport default {\n    light : {\n        bg_color: \"#E0E0E0\",\n        bg_border_color: \"#BDBDBD\",\n        track_bg_color: \"#CFD8DC\",\n        track_color_init: \"#64B5F6\",\n        track_color: \"#42A5F5\",\n        cursor_color_init: \"#64B5F6\",\n        cursor_color: \"#42A5F5\",\n        markers_color: \"#9E9E9E\",\n        font_color: \"#424242\",\n    },\n    light2 : {\n        bg_color: \"#B1DAEE\",\n        bg_border_color: \"#569DC0\",\n        track_bg_color: \"#B1DAEE\",\n        track_color_init: \"#569DC0\",\n        track_color: \"#1D6D93\",\n        cursor_color_init: \"#569DC0\",\n        cursor_color: \"#1D6D93\",\n        markers_color: \"#3680A4\",\n        font_color: \"#1D6D93\",\n    },\n    dark: {\n        bg_color: \"#000000\",\n        bg_border_color: \"#569DC0\",\n        track_bg_color: \"#424242\",\n        track_color_init: \"#FDD835\",\n        track_color: \"#FFEC00\",\n        cursor_color_init: \"#569DC0\",\n        cursor_color: \"#FDD835\",\n        markers_color: \"#3680A4\",\n        font_color: \"#FFEA00\",\n    }\n}\n","\n    \"use strict\";\n\n    import palettes from \"./palettes.js\";\n\n    // FIXME: remove console usage for IE compatibility\n\n    /**\n     *\n     * @param elem DIV or SVN element\n     * @param conf optional config\n     * @returns {{value, config}}\n     */\n    export default function(elem, conf = {}) {\n\n        // Like a real knob, it's the knob's position that determines the knob's value.\n        // Therefore, the value is computed from the knob's position (angle).\n        // However, the user has the possibility to directly set the value and in that case\n        // the knob's position (angle) will be computed from the value and the knob redrawn\n        // accordingly.\n\n        //\n        // All angles in method parameters are in [degrees] (except for polarToKnobAngle() and getViewboxCoord()).\n        //\n        // By default:\n        // - knob direction is CLOCKWISE\n        // - start position is 6 o'clock (bottom)\n        // - knob angle is:\n        //       0 [deg] angle is a   6 o'clock (bottom)\n        //      90 [deg] angle is at  9 o'clock (left)\n        //     180 [deg] angle is at 12 o'clock (top)\n        //     270 [deg] angle is at  3 o'clock (right)\n        //\n        // Trigonometric functions (sin, cos, ...) operate in polar coordinates,\n        // with 0 angle at 3 o'clock and a counter-clockwise direction.\n        // To convert from \"knob angle\" to \"polar angle\":\n        //\n        //     knob    polar\n        // --------------------\n        //        0      270\n        //       30      240\n        //       90      180\n        //      180       90\n        //      270        0\n        //      330      -60 (add 360 to get a positive equivalent value: -60 + 360 = 300)\n        //\n        // Formula: polar-angle = 270 - knob-angle\n        //\n\n        if (!elem) {\n            throw \"You must pass a DOM node reference to the Knob constructor\";\n        }\n\n        let trace = false;    // when true, will log more details in the console; use enableDebug(), disableDebug() to change\n\n        // It is faster to access a property than to access a variable...\n        // See https://jsperf.com/vars-vs-props-speed-comparison/1\n\n        const NS = \"http://www.w3.org/2000/svg\";\n        const CW = true;    // clock-wise\n        const CCW = !CW;    // counter clock-wise\n\n        //---------------------------------------------------------------------\n        // To simplify the internal coordinates transformations, we set the view box as a 100 by 100 square.\n        // But, if a label is present, then we add 20 to the height (at the bottom) as a placeholder for the label.\n        // In summary:\n        // - 0,0..99,99: the knob itself\n        // - 0,100..99,119: the label, if any\n        const VIEWBOX_WIDTH = 100;\n        // const VIEWBOX_HEIGHT = config.with_label ? 120 : 100;\n        const HALF_WIDTH = 50;      // viewBox/2\n        const HALF_HEIGHT = 50;     // viewBox/2\n\n        let svg_element;\n\n        if (typeof elem === \"string\" || elem instanceof String) {\n            elem = document.querySelector(elem);\n        }\n\n        if (elem.nodeName.toLowerCase() === \"svg\") {\n            svg_element = elem;\n        } else {\n            svg_element = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n            elem.appendChild(svg_element);\n        }\n\n        // For the user convenience, the label can be set with the \"data-label\" attribute.\n        // If another label is set in data-config then this later definition will override data-label.\n        // let default_label = svg_element.dataset.label !== undefined ? svg_element.dataset.label : \"\";\n        let label = elem.dataset.label !== undefined ? elem.dataset.label : false;\n\n        let defaults = {\n\n            // User configurable properties. The colors are defined in the 'palettes', later on.\n\n            // No camelCase because we want to be able to have the same name in data- attributes.\n\n            label: false,\n\n            rotation: CW,\n\n            default_value: 0,\n            initial_value: 0,\n            value_min: 0.0,\n            value_max: 100.0,\n            value_resolution: 1,        // null means ignore\n\n            // split knob:\n            center_zero: false,\n            center_value: null,         // if null, the value will be computed from the min and max in the init() method\n            center_gap: 4,              // only used when center_zero=true; is the width of the gap between the left and right track around the zero value.\n\n            // position:\n            zero_at: 270.0,             // [deg] (polar) the 0 degree will be at 270 polar degrees (6 o'clock).\n            angle_min: 30.0,            // [deg] Angle in knob coordinates (0 at 6 0'clock)\n            angle_max: 330.0,           // [deg] Angle in knob coordinates (0 at 6 0'clock)\n\n            // background disk:\n            bg_radius: 32,\n            bg_border_width: 1,\n\n            // track background:\n            track_bg_radius: 40,\n            track_bg_width: 8,\n\n            // track:\n            track_radius: 40,\n            track_width: 8,\n\n            // cursor\n            cursor_radius: 18,          // same unit as radius\n            cursor_length: 10,\n            cursor_width: 4,\n\n            // appearance:\n            palette: \"light\",\n            bg: false,\n            track_bg: true,\n            track: true,\n            cursor: false,\n            // CSS class names\n            linecap: \"butt\",                   // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n\n            // text displayed in the middle of the knob:\n            value_text: true,\n            value_position: HALF_HEIGHT + 8,    // empirical value: HALF_HEIGHT + config.font_size / 3\n            font_family: \"sans-serif\",\n            font_size: 25,\n\n            // callback to get the text to display from the current value\n            display_raw: false,                 // if true, format callback is ignored\n            format_raw: v => Math.round(v),\n            format: v => v,                     // formatting of the displayed value\n            // off_text: null,                     // text to display when raw_value = min\n            // out_of_range_text: null,            // text to display when raw_value is out of range\n\n            font_weight: \"bold\",\n            markers: 0,                         // number of markers; 0 or false to disable\n            markers_radius: 40,\n            markers_length: 8,\n            markers_width: 2,\n\n            class_bg: \"knob-bg\",\n            class_track_bg : \"knob-track-bg\",\n            class_track : \"knob-track\",\n            class_value : \"knob-value\",\n            class_cursor : \"knob-cursor\",\n            class_markers: \"knob-markers\",\n\n            snap_to_steps: false,       // TODO\n\n            // mouse wheel support:\n            mouse_wheel_acceleration: 1,\n\n            onchange: null              // callback function\n        };\n\n        //---------------------------------------------------------------------\n        // Consolidate all configs:\n\n        let data_config = JSON.parse(elem.dataset.config || \"{}\");\n        let c = Object.assign({}, defaults, palettes[defaults.palette], conf, data_config);\n        // we re-assign conf and data_config for the case they override some of the palette colors.\n        let config = Object.assign(c, palettes[c.palette], conf, data_config);\n\n        //---------------------------------------------------------------------\n        // Terminates the SVG element setup:\n\n        let viewbox_height;\n        if (config.label || (config.value_position >= (100 - (config.font_size / 2)))) {\n            // make some room for the label or the value that we want to display below the knob\n            viewbox_height = 120;\n        } else {\n            viewbox_height = 100;\n        }\n\n        // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n        svg_element.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n        svg_element.setAttributeNS(null, \"viewBox\", `0 0 ${VIEWBOX_WIDTH} ${viewbox_height}`);\n\n        // Center of arc in knob coordinates and in ViewPort\"s pixels relative to the <svg> ClientBoundingRect.\n        let arcCenterXPixels = 0;\n        let arcCenterYPixels = 0; // equal to arcCenterXPixels because the knob is a circle\n\n        //---------------------------------------------------------------------\n        // Pre-computed values to speed-up operations:\n\n        // At the top of the knob, we leave a gap between the left and right tracks.\n        // These are angles that delimit this gap:\n        let left_track_end_angle = 0;     // angle in [degrees]\n        let right_track_start_angle = 0;  // angle in [degrees]\n\n        //---------------------------------------------------------------------\n        // internals\n\n        let value = 0.0;                    // current knob's value [value_min..value_max]\n        let angle = config.angle_min;       // current knob's angle in [deg] and in knob's coordinate (not polar)\n\n        let distance = 0.0;                 // distance from arc center to mouse position\n        let mouse_wheel_direction = 1;      // dependant of the OS\n\n        //---------------------------------------------------------------------\n        // SVG elements, from back to front:\n        let svg_bg = null;           // background disk:\n        let svg_track_bg = null;            // track background; for non zero-centered knobs\n        let svg_track_bg_left = null;       // track background; for zero-centered knobs\n        let svg_track_bg_right = null;      // track background; for zero-centered knobs\n        let svg_track = null;\n        let svg_cursor = null;\n        let svg_divisions = null;\n        let svg_value_text = null;\n        let svg_value_text2 = null;\n\n        //---------------------------------------------------------------------\n        // mouse support\n        let targetRect;\n        let minDeltaY;\n\n        //---------------------------------------------------------------------\n        // true if the current knob value is different from the default value\n        let has_changed = false;    // to spare some getValue() calls when testing if value has changed from default_value\n\n        //---------------------------------------------------------------------\n        // Create the knob:\n\n        init();\n        initValue();\n        draw();\n        attachEventHandlers();\n\n\n        /**\n         * Having a init function allow the knob to be re-configured.\n         */\n        function init() {\n\n            if (trace) console.log(\"init()\");\n\n            if (config.center_zero) {\n                if (!config.center_value) {\n                    config.center_value = getRoundedValue((config.value_max - config.value_min) / 2 + config.value_min);\n                }\n            }\n\n            // At the top of the knob, we leave a gap between the left and right tracks.\n            // 'left_track_end_angle' and 'right_track_start_angle' are the angles that delimit this gap.\n            // Only used if center_zero=true.\n            if (config.linecap === \"butt\") {\n                left_track_end_angle = polarToKnobAngle(Math.acos(-config.center_gap/100.0) * 180.0 / Math.PI);\n                right_track_start_angle = polarToKnobAngle(Math.acos(config.center_gap/100.0) * 180.0 / Math.PI);\n            } else {\n                left_track_end_angle = polarToKnobAngle(Math.acos(-(config.track_width*1.3 + config.center_gap)/100.0) * 180.0 / Math.PI);\n                right_track_start_angle = polarToKnobAngle(Math.acos((config.track_width*1.3 + config.center_gap)/100.0) * 180.0 / Math.PI);\n            }\n\n            // mouse_wheel_direction = _isMacOS() ? -1 : 1; //TODO: really necessary?\n        }\n\n        function initValue() {\n            // set initial value and angle:\n            setValue(config.initial_value ? config.initial_value : config.default_value);\n        }\n\n        /**\n         * Return the value \"rounded\" according to config.value_resolution\n         * @param v value\n         */\n        function getRoundedValue(v) {\n            return config.value_resolution === null ? v : Math.round(v / config.value_resolution) * config.value_resolution;\n        }\n\n        /**\n         *\n         * @param angle [deg] in knob's coordinates\n         * @returns {*}\n         */\n        function getDisplayValue(angle) {\n            if (trace) console.log(\"getDisplayValue\", config.display_raw);\n            let v = getValue(angle);\n            return config.display_raw ? config.format_raw(v) : config.format(v);\n        }\n\n        /**\n         * Trick to adjust the cursor position when the range is odd.\n         */\n        function getCursorCorrection() {\n            let isOdd = n => Math.abs(n % 2) === 1;\n            return isOdd(Math.abs(config.value_max - config.value_min)) ? 0.5 : 0;\n        }\n\n        /**\n         * Get the knob's value determined by the knob's position (angle)\n         * @param a [deg] in knob's coordinates\n         * @returns {number}\n         */\n        function getValue(a) {\n            let p = a === undefined ? angle : a;\n            let v = ((p - config.angle_min) / (config.angle_max - config.angle_min)) * (config.value_max - config.value_min) + config.value_min;\n            return getRoundedValue(v - getCursorCorrection());\n        }\n\n        /**\n         * Set knob's value\n         * @param v\n         */\n        function setValue(v) {\n            if (v < config.value_min) {\n                value = config.value_min;\n            } else if (v > config.value_max) {\n                value = config.value_max;\n            } else {\n                value = v;\n            }\n            setAngle(((v + getCursorCorrection() - config.value_min) / (config.value_max - config.value_min)) * (config.angle_max - config.angle_min) + config.angle_min);\n            if (trace) console.log(`setValue(${v}) angle=` + ((v - config.value_min) / (config.value_max - config.value_min)) * (config.angle_max - config.angle_min) + config.angle_min);\n            return true;\n        }\n\n        /**\n         * Set knob's angle\n         * @param new_angle in [deg]\n         * @param fire_event\n         */\n        function setAngle(new_angle, fire_event) {\n            let prev = angle;\n            let notify = fire_event && (new_angle !== angle);\n            angle = Math.min(Math.max(new_angle, config.angle_min), config.angle_max);\n            if (notify) {\n                // fire the event if the change of angle affect the value:\n                if (getValue(prev) !== getValue()) {\n                    notifyChange();\n                }\n            }\n        }\n\n        /**\n         * Increment (or decrement if the increment is negative) the knob's angle.\n         * @param increment\n         */\n        function incAngle(increment) {\n            setAngle(Math.min(Math.max(angle + increment, config.angle_min), config.angle_max), true);\n        }\n\n        /**\n         * Return polar coordinates angle from our \"knob coordinates\" angle\n         */\n        function knobToPolarAngle(angle) {\n            let a = config.zero_at - angle;\n            if (a < 0) a = a + 360.0;\n            if (trace) console.log(`knobToPolarAngle ${angle} -> ${a}`);\n            return a;\n        }\n\n        /**\n         *\n         * @param angle [deg] with 0 at 3 o'clock\n         * @returns {number}\n         */\n        function polarToKnobAngle(angle) {\n            // \"-\" for changing CCW to CW\n            if (trace) console.log(`polarToKnobAngle ${angle} -> ${(config.zero_at - angle + 360.0) % 360.0}`);\n            return (config.zero_at - angle + 360.0) % 360.0;    // we add 360 to handle negative values down to -360\n        }\n\n        /**\n         * startDrag() must have been called before to init the targetRect variable.\n         */\n        function mouseUpdate(e) {\n\n            // MouseEvent.clientX (standard property: YES)\n            // The clientX read-only property of the MouseEvent interface provides\n            // the horizontal coordinate within the application's client area at which\n            // the event occurred (as opposed to the coordinates within the page).\n            // For example, clicking in the top-left corner of the client area will always\n            // result in a mouse event with a clientX value of 0, regardless of whether\n            // the page is scrolled horizontally. Originally, this property was defined\n            // as a long integer. The CSSOM View Module redefined it as a double float.\n\n            let dxPixels = e.clientX - targetRect.left;\n            let dyPixels = e.clientY - targetRect.top;\n\n            // mouse delta in cartesian coordinate with path center=0,0 and scaled (-1..0..1) relative to path:\n            // <svg> center:       (dx, dy) == ( 0,  0)\n            // <svg> top-left:     (dx, dy) == (-1,  1)\n            // <svg> bottom-right: (dx, dy) == ( 1, -1) (bottom right of the 100x100 viewBox, ignoring the bottom 100x20 for the label)\n            let dx = (dxPixels - arcCenterXPixels) / (targetRect.width / 2);\n            let dy = - (dyPixels - arcCenterYPixels) / (targetRect.width / 2);  // targetRect.width car on a 20px de plus en hauteur pour le label\n\n            if (config.rotation === CCW) dx = - dx;\n\n            // convert to polar coordinates\n            let angle_rad = Math.atan2(dy, dx);\n            if (angle_rad < 0) angle_rad = 2.0*Math.PI + angle_rad;\n\n            if (trace) console.log(`mouseUpdate: position in svg = ${dxPixels}, ${dyPixels} pixels; ${dx.toFixed(3)}, ${dy.toFixed(3)} rel.; angle ${angle_rad.toFixed(3)} rad`);\n\n            setAngle(polarToKnobAngle(angle_rad * 180.0 / Math.PI), true);\n\n            // distance from arc center to mouse position:\n            // distance = Math.sqrt(dx*(HALF_WIDTH/config.track_radius)*dx*(HALF_WIDTH/config.track_radius) + dy*(HALF_HEIGHT/config.track_radius)*dy*(HALF_HEIGHT/config.track_radius));\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function startDrag(e) {\n\n            if (trace) console.log(\"startDrag\");\n\n            e.preventDefault();\n\n            // API: Event.currentTarget\n            //      Identifies the current target for the event, as the event traverses the DOM. It always REFERS TO THE ELEMENT\n            //      TO WHICH THE EVENT HANDLER HAS BEEN ATTACHED, as opposed to event.target which identifies the element on\n            //      which the event occurred.\n            //      https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n\n            // currentTarget = e.currentTarget;\n\n            // API: Element.getBoundingClientRect() (standard: YES)\n            //      The Element.getBoundingClientRect() method returns the size of an element\n            //      and its POSITION RELATIVE TO THE VIEWPORT.\n            //      The amount of scrolling that has been done of the viewport area (or any other\n            //      scrollable element) is taken into account when computing the bounding rectangle.\n            //      This means that the rectangle's boundary edges (top, left, bottom, and right)\n            //      change their values every time the scrolling position changes (because their\n            //      values are relative to the viewport and not absolute).\n            //      https://developer.mozilla.org/en/docs/Web/API/Element/getBoundingClientRect\n\n            // targetRect = currentTarget.getBoundingClientRect(); // currentTarget must be the <svg...> object\n            targetRect = svg_element.getBoundingClientRect();\n\n            // Note: we must take the boundingClientRect of the <svg> and not the <path> because the <path> bounding rect\n            //       is not constant because it encloses the current arc.\n\n            // By design, the arc center is at equal distance from top and left.\n            arcCenterXPixels = targetRect.width / 2;\n            //noinspection JSSuspiciousNameCombination\n            arcCenterYPixels = arcCenterXPixels;\n\n            document.addEventListener(\"mousemove\", handleDrag, false);\n            document.addEventListener(\"mouseup\", endDrag, false);\n\n            mouseUpdate(e);\n            redraw();\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function handleDrag(e) {\n            e.preventDefault();\n            mouseUpdate(e);\n            redraw();\n        }\n\n        /**\n         *\n         */\n        function endDrag() {\n            if (trace) console.log(\"endDrag\");\n            document.removeEventListener(\"mousemove\", handleDrag, false);\n            document.removeEventListener(\"mouseup\", endDrag, false);\n        }\n\n        /**\n         *\n         * @param e\n         * @returns {boolean}\n         */\n        function mouseWheelHandler(e) {\n\n            // WheelEvent\n            // This is the standard wheel event interface to use. Old versions of browsers implemented the two non-standard\n            // and non-cross-browser-compatible MouseWheelEvent and MouseScrollEvent interfaces. Use this interface and avoid\n            // the latter two.\n            // The WheelEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.\n\n            // https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\n            // https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js\n\n            e.preventDefault();\n\n            let dy = e.deltaY;\n\n            if (dy !== 0) {\n                // normalize Y delta\n                if (minDeltaY > Math.abs(dy) || !minDeltaY) {\n                    minDeltaY = Math.abs(dy);\n                }\n            }\n\n            incAngle(dy / minDeltaY * mouse_wheel_direction * config.mouse_wheel_acceleration);\n\n            // TODO: mouse speed detection (https://stackoverflow.com/questions/22593286/detect-measure-scroll-speed)\n\n            redraw();\n\n            return false;\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function startTouch(e) {\n\n            if (trace) console.log(\"startTouch\");\n\n            e.preventDefault(); // necessary to avoid moving all the page\n\n            targetRect = svg_element.getBoundingClientRect();\n\n            // By design, the arc center is at equal distance from top and left.\n            arcCenterXPixels = targetRect.width / 2;\n            //noinspection JSSuspiciousNameCombination\n            arcCenterYPixels = arcCenterXPixels;\n\n            document.addEventListener(\"touchmove\", handleTouch, {passive: false});\n            document.addEventListener(\"touchend\", endTouch);\n\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function handleTouch(e) {\n\n            if (trace) console.log(\"handleTouch\", e.touches);\n\n            e.preventDefault();\n\n            let touchesIndex = e.touches.length - 1;\n\n            let dxPixels = e.touches[touchesIndex].clientX - targetRect.left;\n            let dyPixels = e.touches[touchesIndex].clientY - targetRect.top;\n\n            let dx = (dxPixels - arcCenterXPixels) / (targetRect.width / 2);\n            let dy = - (dyPixels - arcCenterYPixels) / (targetRect.width / 2);  // targetRect.width car on a 20px de plus en hauteur pour le label\n\n            if (config.rotation === CCW) dx = - dx;\n\n            // convert to polar coordinates\n            let angle_rad = Math.atan2(dy, dx);\n            if (angle_rad < 0) angle_rad = 2.0*Math.PI + angle_rad;\n\n            if (trace) console.log(`handleTouch: position in svg = ${dxPixels}, ${dyPixels} pixels; ${dx.toFixed(3)}, ${dy.toFixed(3)} rel.; angle ${angle_rad.toFixed(3)} rad`);\n\n            setAngle(polarToKnobAngle(angle_rad * 180.0 / Math.PI), true);\n\n            redraw();\n\n        }\n\n        /**\n         *\n         */\n        function endTouch() {\n            if (trace) console.log(\"endTouch\");\n            document.removeEventListener(\"touchmove\", handleTouch);\n            document.removeEventListener(\"touchend\", endTouch);\n        }\n\n        /**\n         *\n         */\n        function attachEventHandlers() {\n            if (trace) console.log(\"attach attachEventHandlers\");\n            svg_element.addEventListener(\"mousedown\", function(e) {\n                startDrag(e);\n            });\n            svg_element.addEventListener(\"wheel\", function(e) {\n                mouseWheelHandler(e);\n            });\n            svg_element.addEventListener(\"touchstart\", startTouch, {passive: false});\n        }\n\n        /**\n         *\n         */\n        function notifyChange() {\n            if (trace) console.log(\"knob value has changed\");\n            let value = getValue();     // TODO: cache the value\n            let event = new CustomEvent(\"change\", {\"detail\": value});\n            //svg_element.dispatchEvent(event);\n            elem.dispatchEvent(event);\n            if (config.onchange) {\n                config.onchange(value);\n            }\n        }\n\n        /**\n         * Utility function to configure the mousewheel direction.\n         * @returns {*}\n         * @private\n         */\n        function _isMacOS() {\n            return [\"Macintosh\", \"MacIntel\", \"MacPPC\", \"Mac68K\"].indexOf(window.navigator.platform) !== -1;\n        }\n\n        /**\n         * Return viewBox X,Y coordinates\n         * @param angle in [degree] (polar, 0 at 3 o'clock)\n         * @param radius; defaults to config.radius\n         * @returns {{x: number, y: number}}\n         */\n        function getViewboxCoord(angle, radius) {\n            let a = angle * Math.PI / 180.0;\n            let r = radius === undefined ? config.track_radius : radius;\n            let x = Math.cos(a) * r;\n            let y = Math.sin(a) * r;\n            return {\n                x: config.rotation === CW ? (HALF_WIDTH + x) : (HALF_WIDTH - x),\n                y: HALF_HEIGHT - y\n            }\n        }\n\n        /**\n         *\n         * @param from_angle in [degree] in knob's coordinates\n         * @param to_angle in [degree] in knob's coordinates\n         * @param radius\n         */\n        function getArc(from_angle, to_angle, radius) {\n\n            if (trace) console.group(`getArc(${from_angle}, ${to_angle}, ${radius})`);\n\n            // SVG d: \"A rx,ry xAxisRotate LargeArcFlag,SweepFlag x,y\".\n            // SweepFlag is either 0 or 1, and determines if the arc should be swept in a clockwise (1), or anti-clockwise (0) direction\n            // ref: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d\n\n            let a0 = knobToPolarAngle(from_angle);\n            let a1 = knobToPolarAngle(to_angle);\n\n            // little trick to force a full arc (360deg) when from=0 and to=360\n            if (from_angle !== to_angle) {\n                // with this we make sure that x1 will be different than x0 within the path definition\n                a0 -= 0.0001;\n                a1 += 0.0001;\n            }\n\n            let {x: x0, y: y0} = getViewboxCoord(a0, radius);\n            let {x: x1, y: y1} = getViewboxCoord(a1, radius);\n\n            let delta_angle = (a0 - a1 + 360.0) % 360.0;\n\n            let large_arc = delta_angle < 180.0 ? 0 : 1;\n            let arc_direction = config.rotation === CW ? 1 : 0;\n\n            let p = `M ${x0},${y0} A ${radius},${radius} 0 ${large_arc},${arc_direction} ${x1},${y1}`;\n\n            if (trace) console.groupEnd();\n            if (trace) console.log(\"arc: \" + p);\n\n            return p;\n        }\n\n        /**\n         *\n         * @returns {*}\n         */\n        function getTrackPath() {\n\n            if (trace) console.log(\"getTrackPath()\");\n\n            let p = null;\n\n            if (config.center_zero) {\n\n                if (Array.isArray(config.center_value)) {\n                    // let v = getValue();\n                    // console.log('center value is an array; getValue=', getValue(), typeof v);\n                    if (config.center_value.includes(getValue())) {\n                        if (trace) console.log(\"getTrackPath: center position, track not drawn\");\n                        // track is not drawn when the value is at center\n                        return p;\n                    }\n                } else {\n                    if (getValue() === config.center_value) {\n                        if (trace) console.log(\"getTrackPath: center position, track not drawn\");\n                        // track is not drawn when the value is at center\n                        return p;\n                    }\n                }\n\n                // we assume the split is at 180 [deg] (knob\"s angle)\n                if (angle < 180) {\n                    p = getArc(Math.min(angle, left_track_end_angle), left_track_end_angle, config.track_radius);\n                } else if (angle > 180) {\n                    p = getArc(right_track_start_angle, Math.max(angle, right_track_start_angle), config.track_radius);\n                }\n\n            } else {\n                p = getArc(config.angle_min, angle, config.track_radius);\n            }\n\n            return p;\n        }\n\n        /**\n         *\n         */\n        function draw_background() {\n\n            if (trace) console.log(\"draw_background()\", config.bg);\n\n            if (!config.bg) return;\n\n            // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n\n            //\n            // back disk:\n            //\n            svg_bg = document.createElementNS(NS, \"circle\");\n            svg_bg.setAttributeNS(null, \"cx\", `${HALF_WIDTH}`);\n            svg_bg.setAttributeNS(null, \"cy\", `${HALF_HEIGHT}`);\n            svg_bg.setAttributeNS(null, \"r\", `${config.bg_radius}`);\n            svg_bg.setAttribute(\"fill\", `${config.bg_color}`);\n            svg_bg.setAttribute(\"stroke\", `${config.bg_border_color}`);\n            svg_bg.setAttribute(\"stroke-width\", `${config.bg_border_width}`);\n            svg_bg.setAttribute(\"class\", config.class_bg);\n            svg_element.appendChild(svg_bg);\n        }\n\n        /**\n         *\n         */\n        function draw_markers() {\n\n            if (trace) console.log(\"draw_markers()\", config.markers);\n\n            if (!config.markers) return;\n\n            let p = \"\";\n            let step = (config.angle_max - config.angle_min) / config.markers;\n            for (let a = config.angle_min; a <= config.angle_max; a += step) {\n                let from = getViewboxCoord(knobToPolarAngle(a), config.markers_radius);    // getViewboxCoord(angle, radius)\n                let to = getViewboxCoord(knobToPolarAngle(a), config.markers_radius + config.markers_length);\n                p += `M ${from.x},${from.y} L ${to.x},${to.y} `;\n            }\n\n            svg_divisions = document.createElementNS(NS, \"path\");\n            svg_divisions.setAttributeNS(null, \"d\", p);\n            svg_divisions.setAttribute(\"stroke\", `${config.markers_color}`);\n            svg_divisions.setAttribute(\"stroke-width\", `${config.markers_width}`);\n            svg_divisions.setAttribute(\"stroke-linecap\", config.linecap);\n            svg_divisions.setAttribute(\"class\", config.class_markers);\n            svg_element.appendChild(svg_divisions);\n        }\n\n/*\n        function draw_units() {\n            let pos = getViewboxCoord(angle_min_polar, config.divisions_radius);    // getViewboxCoord(angle, radius)\n            svg_value_text = document.createElementNS(NS, \"text\");\n            svg_value_text.setAttributeNS(null, \"x\", `${pos.x}`);\n            svg_value_text.setAttributeNS(null, \"y\", `${pos.y}`);\n            // svg_value_text.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text.setAttribute(\"cursor\", \"default\");\n            svg_value_text.setAttribute(\"font-family\", config.font_family);\n            svg_value_text.setAttribute(\"font-size\", `10`);\n            // svg_value_text.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text.setAttribute(\"fill\", config.font_color);\n            // svg_value_text.setAttribute(\"class\", config.class_value);\n            // svg_value_text.textContent = getDisplayValue();\n            svg_value_text.textContent = config.value_min.toString();\n            svg_element.appendChild(svg_value_text);\n        }\n*/\n\n        /**\n         *\n         */\n        function draw_track_background() {\n\n            if (trace) console.log(\"draw_track_background()\", config.track_bg);\n\n            // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n\n            if (!config.track_bg) return;\n\n            //\n            // track background:\n            //\n            if (config.center_zero) {\n\n                // left track background\n                svg_track_bg_left = document.createElementNS(NS, \"path\");\n                svg_track_bg_left.setAttributeNS(null, \"d\", getArc(config.angle_min, left_track_end_angle, config.track_bg_radius));\n                svg_track_bg_left.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg_left.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg_left.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg_left.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg_left.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg_left);\n\n                // right track background\n                svg_track_bg_right = document.createElementNS(NS, \"path\");\n                svg_track_bg_right.setAttributeNS(null, \"d\", getArc(right_track_start_angle, config.angle_max, config.track_bg_radius));\n                svg_track_bg_right.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg_right.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg_right.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg_right.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg_right.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg_right);\n\n            } else {\n\n                svg_track_bg = document.createElementNS(NS, \"path\");\n                svg_track_bg.setAttributeNS(null, \"d\", getArc(config.angle_min, config.angle_max, config.track_bg_radius));\n                svg_track_bg.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg);\n\n            }\n        }\n\n        /**\n         *\n         */\n        function draw_track() {\n\n            if (trace) console.log(\"draw_track()\", config.track);\n\n            if (!config.track) return;\n            let p = getTrackPath();\n            if (p) {\n                svg_track = document.createElementNS(NS, \"path\");\n                svg_track.setAttributeNS(null, \"d\", p);\n                svg_track.setAttribute(\"stroke\", `${config.track_color_init}`);\n                svg_track.setAttribute(\"stroke-width\", `${config.track_width}`);\n                svg_track.setAttribute(\"fill\", \"transparent\");\n                svg_track.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track.setAttribute(\"class\", config.class_track);\n                svg_element.appendChild(svg_track);\n            }\n        }\n\n        /**\n         *\n         * @returns {string}\n         */\n        function getTrackCursor() {\n            let a = knobToPolarAngle(angle);\n            let from = getViewboxCoord(a, config.cursor_radius);\n            let to = getViewboxCoord(a, config.cursor_radius + config.cursor_length);\n            return `M ${from.x},${from.y} L ${to.x},${to.y}`;\n        }\n\n        /**\n         *\n         */\n        function draw_cursor() {\n\n            if (trace) console.log(\"draw_cursor()\", config.cursor);\n\n            if (!config.cursor) return;\n\n            let p = getTrackCursor();\n            if (p) {\n                svg_cursor = document.createElementNS(NS, \"path\");\n                svg_cursor.setAttributeNS(null, \"d\", p);\n                svg_cursor.setAttribute(\"stroke\", `${config.cursor_color_init}`);\n                svg_cursor.setAttribute(\"stroke-width\", `${config.cursor_width}`);\n                svg_cursor.setAttribute(\"fill\", \"transparent\");\n                svg_cursor.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_cursor.setAttribute(\"class\", config.class_cursor);\n                svg_element.appendChild(svg_cursor);\n            }\n        }\n\n        function getFontSize(text, multiline=false) {\n            if (typeof text !== \"string\") return config.font_size;\n            const f = 22;   // empiric value\n            let m = Math.min(f, text.length);\n            if (multiline) {\n                return config.font_size * Math.min(0.75, Math.max(((f - m) / f), 0.25));\n            } else {\n                return config.font_size * Math.max(((f - m) / f), 0.25);\n            }\n\n        }\n\n        function draw_value_line1(text, multiline=false) {\n            if (trace) console.log(\"draw_value_line1\", text);\n            svg_value_text = document.createElementNS(NS, \"text\");\n            svg_value_text.setAttributeNS(null, \"x\", `${HALF_WIDTH}`);\n            svg_value_text.setAttributeNS(null, \"y\", `${config.value_position}`);\n            svg_value_text.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text.setAttribute(\"cursor\", \"default\");\n            svg_value_text.setAttribute(\"font-family\", config.font_family);\n            svg_value_text.setAttribute(\"font-size\", `${getFontSize(text, multiline)}`);\n            svg_value_text.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text.setAttribute(\"fill\", config.font_color);\n            svg_value_text.setAttribute(\"class\", config.class_value);\n            svg_value_text.textContent = text;\n            svg_element.appendChild(svg_value_text);\n        }\n\n        function draw_value_line2(text) {\n            if (trace) console.log(\"draw_value_line2\", text);\n            svg_value_text2 = document.createElementNS(NS, \"text\");\n            svg_value_text2.setAttributeNS(null, \"x\", `${HALF_WIDTH}`);\n            svg_value_text2.setAttributeNS(null, \"y\", `${config.value_position + 4}`);\n            svg_value_text2.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text2.setAttribute(\"cursor\", \"default\");\n            svg_value_text2.setAttribute(\"font-family\", config.font_family);\n            svg_value_text2.setAttribute(\"font-size\", `${getFontSize(text, true)}`);\n            svg_value_text2.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text2.setAttribute(\"fill\", config.font_color);\n            svg_value_text2.setAttribute(\"class\", config.class_value);\n            svg_value_text2.textContent = text;\n            svg_element.appendChild(svg_value_text2);\n\n        }\n\n        /**\n         *\n         */\n        function draw_value() {\n\n            if (trace) console.log(\"draw_value\", config.value_text);\n\n            if (!config.value_text) return;\n\n            const t = getDisplayValue();\n\n            if (typeof t === \"number\" || t.indexOf(\"\\n\") <= 0) {\n\n                if (trace) console.log(\"single line\");\n                draw_value_line1(t)\n\n            } else {\n                const lines = t.split(\"\\n\");\n                if (trace) console.log(\"two lines\", lines);\n\n                draw_value_line1(lines[0], true);\n                draw_value_line2(lines[1]);\n            }\n\n        }\n\n        function update_value() {\n\n            if (trace) console.log(\"update_value\", config.value_text);\n\n            if (!config.value_text) return;\n\n            const t = getDisplayValue();\n\n            if (typeof t === \"number\" || t.indexOf(\"\\n\") <= 0) {\n                // single line:\n\n                if (trace) console.log(\"single line\");\n\n                if (svg_value_text) {\n                    svg_value_text.setAttributeNS(null, \"y\", `${config.value_position}`);\n                    svg_value_text.setAttribute(\"font-size\", `${getFontSize(t)}`);\n                    svg_value_text.textContent = t;\n                }\n\n                if (svg_value_text2) {\n                    svg_element.removeChild(svg_value_text2);\n                    svg_value_text2 = null;\n                }\n\n            } else {\n                // two lines:\n\n                const lines = t.split(\"\\n\");\n                if (trace) console.log(\"two lines\", t, lines);\n\n                if (svg_value_text) {\n                    svg_value_text.setAttributeNS(null, \"y\", `${config.value_position - 12}`);\n                    svg_value_text.setAttribute(\"font-size\", `${getFontSize(lines[0], true)}`);\n                    svg_value_text.textContent = lines[0];\n                }\n\n                if (svg_value_text2) {\n                    svg_value_text2.setAttributeNS(null, \"y\", `${config.value_position + 4}`);\n                    svg_value_text2.setAttribute(\"font-size\", `${getFontSize(lines[1], true)}`);\n                    svg_value_text2.textContent = lines[1];\n                } else {\n                    draw_value_line2(lines[1]);\n                }\n            }\n\n        }\n\n        /**\n         *\n         */\n        function draw() {\n\n            if (trace) console.log(\"draw()\", config);\n\n            draw_background();\n            draw_track_background();\n            draw_markers();\n            // draw_units();\n            draw_track();\n            draw_cursor();\n            draw_value();\n        }\n\n        /**\n         *\n         */\n        function redraw() {\n\n            if (trace) console.log(\"redraw()\", config);\n\n            let p = getTrackPath();\n            if (p) {\n                if (svg_track) {\n                    if (trace) console.log(\"redraw track already exist, update d\");\n                    svg_track.setAttributeNS(null, \"d\", p);\n                } else {\n                    if (trace) console.log(\"redraw draw_track\");\n                    draw_track();\n                }\n            } else {\n                if (svg_track) {\n                    if (trace) console.log(\"redraw track already exist, hide it\");\n                    svg_track.setAttributeNS(null, \"d\", \"\");    // we hide the track\n                }\n            }\n\n            if (!has_changed) {\n                has_changed = getValue() !== config.default_value;\n                if (has_changed) {\n                    if (svg_track) {\n                        svg_track.setAttribute(\"stroke\", `${config.track_color}`);\n                    }\n                }\n            }\n\n            if (svg_cursor) {\n                p = getTrackCursor();\n                if (p) {\n                    if (trace) console.log(\"redraw cursor\");\n                    svg_cursor.setAttributeNS(null, \"d\", p);\n                    if (has_changed) {\n                        svg_cursor.setAttribute(\"stroke\", `${config.cursor_color}`);\n                    }\n                }\n            }\n\n            if (svg_value_text) {\n                if (trace) console.log(\"redraw svg_value_text\");\n                // svg_value_text.textContent = getDisplayValue();\n                update_value();\n            }\n        }\n\n        /**\n         *\n         */\n        return {\n            set value(v) {\n                // console.group(\"value setter\");\n                setValue(v);\n                redraw();\n                // console.groupEnd();\n            },\n            set config(new_config) {\n                // console.group(\"config setter\");\n                config = Object.assign({}, defaults, config, new_config);\n                init();\n                redraw();\n                // console.groupEnd();\n            },\n            setConfigValue: function(attribute, value) {\n                // console.group(\"setConfigValue\");\n                config[attribute] = value;\n                init();\n                redraw();\n                // console.groupEnd();\n            },\n            initValue,\n            enableDebug: function() {\n                trace = true;\n            },\n            disableDebug: function() {\n                trace = false;\n            }\n        };\n\n    }\n"],"names":["light","bg_color","bg_border_color","track_bg_color","track_color_init","track_color","cursor_color_init","cursor_color","markers_color","font_color","light2","dark","elem","conf","svg_element","trace","NS","CW","CCW","HALF_WIDTH","HALF_HEIGHT","String","document","querySelector","nodeName","toLowerCase","createElementNS","appendChild","viewbox_height","defaults","label","rotation","default_value","initial_value","value_min","value_max","value_resolution","center_zero","center_value","center_gap","zero_at","angle_min","angle_max","bg_radius","bg_border_width","track_bg_radius","track_bg_width","track_radius","track_width","cursor_radius","cursor_length","cursor_width","palette","bg","track_bg","track","cursor","linecap","value_text","value_position","font_family","font_size","display_raw","format_raw","v","Math","round","format","font_weight","markers","markers_radius","markers_length","markers_width","class_bg","class_track_bg","class_track","class_value","class_cursor","class_markers","snap_to_steps","mouse_wheel_acceleration","onchange","data_config","JSON","parse","dataset","config","c","Object","assign","palettes","setAttributeNS","targetRect","minDeltaY","arcCenterXPixels","arcCenterYPixels","left_track_end_angle","right_track_start_angle","angle","svg_bg","svg_track_bg","svg_track_bg_left","svg_track_bg_right","svg_track","svg_cursor","svg_divisions","svg_value_text","svg_value_text2","has_changed","init","console","log","getRoundedValue","polarToKnobAngle","acos","PI","initValue","setValue","getDisplayValue","getValue","getCursorCorrection","n","abs","a","undefined","setAngle","new_angle","fire_event","prev","notify","min","max","value","event","CustomEvent","dispatchEvent","notifyChange","knobToPolarAngle","mouseUpdate","e","dxPixels","clientX","left","dyPixels","clientY","top","dx","width","dy","angle_rad","atan2","toFixed","handleDrag","preventDefault","redraw","endDrag","removeEventListener","handleTouch","touches","touchesIndex","length","endTouch","getViewboxCoord","radius","r","x","cos","y","sin","getArc","from_angle","to_angle","group","a0","a1","p","x0","y0","groupEnd","getTrackPath","Array","isArray","includes","draw_track","setAttribute","getTrackCursor","from","to","getFontSize","text","multiline","m","draw_value_line1","textContent","draw_value_line2","t","indexOf","removeChild","lines","split","update_value","step","draw_markers","draw_cursor","draw_value","addEventListener","getBoundingClientRect","startDrag","deltaY","mouseWheelHandler","passive","new_config","setConfigValue","attribute","enableDebug","disableDebug"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.umd.js","sources":["../src/palettes.js","../src/index.js"],"sourcesContent":["\"use strict\";\n\n//TODO: make _init attributes optional\n\nexport default {\n    light : {\n        bg_color: \"#E0E0E0\",\n        bg_border_color: \"#BDBDBD\",\n        track_bg_color: \"#CFD8DC\",\n        track_color_init: \"#64B5F6\",\n        track_color: \"#42A5F5\",\n        cursor_color_init: \"#64B5F6\",\n        cursor_color: \"#42A5F5\",\n        markers_color: \"#9E9E9E\",\n        font_color: \"#424242\",\n    },\n    light2 : {\n        bg_color: \"#B1DAEE\",\n        bg_border_color: \"#569DC0\",\n        track_bg_color: \"#B1DAEE\",\n        track_color_init: \"#569DC0\",\n        track_color: \"#1D6D93\",\n        cursor_color_init: \"#569DC0\",\n        cursor_color: \"#1D6D93\",\n        markers_color: \"#3680A4\",\n        font_color: \"#1D6D93\",\n    },\n    dark: {\n        bg_color: \"#000000\",\n        bg_border_color: \"#569DC0\",\n        track_bg_color: \"#424242\",\n        track_color_init: \"#FDD835\",\n        track_color: \"#FFEC00\",\n        cursor_color_init: \"#569DC0\",\n        cursor_color: \"#FDD835\",\n        markers_color: \"#3680A4\",\n        font_color: \"#FFEA00\",\n    }\n}\n","\n    \"use strict\";\n\n    import palettes from \"./palettes.js\";\n\n    // FIXME: remove console usage for IE compatibility\n\n    /**\n     *\n     * @param elem DIV or SVN element\n     * @param conf optional config\n     * @returns {{value, config}}\n     */\n    export default function(elem, conf = {}) {\n\n        // Like a real knob, it's the knob's position that determines the knob's value.\n        // Therefore, the value is computed from the knob's position (angle).\n        // However, the user has the possibility to directly set the value and in that case\n        // the knob's position (angle) will be computed from the value and the knob redrawn\n        // accordingly.\n\n        //\n        // All angles in method parameters are in [degrees] (except for polarToKnobAngle() and getViewboxCoord()).\n        //\n        // By default:\n        // - knob direction is CLOCKWISE\n        // - start position is 6 o'clock (bottom)\n        // - knob angle is:\n        //       0 [deg] angle is a   6 o'clock (bottom)\n        //      90 [deg] angle is at  9 o'clock (left)\n        //     180 [deg] angle is at 12 o'clock (top)\n        //     270 [deg] angle is at  3 o'clock (right)\n        //\n        // Trigonometric functions (sin, cos, ...) operate in polar coordinates,\n        // with 0 angle at 3 o'clock and a counter-clockwise direction.\n        // To convert from \"knob angle\" to \"polar angle\":\n        //\n        //     knob    polar\n        // --------------------\n        //        0      270\n        //       30      240\n        //       90      180\n        //      180       90\n        //      270        0\n        //      330      -60 (add 360 to get a positive equivalent value: -60 + 360 = 300)\n        //\n        // Formula: polar-angle = 270 - knob-angle\n        //\n\n        if (!elem) {\n            throw \"You must pass a DOM node reference to the Knob constructor\";\n        }\n\n        let trace = false;    // when true, will log more details in the console; use enableDebug(), disableDebug() to change\n\n        // It is faster to access a property than to access a variable...\n        // See https://jsperf.com/vars-vs-props-speed-comparison/1\n\n        const NS = \"http://www.w3.org/2000/svg\";\n        const CW = true;    // clock-wise\n        const CCW = !CW;    // counter clock-wise\n\n        //---------------------------------------------------------------------\n        // To simplify the internal coordinates transformations, we set the view box as a 100 by 100 square.\n        // But, if a label is present, then we add 20 to the height (at the bottom) as a placeholder for the label.\n        // In summary:\n        // - 0,0..99,99: the knob itself\n        // - 0,100..99,119: the label, if any\n        const VIEWBOX_WIDTH = 100;\n        const VIEWBOX_HEIGHT = config.with_label ? 120 : 100;\n        const HALF_WIDTH = 50;      // viewBox/2\n        const HALF_HEIGHT = 50;     // viewBox/2\n\n        let svg_element;\n\n        let centerX = HALF_WIDTH;\n        let centerY = HALF_HEIGHT;\n\n        let vbWidth = VIEWBOX_WIDTH;\n\n        // need to insert in into SVG element\n        if (typeof elem === \"string\" || elem instanceof String) {\n            elem = document.querySelector(elem);\n        }\n\n        let nodeType = elem.nodeName.toLowerCase();\n\n        if (nodeType === \"g\") {\n            svg_element = elem;\n            let bbox = svg_element.getBBox();\n\n            centerX = bbox.x + bbox.width * 0.5;\n            centerY = bbox.y + bbox.height * 0.5;\n\n            vbWidth = bbox.width;\n        } else if (nodeType === \"div\") {\n            svg_element = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n            elem.appendChild(svg_element);\n        } else {\n            throw \"Unsupported element type for creating knob, should be a div or an SVG g element!\";\n        }\n\n        // For the user convenience, the label can be set with the \"data-label\" attribute.\n        // If another label is set in data-config then this later definition will override data-label.\n        // let default_label = svg_element.dataset.label !== undefined ? svg_element.dataset.label : \"\";\n        let label = elem.dataset.label !== undefined ? elem.dataset.label : false;\n\n        let defaults = {\n\n            // User configurable properties. The colors are defined in the 'palettes', later on.\n\n            // No camelCase because we want to be able to have the same name in data- attributes.\n\n            label: false,\n\n            rotation: CW,\n\n            default_value: 0,\n            initial_value: 0,\n            value_min: 0.0,\n            value_max: 100.0,\n            value_resolution: 1,        // null means ignore\n\n            // split knob:\n            center_zero: false,\n            center_value: null,         // if null, the value will be computed from the min and max in the init() method\n            center_gap: 4,              // only used when center_zero=true; is the width of the gap between the left and right track around the zero value.\n\n            // position:\n            zero_at: 270.0,             // [deg] (polar) the 0 degree will be at 270 polar degrees (6 o'clock).\n            angle_min: 30.0,            // [deg] Angle in knob coordinates (0 at 6 0'clock)\n            angle_max: 330.0,           // [deg] Angle in knob coordinates (0 at 6 0'clock)\n\n            // background disk:\n            bg_radius: 32,\n            bg_border_width: 1,\n\n            // track background:\n            track_bg_radius: 40,\n            track_bg_width: 8,\n\n            // track:\n            track_radius: 40,\n            track_width: 8,\n\n            // cursor\n            cursor_radius: 18,          // same unit as radius\n            cursor_length: 10,\n            cursor_width: 4,\n\n            // appearance:\n            palette: \"light\",\n            bg: false,\n            track_bg: true,\n            track: true,\n            cursor: false,\n            // CSS class names\n            linecap: \"butt\",                   // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap\n\n            // text displayed in the middle of the knob:\n            value_text: true,\n            value_position: HALF_HEIGHT + 8,    // empirical value: HALF_HEIGHT + config.font_size / 3\n            font_family: \"sans-serif\",\n            font_size: 25,\n\n            // callback to get the text to display from the current value\n            display_raw: false,                 // if true, format callback is ignored\n            format_raw: v => Math.round(v),\n            format: v => v,                     // formatting of the displayed value\n            // off_text: null,                     // text to display when raw_value = min\n            // out_of_range_text: null,            // text to display when raw_value is out of range\n\n            font_weight: \"bold\",\n            markers: 0,                         // number of markers; 0 or false to disable\n            markers_radius: 40,\n            markers_length: 8,\n            markers_width: 2,\n\n            class_bg: \"knob-bg\",\n            class_track_bg : \"knob-track-bg\",\n            class_track : \"knob-track\",\n            class_value : \"knob-value\",\n            class_cursor : \"knob-cursor\",\n            class_markers: \"knob-markers\",\n\n            snap_to_steps: false,       // TODO\n\n            // mouse wheel support:\n            mouse_wheel_acceleration: 1,\n\n            onchange: null              // callback function\n        };\n\n        //---------------------------------------------------------------------\n        // Consolidate all configs:\n\n        let data_config = JSON.parse(elem.dataset.config || \"{}\");\n        let c = Object.assign({}, defaults, palettes[defaults.palette], conf, data_config);\n        // we re-assign conf and data_config for the case they override some of the palette colors.\n        let config = Object.assign(c, palettes[c.palette], conf, data_config);\n\n        //---------------------------------------------------------------------\n        // Terminates the SVG element setup:\n\n        // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n        svg_element.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n\n        if (vbWidth === VIEWBOX_WIDTH) {\n            let viewbox_height;\n            if (config.label || (config.value_position >= (vbWidth - (config.font_size / 2)))) {\n                // make some room for the label or the value that we want to display below the knob\n                viewbox_height = 120;\n            } else {\n                viewbox_height = 100;\n            }\n            svg_element.setAttributeNS(null, \"viewBox\", `0 0 ${VIEWBOX_WIDTH} ${viewbox_height}`);\n        }\n\n        // Center of arc in knob coordinates and in ViewPort\"s pixels relative to the <svg> ClientBoundingRect.\n        let arcCenterXPixels = 0;\n        let arcCenterYPixels = 0; // equal to arcCenterXPixels because the knob is a circle\n\n        //---------------------------------------------------------------------\n        // Pre-computed values to speed-up operations:\n\n        // At the top of the knob, we leave a gap between the left and right tracks.\n        // These are angles that delimit this gap:\n        let left_track_end_angle = 0;     // angle in [degrees]\n        let right_track_start_angle = 0;  // angle in [degrees]\n\n        //---------------------------------------------------------------------\n        // internals\n\n        let value = 0.0;                    // current knob's value [value_min..value_max]\n        let angle = config.angle_min;       // current knob's angle in [deg] and in knob's coordinate (not polar)\n\n        let distance = 0.0;                 // distance from arc center to mouse position\n        let mouse_wheel_direction = 1;      // dependant of the OS\n\n        //---------------------------------------------------------------------\n        // SVG elements, from back to front:\n        let svg_bg = null;           // background disk:\n        let svg_track_bg = null;            // track background; for non zero-centered knobs\n        let svg_track_bg_left = null;       // track background; for zero-centered knobs\n        let svg_track_bg_right = null;      // track background; for zero-centered knobs\n        let svg_track = null;\n        let svg_cursor = null;\n        let svg_divisions = null;\n        let svg_value_text = null;\n        let svg_value_text2 = null;\n\n        //---------------------------------------------------------------------\n        // mouse support\n        let targetRect;\n        let minDeltaY;\n\n        //---------------------------------------------------------------------\n        // true if the current knob value is different from the default value\n        let has_changed = false;    // to spare some getValue() calls when testing if value has changed from default_value\n\n        //---------------------------------------------------------------------\n        // Create the knob:\n\n        init();\n        initValue();\n        draw();\n        attachEventHandlers();\n\n\n        /**\n         * Having a init function allow the knob to be re-configured.\n         */\n        function init() {\n\n            if (trace) console.log(\"init()\");\n\n            if (config.center_zero) {\n                if (!config.center_value) {\n                    config.center_value = getRoundedValue((config.value_max - config.value_min) / 2 + config.value_min);\n                }\n            }\n\n            // At the top of the knob, we leave a gap between the left and right tracks.\n            // 'left_track_end_angle' and 'right_track_start_angle' are the angles that delimit this gap.\n            // Only used if center_zero=true.\n            if (config.linecap === \"butt\") {\n                left_track_end_angle = polarToKnobAngle(Math.acos(-config.center_gap/100.0) * 180.0 / Math.PI);\n                right_track_start_angle = polarToKnobAngle(Math.acos(config.center_gap/100.0) * 180.0 / Math.PI);\n            } else {\n                left_track_end_angle = polarToKnobAngle(Math.acos(-(config.track_width*1.3 + config.center_gap)/100.0) * 180.0 / Math.PI);\n                right_track_start_angle = polarToKnobAngle(Math.acos((config.track_width*1.3 + config.center_gap)/100.0) * 180.0 / Math.PI);\n            }\n\n            // mouse_wheel_direction = _isMacOS() ? -1 : 1; //TODO: really necessary?\n        }\n\n        function initValue() {\n            // set initial value and angle:\n            setValue(config.initial_value ? config.initial_value : config.default_value);\n        }\n\n        /**\n         * Return the value \"rounded\" according to config.value_resolution\n         * @param v value\n         */\n        function getRoundedValue(v) {\n            return config.value_resolution === null ? v : Math.round(v / config.value_resolution) * config.value_resolution;\n        }\n\n        /**\n         *\n         * @param angle [deg] in knob's coordinates\n         * @returns {*}\n         */\n        function getDisplayValue(angle) {\n            if (trace) console.log(\"getDisplayValue\", config.display_raw);\n            let v = getValue(angle);\n            return config.display_raw ? config.format_raw(v) : config.format(v);\n        }\n\n        /**\n         * Trick to adjust the cursor position when the range is odd.\n         */\n        function getCursorCorrection() {\n            let isOdd = n => Math.abs(n % 2) === 1;\n            return isOdd(Math.abs(config.value_max - config.value_min)) ? 0.5 : 0;\n        }\n\n        /**\n         * Get the knob's value determined by the knob's position (angle)\n         * @param a [deg] in knob's coordinates\n         * @returns {number}\n         */\n        function getValue(a) {\n            let p = a === undefined ? angle : a;\n            let v = ((p - config.angle_min) / (config.angle_max - config.angle_min)) * (config.value_max - config.value_min) + config.value_min;\n            return getRoundedValue(v - getCursorCorrection());\n        }\n\n        /**\n         * Set knob's value\n         * @param v\n         */\n        function setValue(v) {\n            if (v < config.value_min) {\n                value = config.value_min;\n            } else if (v > config.value_max) {\n                value = config.value_max;\n            } else {\n                value = v;\n            }\n            setAngle(((v + getCursorCorrection() - config.value_min) / (config.value_max - config.value_min)) * (config.angle_max - config.angle_min) + config.angle_min);\n            if (trace) console.log(`setValue(${v}) angle=` + ((v - config.value_min) / (config.value_max - config.value_min)) * (config.angle_max - config.angle_min) + config.angle_min);\n            return true;\n        }\n\n        /**\n         * Set knob's angle\n         * @param new_angle in [deg]\n         * @param fire_event\n         */\n        function setAngle(new_angle, fire_event) {\n            let prev = angle;\n            let notify = fire_event && (new_angle !== angle);\n            angle = Math.min(Math.max(new_angle, config.angle_min), config.angle_max);\n            if (notify) {\n                // fire the event if the change of angle affect the value:\n                if (getValue(prev) !== getValue()) {\n                    notifyChange();\n                }\n            }\n        }\n\n        /**\n         * Increment (or decrement if the increment is negative) the knob's angle.\n         * @param increment\n         */\n        function incAngle(increment) {\n            setAngle(Math.min(Math.max(angle + increment, config.angle_min), config.angle_max), true);\n        }\n\n        /**\n         * Return polar coordinates angle from our \"knob coordinates\" angle\n         */\n        function knobToPolarAngle(angle) {\n            let a = config.zero_at - angle;\n            if (a < 0) a = a + 360.0;\n            if (trace) console.log(`knobToPolarAngle ${angle} -> ${a}`);\n            return a;\n        }\n\n        /**\n         *\n         * @param angle [deg] with 0 at 3 o'clock\n         * @returns {number}\n         */\n        function polarToKnobAngle(angle) {\n            // \"-\" for changing CCW to CW\n            if (trace) console.log(`polarToKnobAngle ${angle} -> ${(config.zero_at - angle + 360.0) % 360.0}`);\n            return (config.zero_at - angle + 360.0) % 360.0;    // we add 360 to handle negative values down to -360\n        }\n\n        /**\n         * startDrag() must have been called before to init the targetRect variable.\n         */\n        function mouseUpdate(e) {\n\n            // MouseEvent.clientX (standard property: YES)\n            // The clientX read-only property of the MouseEvent interface provides\n            // the horizontal coordinate within the application's client area at which\n            // the event occurred (as opposed to the coordinates within the page).\n            // For example, clicking in the top-left corner of the client area will always\n            // result in a mouse event with a clientX value of 0, regardless of whether\n            // the page is scrolled horizontally. Originally, this property was defined\n            // as a long integer. The CSSOM View Module redefined it as a double float.\n\n            let dxPixels = e.clientX - targetRect.left;\n            let dyPixels = e.clientY - targetRect.top;\n\n            // mouse delta in cartesian coordinate with path center=0,0 and scaled (-1..0..1) relative to path:\n            // <svg> center:       (dx, dy) == ( 0,  0)\n            // <svg> top-left:     (dx, dy) == (-1,  1)\n            // <svg> bottom-right: (dx, dy) == ( 1, -1) (bottom right of the 100x100 viewBox, ignoring the bottom 100x20 for the label)\n            let dx = (dxPixels - arcCenterXPixels) / (targetRect.width / 2 );\n            let dy = - (dyPixels - arcCenterYPixels) / (targetRect.width / 2);  // targetRect.width car on a 20px de plus en hauteur\n            // pour le label\n\n            if (config.rotation === CCW) dx = - dx;\n\n            // convert to polar coordinates\n            let angle_rad = Math.atan2(dy, dx);\n            if (angle_rad < 0) angle_rad = 2.0*Math.PI + angle_rad;\n\n            if (trace) console.log(`mouseUpdate: position in svg = ${dxPixels}, ${dyPixels} pixels; ${dx.toFixed(3)}, ${dy.toFixed(3)} rel.; angle ${angle_rad.toFixed(3)} rad`);\n\n            setAngle(polarToKnobAngle(angle_rad * 180.0 / Math.PI), true);\n\n            // distance from arc center to mouse position:\n            // distance = Math.sqrt(dx*(HALF_WIDTH/config.track_radius)*dx*(HALF_WIDTH/config.track_radius) + dy*(HALF_HEIGHT/config.track_radius)*dy*(HALF_HEIGHT/config.track_radius));\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function startDrag(e) {\n\n            if (trace) console.log(\"startDrag\");\n\n            e.preventDefault();\n\n            // API: Event.currentTarget\n            //      Identifies the current target for the event, as the event traverses the DOM. It always REFERS TO THE ELEMENT\n            //      TO WHICH THE EVENT HANDLER HAS BEEN ATTACHED, as opposed to event.target which identifies the element on\n            //      which the event occurred.\n            //      https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n\n            // currentTarget = e.currentTarget;\n\n            // API: Element.getBoundingClientRect() (standard: YES)\n            //      The Element.getBoundingClientRect() method returns the size of an element\n            //      and its POSITION RELATIVE TO THE VIEWPORT.\n            //      The amount of scrolling that has been done of the viewport area (or any other\n            //      scrollable element) is taken into account when computing the bounding rectangle.\n            //      This means that the rectangle's boundary edges (top, left, bottom, and right)\n            //      change their values every time the scrolling position changes (because their\n            //      values are relative to the viewport and not absolute).\n            //      https://developer.mozilla.org/en/docs/Web/API/Element/getBoundingClientRect\n\n            // targetRect = currentTarget.getBoundingClientRect(); // currentTarget must be the <svg...> object\n            targetRect = svg_element.getBoundingClientRect();\n\n            // Note: we must take the boundingClientRect of the <svg> and not the <path> because the <path> bounding rect\n            //       is not constant because it encloses the current arc.\n\n            // By design, the arc center is at equal distance from top and left.\n            arcCenterXPixels = targetRect.width / 2;\n            //noinspection JSSuspiciousNameCombination\n            arcCenterYPixels = arcCenterXPixels;\n\n            document.addEventListener(\"mousemove\", handleDrag, false);\n            document.addEventListener(\"mouseup\", endDrag, false);\n\n            mouseUpdate(e);\n            redraw();\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function handleDrag(e) {\n            e.preventDefault();\n            mouseUpdate(e);\n            redraw();\n        }\n\n        /**\n         *\n         */\n        function endDrag() {\n            if (trace) console.log(\"endDrag\");\n            document.removeEventListener(\"mousemove\", handleDrag, false);\n            document.removeEventListener(\"mouseup\", endDrag, false);\n        }\n\n        /**\n         *\n         * @param e\n         * @returns {boolean}\n         */\n        function mouseWheelHandler(e) {\n\n            // WheelEvent\n            // This is the standard wheel event interface to use. Old versions of browsers implemented the two non-standard\n            // and non-cross-browser-compatible MouseWheelEvent and MouseScrollEvent interfaces. Use this interface and avoid\n            // the latter two.\n            // The WheelEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.\n\n            // https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\n            // https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js\n\n            e.preventDefault();\n\n            let dy = e.deltaY;\n\n            if (dy !== 0) {\n                // normalize Y delta\n                if (minDeltaY > Math.abs(dy) || !minDeltaY) {\n                    minDeltaY = Math.abs(dy);\n                }\n            }\n\n            incAngle(dy / minDeltaY * mouse_wheel_direction * config.mouse_wheel_acceleration);\n\n            // TODO: mouse speed detection (https://stackoverflow.com/questions/22593286/detect-measure-scroll-speed)\n\n            redraw();\n\n            return false;\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function startTouch(e) {\n\n            if (trace) console.log(\"startTouch\");\n\n            e.preventDefault(); // necessary to avoid moving all the page\n\n            targetRect = svg_element.getBoundingClientRect();\n\n            // By design, the arc center is at equal distance from top and left.\n            arcCenterXPixels = targetRect.width / 2;\n            //noinspection JSSuspiciousNameCombination\n            arcCenterYPixels = arcCenterXPixels;\n\n            document.addEventListener(\"touchmove\", handleTouch, {passive: false});\n            document.addEventListener(\"touchend\", endTouch);\n\n        }\n\n        /**\n         *\n         * @param e\n         */\n        function handleTouch(e) {\n\n            if (trace) console.log(\"handleTouch\", e.touches);\n\n            e.preventDefault();\n\n            let touchesIndex = e.touches.length - 1;\n\n            let dxPixels = e.touches[touchesIndex].clientX - targetRect.left;\n            let dyPixels = e.touches[touchesIndex].clientY - targetRect.top;\n\n            let dx = (dxPixels - arcCenterXPixels) / (targetRect.width / 2);\n            let dy = - (dyPixels - arcCenterYPixels) / (targetRect.width / 2);  // targetRect.width car on a 20px de plus en hauteur pour le label\n\n            if (config.rotation === CCW) dx = - dx;\n\n            // convert to polar coordinates\n            let angle_rad = Math.atan2(dy, dx);\n            if (angle_rad < 0) angle_rad = 2.0*Math.PI + angle_rad;\n\n            if (trace) console.log(`handleTouch: position in svg = ${dxPixels}, ${dyPixels} pixels; ${dx.toFixed(3)}, ${dy.toFixed(3)} rel.; angle ${angle_rad.toFixed(3)} rad`);\n\n            setAngle(polarToKnobAngle(angle_rad * 180.0 / Math.PI), true);\n\n            redraw();\n\n        }\n\n        /**\n         *\n         */\n        function endTouch() {\n            if (trace) console.log(\"endTouch\");\n            document.removeEventListener(\"touchmove\", handleTouch);\n            document.removeEventListener(\"touchend\", endTouch);\n        }\n\n        /**\n         *\n         */\n        function attachEventHandlers() {\n            if (trace) console.log(\"attach attachEventHandlers\");\n            svg_element.addEventListener(\"mousedown\", function(e) {\n                startDrag(e);\n            });\n            svg_element.addEventListener(\"wheel\", function(e) {\n                mouseWheelHandler(e);\n            });\n            svg_element.addEventListener(\"touchstart\", startTouch, {passive: false});\n        }\n\n        /**\n         *\n         */\n        function notifyChange() {\n            if (trace) console.log(\"knob value has changed\");\n            let value = getValue();     // TODO: cache the value\n            let event = new CustomEvent(\"change\", {\"detail\": value});\n            //svg_element.dispatchEvent(event);\n            elem.dispatchEvent(event);\n            if (config.onchange) {\n                config.onchange(value);\n            }\n        }\n\n        /**\n         * Utility function to configure the mousewheel direction.\n         * @returns {*}\n         * @private\n         */\n        function _isMacOS() {\n            return [\"Macintosh\", \"MacIntel\", \"MacPPC\", \"Mac68K\"].indexOf(window.navigator.platform) !== -1;\n        }\n\n        /**\n         * Return viewBox X,Y coordinates\n         * @param angle in [degree] (polar, 0 at 3 o'clock)\n         * @param radius; defaults to config.radius\n         * @returns {{x: number, y: number}}\n         */\n        function getViewboxCoord(angle, radius) {\n            let a = angle * Math.PI / 180.0;\n            let r = radius === undefined ? config.track_radius : radius;\n            let x = Math.cos(a) * r;\n            let y = Math.sin(a) * r;\n            return {\n                x: config.rotation === CW ? (centerX + x) : (centerX - x),\n                y: centerY - y\n            }\n        }\n\n        /**\n         *\n         * @param from_angle in [degree] in knob's coordinates\n         * @param to_angle in [degree] in knob's coordinates\n         * @param radius\n         */\n        function getArc(from_angle, to_angle, radius) {\n\n            if (trace) console.group(`getArc(${from_angle}, ${to_angle}, ${radius})`);\n\n            // SVG d: \"A rx,ry xAxisRotate LargeArcFlag,SweepFlag x,y\".\n            // SweepFlag is either 0 or 1, and determines if the arc should be swept in a clockwise (1), or anti-clockwise (0) direction\n            // ref: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d\n\n            let a0 = knobToPolarAngle(from_angle);\n            let a1 = knobToPolarAngle(to_angle);\n\n            // little trick to force a full arc (360deg) when from=0 and to=360\n            if (from_angle !== to_angle) {\n                // with this we make sure that x1 will be different than x0 within the path definition\n                a0 -= 0.0001;\n                a1 += 0.0001;\n            }\n\n            let {x: x0, y: y0} = getViewboxCoord(a0, radius);\n            let {x: x1, y: y1} = getViewboxCoord(a1, radius);\n\n            let delta_angle = (a0 - a1 + 360.0) % 360.0;\n\n            let large_arc = delta_angle < 180.0 ? 0 : 1;\n            let arc_direction = config.rotation === CW ? 1 : 0;\n\n            let p = `M ${x0},${y0} A ${radius},${radius} 0 ${large_arc},${arc_direction} ${x1},${y1}`;\n\n            if (trace) console.groupEnd();\n            if (trace) console.log(\"arc: \" + p);\n\n            return p;\n        }\n\n        /**\n         *\n         * @returns {*}\n         */\n        function getTrackPath() {\n\n            if (trace) console.log(\"getTrackPath()\");\n\n            let p = null;\n\n            if (config.center_zero) {\n\n                if (Array.isArray(config.center_value)) {\n                    // let v = getValue();\n                    // console.log('center value is an array; getValue=', getValue(), typeof v);\n                    if (config.center_value.includes(getValue())) {\n                        if (trace) console.log(\"getTrackPath: center position, track not drawn\");\n                        // track is not drawn when the value is at center\n                        return p;\n                    }\n                } else {\n                    if (getValue() === config.center_value) {\n                        if (trace) console.log(\"getTrackPath: center position, track not drawn\");\n                        // track is not drawn when the value is at center\n                        return p;\n                    }\n                }\n\n                // we assume the split is at 180 [deg] (knob\"s angle)\n                if (angle < 180) {\n                    p = getArc(Math.min(angle, left_track_end_angle), left_track_end_angle, config.track_radius);\n                } else if (angle > 180) {\n                    p = getArc(right_track_start_angle, Math.max(angle, right_track_start_angle), config.track_radius);\n                }\n\n            } else {\n                p = getArc(config.angle_min, angle, config.track_radius);\n            }\n\n            return p;\n        }\n\n        /**\n         *\n         */\n        function draw_background() {\n\n            if (trace) console.log(\"draw_background()\", config.bg);\n\n            if (!config.bg) return;\n\n            // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n\n            //\n            // back disk:\n            //\n            svg_bg = document.createElementNS(NS, \"circle\");\n            svg_bg.setAttributeNS(null, \"cx\", `${centerX}`);\n            svg_bg.setAttributeNS(null, \"cy\", `${centerY}`);\n            svg_bg.setAttributeNS(null, \"r\", `${config.bg_radius}`);\n            svg_bg.setAttribute(\"fill\", `${config.bg_color}`);\n            svg_bg.setAttribute(\"stroke\", `${config.bg_border_color}`);\n            svg_bg.setAttribute(\"stroke-width\", `${config.bg_border_width}`);\n            svg_bg.setAttribute(\"class\", config.class_bg);\n            svg_element.appendChild(svg_bg);\n        }\n\n        /**\n         *\n         */\n        function draw_markers() {\n\n            if (trace) console.log(\"draw_markers()\", config.markers);\n\n            if (!config.markers) return;\n\n            let p = \"\";\n            let step = (config.angle_max - config.angle_min) / config.markers;\n            for (let a = config.angle_min; a <= config.angle_max; a += step) {\n                let from = getViewboxCoord(knobToPolarAngle(a), config.markers_radius);    // getViewboxCoord(angle, radius)\n                let to = getViewboxCoord(knobToPolarAngle(a), config.markers_radius + config.markers_length);\n                p += `M ${from.x},${from.y} L ${to.x},${to.y} `;\n            }\n\n            svg_divisions = document.createElementNS(NS, \"path\");\n            svg_divisions.setAttributeNS(null, \"d\", p);\n            svg_divisions.setAttribute(\"stroke\", `${config.markers_color}`);\n            svg_divisions.setAttribute(\"stroke-width\", `${config.markers_width}`);\n            svg_divisions.setAttribute(\"stroke-linecap\", config.linecap);\n            svg_divisions.setAttribute(\"class\", config.class_markers);\n            svg_element.appendChild(svg_divisions);\n        }\n\n/*\n        function draw_units() {\n            let pos = getViewboxCoord(angle_min_polar, config.divisions_radius);    // getViewboxCoord(angle, radius)\n            svg_value_text = document.createElementNS(NS, \"text\");\n            svg_value_text.setAttributeNS(null, \"x\", `${pos.x}`);\n            svg_value_text.setAttributeNS(null, \"y\", `${pos.y}`);\n            // svg_value_text.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text.setAttribute(\"cursor\", \"default\");\n            svg_value_text.setAttribute(\"font-family\", config.font_family);\n            svg_value_text.setAttribute(\"font-size\", `10`);\n            // svg_value_text.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text.setAttribute(\"fill\", config.font_color);\n            // svg_value_text.setAttribute(\"class\", config.class_value);\n            // svg_value_text.textContent = getDisplayValue();\n            svg_value_text.textContent = config.value_min.toString();\n            svg_element.appendChild(svg_value_text);\n        }\n*/\n\n        /**\n         *\n         */\n        function draw_track_background() {\n\n            if (trace) console.log(\"draw_track_background()\", config.track_bg);\n\n            // For the use of null argument with setAttributeNS, see https://developer.mozilla.org/en-US/docs/Web/SVG/Namespaces_Crash_Course#Scripting_in_namespaced_XML\n\n            if (!config.track_bg) return;\n\n            //\n            // track background:\n            //\n            if (config.center_zero) {\n\n                // left track background\n                svg_track_bg_left = document.createElementNS(NS, \"path\");\n                svg_track_bg_left.setAttributeNS(null, \"d\", getArc(config.angle_min, left_track_end_angle, config.track_bg_radius));\n                svg_track_bg_left.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg_left.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg_left.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg_left.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg_left.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg_left);\n\n                // right track background\n                svg_track_bg_right = document.createElementNS(NS, \"path\");\n                svg_track_bg_right.setAttributeNS(null, \"d\", getArc(right_track_start_angle, config.angle_max, config.track_bg_radius));\n                svg_track_bg_right.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg_right.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg_right.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg_right.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg_right.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg_right);\n\n            } else {\n\n                svg_track_bg = document.createElementNS(NS, \"path\");\n                svg_track_bg.setAttributeNS(null, \"d\", getArc(config.angle_min, config.angle_max, config.track_bg_radius));\n                svg_track_bg.setAttribute(\"stroke\", `${config.track_bg_color}`);\n                svg_track_bg.setAttribute(\"stroke-width\", `${config.track_bg_width}`);\n                svg_track_bg.setAttribute(\"fill\", \"transparent\");\n                svg_track_bg.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track_bg.setAttribute(\"class\", config.class_track_bg);\n                svg_element.appendChild(svg_track_bg);\n\n            }\n        }\n\n        /**\n         *\n         */\n        function draw_track() {\n\n            if (trace) console.log(\"draw_track()\", config.track);\n\n            if (!config.track) return;\n            let p = getTrackPath();\n            if (p) {\n                svg_track = document.createElementNS(NS, \"path\");\n                svg_track.setAttributeNS(null, \"d\", p);\n                svg_track.setAttribute(\"stroke\", `${config.track_color_init}`);\n                svg_track.setAttribute(\"stroke-width\", `${config.track_width}`);\n                svg_track.setAttribute(\"fill\", \"transparent\");\n                svg_track.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_track.setAttribute(\"class\", config.class_track);\n                svg_element.appendChild(svg_track);\n            }\n        }\n\n        /**\n         *\n         * @returns {string}\n         */\n        function getTrackCursor() {\n            let a = knobToPolarAngle(angle);\n            let from = getViewboxCoord(a, config.cursor_radius);\n            let to = getViewboxCoord(a, config.cursor_radius + config.cursor_length);\n            return `M ${from.x},${from.y} L ${to.x},${to.y}`;\n        }\n\n        /**\n         *\n         */\n        function draw_cursor() {\n\n            if (trace) console.log(\"draw_cursor()\", config.cursor);\n\n            if (!config.cursor) return;\n\n            let p = getTrackCursor();\n            if (p) {\n                svg_cursor = document.createElementNS(NS, \"path\");\n                svg_cursor.setAttributeNS(null, \"d\", p);\n                svg_cursor.setAttribute(\"stroke\", `${config.cursor_color_init}`);\n                svg_cursor.setAttribute(\"stroke-width\", `${config.cursor_width}`);\n                svg_cursor.setAttribute(\"fill\", \"transparent\");\n                svg_cursor.setAttribute(\"stroke-linecap\", config.linecap);\n                svg_cursor.setAttribute(\"class\", config.class_cursor);\n                svg_element.appendChild(svg_cursor);\n            }\n        }\n\n        function getFontSize(text, multiline=false) {\n            if (typeof text !== \"string\") return config.font_size;\n            const f = 22;   // empiric value\n            let m = Math.min(f, text.length);\n            if (multiline) {\n                return config.font_size * Math.min(0.75, Math.max(((f - m) / f), 0.25));\n            } else {\n                return config.font_size * Math.max(((f - m) / f), 0.25);\n            }\n\n        }\n\n        function draw_value_line1(text, multiline=false) {\n            if (trace) console.log(\"draw_value_line1\", text);\n            svg_value_text = document.createElementNS(NS, \"text\");\n            svg_value_text.setAttributeNS(null, \"x\", `${HALF_WIDTH}`);\n            svg_value_text.setAttributeNS(null, \"y\", `${config.value_position}`);\n            svg_value_text.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text.setAttribute(\"cursor\", \"default\");\n            svg_value_text.setAttribute(\"font-family\", config.font_family);\n            svg_value_text.setAttribute(\"font-size\", `${getFontSize(text, multiline)}`);\n            svg_value_text.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text.setAttribute(\"fill\", config.font_color);\n            svg_value_text.setAttribute(\"class\", config.class_value);\n            svg_value_text.textContent = text;\n            svg_element.appendChild(svg_value_text);\n        }\n\n        function draw_value_line2(text) {\n            if (trace) console.log(\"draw_value_line2\", text);\n            svg_value_text2 = document.createElementNS(NS, \"text\");\n            svg_value_text2.setAttributeNS(null, \"x\", `${HALF_WIDTH}`);\n            svg_value_text2.setAttributeNS(null, \"y\", `${config.value_position + 4}`);\n            svg_value_text2.setAttribute(\"text-anchor\", \"middle\");\n            svg_value_text2.setAttribute(\"cursor\", \"default\");\n            svg_value_text2.setAttribute(\"font-family\", config.font_family);\n            svg_value_text2.setAttribute(\"font-size\", `${getFontSize(text, true)}`);\n            svg_value_text2.setAttribute(\"font-weight\", `${config.font_weight}`);\n            svg_value_text2.setAttribute(\"fill\", config.font_color);\n            svg_value_text2.setAttribute(\"class\", config.class_value);\n            svg_value_text2.textContent = text;\n            svg_element.appendChild(svg_value_text2);\n\n        }\n\n        /**\n         *\n         */\n        function draw_value() {\n\n            if (trace) console.log(\"draw_value\", config.value_text);\n\n            if (!config.value_text) return;\n\n            const t = getDisplayValue();\n\n            if (typeof t === \"number\" || t.indexOf(\"\\n\") <= 0) {\n\n                if (trace) console.log(\"single line\");\n                draw_value_line1(t)\n\n            } else {\n                const lines = t.split(\"\\n\");\n                if (trace) console.log(\"two lines\", lines);\n\n                draw_value_line1(lines[0], true);\n                draw_value_line2(lines[1]);\n            }\n\n        }\n\n        function update_value() {\n\n            if (trace) console.log(\"update_value\", config.value_text);\n\n            if (!config.value_text) return;\n\n            const t = getDisplayValue();\n\n            if (typeof t === \"number\" || t.indexOf(\"\\n\") <= 0) {\n                // single line:\n\n                if (trace) console.log(\"single line\");\n\n                if (svg_value_text) {\n                    svg_value_text.setAttributeNS(null, \"y\", `${config.value_position}`);\n                    svg_value_text.setAttribute(\"font-size\", `${getFontSize(t)}`);\n                    svg_value_text.textContent = t;\n                }\n\n                if (svg_value_text2) {\n                    svg_element.removeChild(svg_value_text2);\n                    svg_value_text2 = null;\n                }\n\n            } else {\n                // two lines:\n\n                const lines = t.split(\"\\n\");\n                if (trace) console.log(\"two lines\", t, lines);\n\n                if (svg_value_text) {\n                    svg_value_text.setAttributeNS(null, \"y\", `${config.value_position - 12}`);\n                    svg_value_text.setAttribute(\"font-size\", `${getFontSize(lines[0], true)}`);\n                    svg_value_text.textContent = lines[0];\n                }\n\n                if (svg_value_text2) {\n                    svg_value_text2.setAttributeNS(null, \"y\", `${config.value_position + 4}`);\n                    svg_value_text2.setAttribute(\"font-size\", `${getFontSize(lines[1], true)}`);\n                    svg_value_text2.textContent = lines[1];\n                } else {\n                    draw_value_line2(lines[1]);\n                }\n            }\n\n        }\n\n        /**\n         *\n         */\n        function draw() {\n\n            if (trace) console.log(\"draw()\", config);\n\n            draw_background();\n            draw_track_background();\n            draw_markers();\n            // draw_units();\n            draw_track();\n            draw_cursor();\n            draw_value();\n        }\n\n        /**\n         *\n         */\n        function redraw() {\n\n            if (trace) console.log(\"redraw()\", config);\n\n            let p = getTrackPath();\n            if (p) {\n                if (svg_track) {\n                    if (trace) console.log(\"redraw track already exist, update d\");\n                    svg_track.setAttributeNS(null, \"d\", p);\n                } else {\n                    if (trace) console.log(\"redraw draw_track\");\n                    draw_track();\n                }\n            } else {\n                if (svg_track) {\n                    if (trace) console.log(\"redraw track already exist, hide it\");\n                    svg_track.setAttributeNS(null, \"d\", \"\");    // we hide the track\n                }\n            }\n\n            if (!has_changed) {\n                has_changed = getValue() !== config.default_value;\n                if (has_changed) {\n                    if (svg_track) {\n                        svg_track.setAttribute(\"stroke\", `${config.track_color}`);\n                    }\n                }\n            }\n\n            if (svg_cursor) {\n                p = getTrackCursor();\n                if (p) {\n                    if (trace) console.log(\"redraw cursor\");\n                    svg_cursor.setAttributeNS(null, \"d\", p);\n                    if (has_changed) {\n                        svg_cursor.setAttribute(\"stroke\", `${config.cursor_color}`);\n                    }\n                }\n            }\n\n            if (svg_value_text) {\n                if (trace) console.log(\"redraw svg_value_text\");\n                // svg_value_text.textContent = getDisplayValue();\n                update_value();\n            }\n        }\n\n        /**\n         *\n         */\n        return {\n            set value(v) {\n                // console.group(\"value setter\");\n                setValue(v);\n                redraw();\n                // console.groupEnd();\n            },\n            set config(new_config) {\n                // console.group(\"config setter\");\n                config = Object.assign({}, defaults, config, new_config);\n                init();\n                redraw();\n                // console.groupEnd();\n            },\n            setConfigValue: function(attribute, value) {\n                // console.group(\"setConfigValue\");\n                config[attribute] = value;\n                init();\n                redraw();\n                // console.groupEnd();\n            },\n            initValue,\n            enableDebug: function() {\n                trace = true;\n            },\n            disableDebug: function() {\n                trace = false;\n            }\n        };\n\n    }\n"],"names":["light","bg_color","bg_border_color","track_bg_color","track_color_init","track_color","cursor_color_init","cursor_color","markers_color","font_color","light2","dark","elem","conf","svg_element","trace","NS","CW","CCW","HALF_WIDTH","centerX","centerY","vbWidth","String","document","querySelector","nodeType","nodeName","toLowerCase","bbox","getBBox","x","width","y","height","createElementNS","appendChild","defaults","label","rotation","default_value","initial_value","value_min","value_max","value_resolution","center_zero","center_value","center_gap","zero_at","angle_min","angle_max","bg_radius","bg_border_width","track_bg_radius","track_bg_width","track_radius","track_width","cursor_radius","cursor_length","cursor_width","palette","bg","track_bg","track","cursor","linecap","value_text","value_position","HALF_HEIGHT","font_family","font_size","display_raw","format_raw","v","Math","round","format","font_weight","markers","markers_radius","markers_length","markers_width","class_bg","class_track_bg","class_track","class_value","class_cursor","class_markers","snap_to_steps","mouse_wheel_acceleration","onchange","data_config","JSON","parse","dataset","config","c","Object","assign","palettes","setAttributeNS","targetRect","minDeltaY","arcCenterXPixels","arcCenterYPixels","left_track_end_angle","right_track_start_angle","angle","svg_bg","svg_track_bg","svg_track_bg_left","svg_track_bg_right","svg_track","svg_cursor","svg_divisions","svg_value_text","svg_value_text2","has_changed","init","console","log","getRoundedValue","polarToKnobAngle","acos","PI","initValue","setValue","getDisplayValue","getValue","getCursorCorrection","n","abs","a","undefined","setAngle","new_angle","fire_event","prev","notify","min","max","value","event","CustomEvent","dispatchEvent","notifyChange","knobToPolarAngle","mouseUpdate","e","dxPixels","clientX","left","dyPixels","clientY","top","dx","dy","angle_rad","atan2","toFixed","handleDrag","preventDefault","redraw","endDrag","removeEventListener","handleTouch","touches","touchesIndex","length","endTouch","getViewboxCoord","radius","r","cos","sin","getArc","from_angle","to_angle","group","a0","a1","p","x0","y0","groupEnd","getTrackPath","Array","isArray","includes","draw_track","setAttribute","getTrackCursor","from","to","getFontSize","text","multiline","m","draw_value_line1","textContent","draw_value_line2","t","indexOf","removeChild","lines","split","update_value","step","draw_markers","draw_cursor","draw_value","addEventListener","getBoundingClientRect","startDrag","deltaY","mouseWheelHandler","passive","new_config","setConfigValue","attribute","enableDebug","disableDebug"],"mappings":"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"}
\ No newline at end of file
